#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∫—É—Ä—Å—ã –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ –ø–æ–Ω—è—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
"""

import sys
import os
from decimal import Decimal

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from handlers.formatters import MessageFormatter
from handlers.currency_pairs import CURRENCY_PAIRS
from handlers.calculation_logic import calculate_margin_rate


def test_display_format():
    """–¢–µ—Å—Ç –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤"""
    
    print("üé® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤")
    print("=" * 70)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏
    test_cases = [
        {
            'pair_key': 'rubusd',
            'pair_name': 'RUB/USD',
            'api_rate': 0.01018,  # API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç: 1 RUB = 0.01018 USD
            'expected_display': '1 USD = 98.23 RUB',  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º: 1 USD = 98.23 RUB
            'description': 'RUB/USD –¥–æ–ª–∂–µ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∫–∞–∫ USD/RUB'
        },
        {
            'pair_key': 'usdrub',
            'pair_name': 'USD/RUB',
            'api_rate': 98.25,  # API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç: 1 USD = 98.25 RUB
            'expected_display': '1 USD = 98.25 RUB',  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º: 1 USD = 98.25 RUB
            'description': 'USD/RUB –¥–æ–ª–∂–µ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∫–∞–∫ –µ—Å—Ç—å'
        },
        {
            'pair_key': 'rubeur',
            'pair_name': 'RUB/EUR',
            'api_rate': 0.00935,  # API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç: 1 RUB = 0.00935 EUR
            'expected_display': '1 EUR = 107.00 RUB',  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º: 1 EUR = 107.00 RUB
            'description': 'RUB/EUR –¥–æ–ª–∂–µ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∫–∞–∫ EUR/RUB'
        },
        {
            'pair_key': 'eurrub',
            'pair_name': 'EUR/RUB',
            'api_rate': 107.50,  # API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç: 1 EUR = 107.50 RUB
            'expected_display': '1 EUR = 107.50 RUB',  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º: 1 EUR = 107.50 RUB
            'description': 'EUR/RUB –¥–æ–ª–∂–µ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∫–∞–∫ –µ—Å—Ç—å'
        },
        {
            'pair_key': 'rubusdt',
            'pair_name': 'RUB/USDT',
            'api_rate': 0.01045,  # API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç: 1 RUB = 0.01045 USDT
            'expected_display': '1 USDT = 95.69 RUB',  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º: 1 USDT = 95.69 RUB
            'description': 'RUB/USDT –¥–æ–ª–∂–µ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∫–∞–∫ USDT/RUB'
        },
        {
            'pair_key': 'usdtrub',
            'pair_name': 'USDT/RUB',
            'api_rate': 95.50,  # API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç: 1 USDT = 95.50 RUB
            'expected_display': '1 USDT = 95.50 RUB',  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º: 1 USDT = 95.50 RUB
            'description': 'USDT/RUB –¥–æ–ª–∂–µ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∫–∞–∫ –µ—Å—Ç—å'
        },
    ]
    
    print(f"üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {len(test_cases)} —Å–ª—É—á–∞–µ–≤ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    print()
    
    success_count = 0
    
    for i, test_case in enumerate(test_cases, 1):
        pair_key = test_case['pair_key']
        pair_name = test_case['pair_name']
        api_rate = test_case['api_rate']
        expected_display = test_case['expected_display']
        description = test_case['description']
        
        print(f"üîç –¢–µ—Å—Ç {i}: {pair_name}")
        print(f"   üìù {description}")
        print(f"   üî¢ API –∫—É—Ä—Å: {api_rate}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä–µ
        pair_info = CURRENCY_PAIRS.get(pair_key)
        if not pair_info:
            print(f"   ‚ùå –ü–∞—Ä–∞ {pair_key} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            continue
        
        try:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫—É—Ä—Å
            formatted_rate = MessageFormatter._format_user_friendly_rate(pair_info, api_rate)
            
            print(f"   üí∞ –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—É—Ä—Å: {formatted_rate}")
            print(f"   üéØ –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: <code>{expected_display}</code>")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ (—É–±–∏—Ä–∞–µ–º HTML —Ç–µ–≥–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)
            clean_formatted = formatted_rate.replace('<code>', '').replace('</code>', '')
            
            # –î–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ
            if 'RUB' in expected_display:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                expected_value = float(expected_display.split('=')[1].strip().split()[0])
                actual_value = float(clean_formatted.split('=')[1].strip().split()[0])
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
                if abs(expected_value - actual_value) < 0.01:
                    print(f"   ‚úÖ –§–æ—Ä–º–∞—Ç –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω!")
                    success_count += 1
                else:
                    print(f"   ‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ! –û–∂–∏–¥–∞–ª–æ—Å—å: {expected_value}, –ø–æ–ª—É—á–µ–Ω–æ: {actual_value}")
            else:
                # –î–ª—è –Ω–µ—Ä—É–±–ª–µ–≤—ã—Ö –ø–∞—Ä –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
                if expected_display in clean_formatted:
                    print(f"   ‚úÖ –§–æ—Ä–º–∞—Ç –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω!")
                    success_count += 1
                else:
                    print(f"   ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!")
                    
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        print()
    
    print("=" * 70)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}/{len(test_cases)}")
    print(f"‚ùå –ù–µ—É–¥–∞—á–Ω–æ: {len(test_cases) - success_count}/{len(test_cases)}")
    print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(success_count/len(test_cases))*100:.1f}%")
    
    return success_count == len(test_cases)


def test_margin_calculation_with_display():
    """–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –º–∞—Ä–∂–∏ —Å –Ω–æ–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    
    print("\nüßÆ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ –º–∞—Ä–∂–∏ —Å –Ω–æ–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    print("=" * 70)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏
    test_cases = [
        {
            'pair_key': 'rubusd',
            'pair_name': 'RUB/USD',
            'api_rate': 0.01018,  # 1 RUB = 0.01018 USD
            'margin': 5.0,
            'expected_logic': '–ø–ª—é—Å',
            'description': 'RUB/USD —Å –º–∞—Ä–∂–æ–π 5% (–ø–ª—é—Å –ø—Ä–æ—Ü–µ–Ω—Ç)'
        },
        {
            'pair_key': 'usdrub',
            'pair_name': 'USD/RUB',
            'api_rate': 98.25,  # 1 USD = 98.25 RUB
            'margin': 5.0,
            'expected_logic': '–º–∏–Ω—É—Å',
            'description': 'USD/RUB —Å –º–∞—Ä–∂–æ–π 5% (–º–∏–Ω—É—Å –ø—Ä–æ—Ü–µ–Ω—Ç)'
        },
        {
            'pair_key': 'usdtrub',
            'pair_name': 'USDT/RUB',
            'api_rate': 95.50,  # 1 USDT = 95.50 RUB
            'margin': 3.0,
            'expected_logic': '–º–∏–Ω—É—Å',
            'description': 'USDT/RUB —Å –º–∞—Ä–∂–æ–π 3% (–º–∏–Ω—É—Å –ø—Ä–æ—Ü–µ–Ω—Ç)'
        },
        {
            'pair_key': 'rubusdt',
            'pair_name': 'RUB/USDT',
            'api_rate': 0.01045,  # 1 RUB = 0.01045 USDT
            'margin': 2.5,
            'expected_logic': '–ø–ª—é—Å',
            'description': 'RUB/USDT —Å –º–∞—Ä–∂–æ–π 2.5% (–ø–ª—é—Å –ø—Ä–æ—Ü–µ–Ω—Ç)'
        },
    ]
    
    print(f"üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {len(test_cases)} —Å–ª—É—á–∞–µ–≤ —Ä–∞—Å—á–µ—Ç–∞ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º")
    print()
    
    success_count = 0
    
    for i, test_case in enumerate(test_cases, 1):
        pair_key = test_case['pair_key']
        pair_name = test_case['pair_name']
        api_rate = test_case['api_rate']
        margin = test_case['margin']
        expected_logic = test_case['expected_logic']
        description = test_case['description']
        
        print(f"üîç –¢–µ—Å—Ç {i}: {pair_name}")
        print(f"   üìù {description}")
        print(f"   üî¢ API –∫—É—Ä—Å: {api_rate}")
        print(f"   üìà –ú–∞—Ä–∂–∞: {margin}%")
        print(f"   üîÑ –û–∂–∏–¥–∞–µ–º–∞—è –ª–æ–≥–∏–∫–∞: {expected_logic} –ø—Ä–æ—Ü–µ–Ω—Ç")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä–µ
        pair_info = CURRENCY_PAIRS.get(pair_key)
        if not pair_info:
            print(f"   ‚ùå –ü–∞—Ä–∞ {pair_key} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            continue
        
        try:
            # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
            exchange_rate_data = {
                'rate': str(api_rate),
                'timestamp': '2024-01-01T12:00:00Z',
                'source': 'test'
            }
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç
            result = calculate_margin_rate(
                pair_info=pair_info,
                amount=Decimal('1000.0'),
                margin=Decimal(str(margin)),
                exchange_rate_data=exchange_rate_data,
                use_banking_logic=False
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É —Ä–∞—Å—á–µ—Ç–∞
            base_rate = Decimal(str(api_rate))
            if expected_logic == '–ø–ª—é—Å':
                expected_final_rate = base_rate * (Decimal('1') + Decimal(str(margin)) / Decimal('100'))
            else:  # –º–∏–Ω—É—Å
                expected_final_rate = base_rate * (Decimal('1') - Decimal(str(margin)) / Decimal('100'))
            
            print(f"   üí∞ –ë–∞–∑–æ–≤—ã–π –∫—É—Ä—Å: {base_rate}")
            print(f"   üíé –ò—Ç–æ–≥–æ–≤—ã–π –∫—É—Ä—Å: {result.final_rate}")
            print(f"   üéØ –û–∂–∏–¥–∞–µ–º—ã–π –∫—É—Ä—Å: {expected_final_rate}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ 8 –∑–Ω–∞–∫–æ–≤
            if abs(result.final_rate - expected_final_rate) < Decimal('0.00000001'):
                print(f"   ‚úÖ –õ–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞!")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                base_rate_display = MessageFormatter._format_user_friendly_rate(pair_info, float(base_rate))
                final_rate_display = MessageFormatter._format_user_friendly_rate(pair_info, float(result.final_rate))
                
                print(f"   üìä –ë–∞–∑–æ–≤—ã–π –∫—É—Ä—Å (–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ): {base_rate_display}")
                print(f"   üíé –ò—Ç–æ–≥–æ–≤—ã–π –∫—É—Ä—Å (–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ): {final_rate_display}")
                
                success_count += 1
            else:
                print(f"   ‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞!")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        print()
    
    print("=" * 70)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å—á–µ—Ç–∞ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º:")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}/{len(test_cases)}")
    print(f"‚ùå –ù–µ—É–¥–∞—á–Ω–æ: {len(test_cases) - success_count}/{len(test_cases)}")
    print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(success_count/len(test_cases))*100:.1f}%")
    
    return success_count == len(test_cases)


if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤")
    print()
    
    # –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    display_test_passed = test_display_format()
    
    # –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    calculation_test_passed = test_margin_calculation_with_display()
    
    print("\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    
    if display_test_passed and calculation_test_passed:
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print("üìã –°–≤–æ–¥–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π:")
        print("   ‚Ä¢ RUB/USD —Ç–µ–ø–µ—Ä—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∫–∞–∫ USD/RUB")
        print("   ‚Ä¢ RUB/EUR —Ç–µ–ø–µ—Ä—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∫–∞–∫ EUR/RUB")
        print("   ‚Ä¢ RUB/USDT —Ç–µ–ø–µ—Ä—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∫–∞–∫ USDT/RUB")
        print("   ‚Ä¢ –õ–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –º–∞—Ä–∂–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ (–ø–ª—é—Å/–º–∏–Ω—É—Å)")
        print("   ‚Ä¢ –§–æ—Ä–º–∞—Ç –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç '—Å–∫–æ–ª—å–∫–æ —Ä—É–±–ª–µ–π –∑–∞ 1 –µ–¥–∏–Ω–∏—Ü—É –≤–∞–ª—é—Ç—ã'")
        sys.exit(0)
    else:
        print("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è!")
        sys.exit(1)