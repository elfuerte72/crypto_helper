#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ APILayer —Å Telegram –±–æ—Ç–æ–º
"""

import asyncio
import sys
import os
from unittest.mock import AsyncMock, MagicMock

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from services.api_service import api_service, determine_pair_type
from handlers.currency_pairs import get_currency_pair_info, is_valid_currency_pair
from handlers.calculation_logic import calculate_margin_rate, CalculationResult
from handlers.formatters import MessageFormatter
from config import config
from decimal import Decimal

def print_header(title):
    """–ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫"""
    print("\n" + "=" * 60)
    print(f"ü§ñ {title}")
    print("=" * 60)

async def test_api_integration():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ API —Å –±–æ—Ç–æ–º"""
    
    print_header("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–ò API –° TELEGRAM –ë–û–¢–û–ú")
    print(f"üîë API Key: {config.API_LAYER_KEY[:10]}...")
    print(f"üéØ Bot Token: {config.BOT_TOKEN[:10]}...")
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ health check
    print("\n1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è API —Å–µ—Ä–≤–∏—Å–æ–≤...")
    
    try:
        async with api_service as service:
            health = await service.health_check()
            print(f"   üìä –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: {health['status']}")
            print(f"   üîó Rapira API: {health['rapira_api'].get('status', 'unknown')}")
            print(f"   üîó APILayer: {health['apilayer_api'].get('status', 'unknown')}")
            
            if health['status'] != 'healthy':
                print("   ‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—Å—è")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ health check: {e}")
        return False
    
    # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä (–∫–∞–∫ –≤ –±–æ—Ç–µ)
    print("\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä (–ª–æ–≥–∏–∫–∞ –±–æ—Ç–∞)...")
    
    test_pairs = [
        ('rubzar', 'RUB/ZAR'),
        ('zarrub', 'ZAR/RUB'),
        ('usdtrub', 'USDT/RUB'),
        ('btcusdt', 'BTC/USDT'),
        ('ethusdt', 'ETH/USDT')
    ]
    
    for pair_callback, expected_pair in test_pairs:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞—Ä–∞ –≤–∞–ª–∏–¥–Ω–∞ (–∫–∞–∫ –≤ –±–æ—Ç–µ)
            is_valid = is_valid_currency_pair(pair_callback)
            print(f"   üìã {pair_callback} ‚Üí {expected_pair}: {'‚úÖ –≤–∞–ª–∏–¥–Ω–∞' if is_valid else '‚ùå –Ω–µ–≤–∞–ª–∏–¥–Ω–∞'}")
            
            if is_valid:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä–µ
                pair_info = get_currency_pair_info(pair_callback)
                if pair_info:
                    print(f"      ‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {pair_info['name']}")
                    print(f"      ‚Ä¢ –ë–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞: {pair_info['base']}")
                    print(f"      ‚Ä¢ –ö–æ—Ç–∏—Ä—É–µ–º–∞—è –≤–∞–ª—é—Ç–∞: {pair_info['quote']}")
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–∞—Ä—ã
                    pair_type = determine_pair_type(pair_info['name'])
                    print(f"      ‚Ä¢ –¢–∏–ø: {pair_type}")
                else:
                    print(f"      ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä–µ")
                    
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {pair_callback}: {e}")
    
    # –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ (–∫–∞–∫ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö –±–æ—Ç–∞)
    print("\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤...")
    
    test_real_pairs = ['RUB/ZAR', 'USDT/RUB', 'BTC/USDT', 'USD/RUB']
    
    async with api_service as service:
        for pair in test_real_pairs:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å (–∫–∞–∫ –≤ start_margin_calculation)
                exchange_rate = await service.get_exchange_rate(pair)
                
                if exchange_rate:
                    print(f"   ‚úÖ {pair}: {exchange_rate.rate:.6f} (–∏—Å—Ç–æ—á–Ω–∏–∫: {exchange_rate.source})")
                    
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ dict (–∫–∞–∫ –≤ –±–æ—Ç–µ)
                    rate_dict = exchange_rate.to_dict()
                    print(f"      ‚Ä¢ Rate dict: –∫–ª—é—á–µ–π = {len(rate_dict)}")
                else:
                    print(f"   ‚ùå {pair}: –∫—É—Ä—Å –Ω–µ –ø–æ–ª—É—á–µ–Ω")
                    
            except Exception as e:
                print(f"   ‚ùå {pair}: –æ—à–∏–±–∫–∞ - {e}")
    
    # –¢–µ—Å—Ç 4: –†–∞—Å—á–µ—Ç —Å –Ω–∞—Ü–µ–Ω–∫–æ–π (–∫–∞–∫ –≤ –±–æ—Ç–µ)
    print("\n4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ —Å –Ω–∞—Ü–µ–Ω–∫–æ–π...")
    
    try:
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∫–∞–∫ –≤ –±–æ—Ç–µ
        pair_callback = 'usdtrub'
        pair_info = get_currency_pair_info(pair_callback)
        
        if pair_info:
            async with api_service as service:
                exchange_rate = await service.get_exchange_rate(pair_info['name'])
                
                if exchange_rate:
                    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
                    amount = Decimal('1000')  # 1000 USDT
                    margin = Decimal('3.5')   # 3.5% –Ω–∞—Ü–µ–Ω–∫–∞
                    
                    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç (–∫–∞–∫ –≤ process_margin_input)
                    result = calculate_margin_rate(
                        pair_info=pair_info,
                        amount=amount,
                        margin=margin,
                        exchange_rate_data=exchange_rate.to_dict()
                    )
                    
                    print(f"   üí∞ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç –¥–ª—è {pair_info['name']}:")
                    print(f"      ‚Ä¢ –ë–∞–∑–æ–≤—ã–π –∫—É—Ä—Å: {result.base_rate:.2f}")
                    print(f"      ‚Ä¢ –ù–∞—Ü–µ–Ω–∫–∞: {margin}%")
                    print(f"      ‚Ä¢ –ò—Ç–æ–≥–æ–≤—ã–π –∫—É—Ä—Å: {result.final_rate:.2f}")
                    print(f"      ‚Ä¢ –°—É–º–º–∞: {amount} {pair_info['base']}")
                    print(f"      ‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result.final_amount:.2f} {pair_info['quote']}")
                    print(f"      ‚Ä¢ –ü—Ä–∏–±—ã–ª—å: {result.profit:.2f} {pair_info['quote']}")
                    
                    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–∫–∞–∫ –≤ –±–æ—Ç–µ)
                    formatted_result = MessageFormatter.format_calculation_result(result)
                    print(f"   üìù –î–ª–∏–Ω–∞ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {len(formatted_result)} —Å–∏–º–≤–æ–ª–æ–≤")
                    
                else:
                    print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞")
        else:
            print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Å –Ω–∞—Ü–µ–Ω–∫–æ–π: {e}")
    
    # –¢–µ—Å—Ç 5: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    print("\n5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π...")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
        welcome_msg = MessageFormatter.format_welcome_message()
        print(f"   ‚úÖ Welcome message: {len(welcome_msg)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        error_msg = MessageFormatter.format_error_message('api_error', '–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞')
        print(f"   ‚úÖ Error message: {len(error_msg)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        cancel_msg = MessageFormatter.format_cancel_message('–¢–µ—Å—Ç–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è')
        print(f"   ‚úÖ Cancel message: {len(cancel_msg)} —Å–∏–º–≤–æ–ª–æ–≤")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    
    return True

async def test_bot_simulation():
    """–°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    
    print_header("–°–ò–ú–£–õ–Ø–¶–ò–Ø –†–ê–ë–û–¢–´ TELEGRAM –ë–û–¢–ê")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    mock_user = MagicMock()
    mock_user.id = 12345
    mock_user.username = "test_user"
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –Ω–∞—Ü–µ–Ω–∫—É
    print("\nüé≠ –°—Ü–µ–Ω–∞—Ä–∏–π: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫—É—Ä—Å USDT/RUB —Å –Ω–∞—Ü–µ–Ω–∫–æ–π 2.5%")
    print("-" * 50)
    
    try:
        # –®–∞–≥ 1: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç –Ω–∞ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É
        pair_callback = 'usdtrub'
        print(f"1. üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –ø–∞—Ä—É: {pair_callback}")
        
        # –®–∞–≥ 2: –ë–æ—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
        is_valid = is_valid_currency_pair(pair_callback)
        print(f"2. ü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏: {'‚úÖ –≤–∞–ª–∏–¥–Ω–∞' if is_valid else '‚ùå –Ω–µ–≤–∞–ª–∏–¥–Ω–∞'}")
        
        if not is_valid:
            print("   ‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π –ø—Ä–µ—Ä–≤–∞–Ω - –Ω–µ–≤–∞–ª–∏–¥–Ω–∞—è –ø–∞—Ä–∞")
            return False
        
        # –®–∞–≥ 3: –ë–æ—Ç –ø–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä–µ
        pair_info = get_currency_pair_info(pair_callback)
        print(f"3. ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ä–µ: {pair_info['name']} ({pair_info['base']} ‚Üí {pair_info['quote']})")
        
        # –®–∞–≥ 4: –ë–æ—Ç –ø–æ–ª—É—á–∞–µ—Ç –∫—É—Ä—Å —á–µ—Ä–µ–∑ API
        print("4. ü§ñ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ —á–µ—Ä–µ–∑ API...")
        async with api_service as service:
            exchange_rate = await service.get_exchange_rate(pair_info['name'])
            
            if exchange_rate:
                print(f"   ‚úÖ –ö—É—Ä—Å –ø–æ–ª—É—á–µ–Ω: {exchange_rate.rate:.2f} (–∏—Å—Ç–æ—á–Ω–∏–∫: {exchange_rate.source})")
                
                # –®–∞–≥ 5: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –Ω–∞—Ü–µ–Ω–∫—É
                margin_input = "2.5"
                print(f"5. üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –Ω–∞—Ü–µ–Ω–∫—É: {margin_input}%")
                
                # –®–∞–≥ 6: –ë–æ—Ç –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –Ω–∞—Ü–µ–Ω–∫—É
                from handlers.validation import InputValidator
                try:
                    margin = InputValidator.validate_margin(margin_input)
                    print(f"6. ü§ñ –ù–∞—Ü–µ–Ω–∫–∞ –≤–∞–ª–∏–¥–Ω–∞: {margin}%")
                    
                    # –®–∞–≥ 7: –ë–æ—Ç —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π –∫—É—Ä—Å
                    from handlers.calculation_logic import MarginCalculator
                    final_rate = MarginCalculator.calculate_final_rate(
                        Decimal(str(exchange_rate.rate)), 
                        margin
                    )
                    print(f"7. ü§ñ –ò—Ç–æ–≥–æ–≤—ã–π –∫—É—Ä—Å: {final_rate:.2f}")
                    
                    # –®–∞–≥ 8: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Å—É–º–º—É
                    amount_input = "500"
                    print(f"8. üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Å—É–º–º—É: {amount_input}")
                    
                    # –®–∞–≥ 9: –ë–æ—Ç –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Å—É–º–º—É
                    amount = InputValidator.validate_amount(amount_input)
                    print(f"9. ü§ñ –°—É–º–º–∞ –≤–∞–ª–∏–¥–Ω–∞: {amount}")
                    
                    # –®–∞–≥ 10: –ë–æ—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç
                    result = calculate_margin_rate(
                        pair_info=pair_info,
                        amount=amount,
                        margin=margin,
                        exchange_rate_data=exchange_rate.to_dict()
                    )
                    
                    print("10. ü§ñ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç:")
                    print(f"    ‚Ä¢ –ë–∞–∑–æ–≤—ã–π –∫—É—Ä—Å: {result.base_rate:.2f}")
                    print(f"    ‚Ä¢ –ù–∞—Ü–µ–Ω–∫–∞: {result.margin_percent}%")
                    print(f"    ‚Ä¢ –ò—Ç–æ–≥–æ–≤—ã–π –∫—É—Ä—Å: {result.final_rate:.2f}")
                    print(f"    ‚Ä¢ –°—É–º–º–∞: {result.amount} {result.base_currency}")
                    print(f"    ‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result.final_amount:.2f} {result.quote_currency}")
                    print(f"    ‚Ä¢ –ü—Ä–∏–±—ã–ª—å: {result.profit:.2f} {result.quote_currency}")
                    
                    # –®–∞–≥ 11: –ë–æ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
                    formatted_message = MessageFormatter.format_calculation_result(result)
                    print(f"11. ü§ñ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–æ ({len(formatted_message)} —Å–∏–º–≤–æ–ª–æ–≤)")
                    
                    print("\n‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                    return True
                    
                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏/—Ä–∞—Å—á–µ—Ç–µ: {e}")
                    return False
            else:
                print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å")
                return False
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–ò APILAYER –° TELEGRAM –ë–û–¢–û–ú")
    print("=" * 70)
    print(f"–ü—Ä–æ–µ–∫—Ç: {os.path.basename(os.getcwd())}")
    print(f"Python: {sys.version.split()[0]}")
    print("=" * 70)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    print("\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    if not config.BOT_TOKEN:
        print("‚ùå BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return False
    
    if not config.API_LAYER_KEY:
        print("‚ùå API_LAYER_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return False
    
    print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤ –ø–æ—Ä—è–¥–∫–µ")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    results = []
    
    # –¢–µ—Å—Ç 1: API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
    try:
        result1 = await test_api_integration()
        results.append(("API Integration", result1))
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ API —Ç–µ—Å—Ç–∞—Ö: {e}")
        results.append(("API Integration", False))
    
    # –¢–µ—Å—Ç 2: –°–∏–º—É–ª—è—Ü–∏—è –±–æ—Ç–∞
    try:
        result2 = await test_bot_simulation()
        results.append(("Bot Simulation", result2))
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Å–∏–º—É–ª—è—Ü–∏–∏ –±–æ—Ç–∞: {e}")
        results.append(("Bot Simulation", False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 70)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 70)
    
    all_passed = True
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name}: {status}")
        all_passed = all_passed and result
    
    print("=" * 70)
    if all_passed:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        print("\nüöÄ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è APILayer —Å Telegram –±–æ—Ç–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print("\nüìã –ß—Ç–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ:")
        print("‚úÖ API health check")
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä")
        print("‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ —á–µ—Ä–µ–∑ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π API")
        print("‚úÖ –†–∞—Å—á–µ—Ç—ã —Å –Ω–∞—Ü–µ–Ω–∫–æ–π")
        print("‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π")
        print("‚úÖ –ü–æ–ª–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π —Ä–∞–±–æ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        print("\nüéØ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É!")
    else:
        print("‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏")
    
    return all_passed

if __name__ == "__main__":
    try:
        success = asyncio.run(main())
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)