#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ fallback –º–µ—Ö–∞–Ω–∏–∑–º
"""

import asyncio
import sys
import os
from decimal import Decimal

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from services.api_service import api_service
from handlers.currency_pairs import get_currency_pair_info
from handlers.calculation_logic import calculate_margin_rate
from utils.logger import get_api_logger

logger = get_api_logger()

# –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–∞—Ä—ã –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞
PROBLEMATIC_PAIRS = [
    'rubthb', 'thbrub',
    'rubaed', 'aedrub', 
    'rubidr', 'idrrub',
    'rubeur', 'eurrub',
    'rubusd', 'usdrub'
]

async def test_complete_flow():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø–æ—Ç–æ–∫ —Ä–∞–±–æ—Ç—ã —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏...")
    
    results = {}
    
    async with api_service:
        for pair_callback in PROBLEMATIC_PAIRS:
            try:
                print(f"\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {pair_callback}")
                
                # –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä–µ (–∫–∞–∫ –≤ –±–æ—Ç–µ)
                pair_info = get_currency_pair_info(pair_callback)
                if not pair_info:
                    print(f"‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    results[pair_callback] = {'status': 'error', 'error': 'pair_info_not_found'}
                    continue
                
                print(f"   üìã –ü–∞—Ä–∞: {pair_info['name']} ({pair_info['base']}/{pair_info['quote']})")
                
                # –®–∞–≥ 2: –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è API (–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï)
                pair_format = f"{pair_info['base']}/{pair_info['quote']}"
                
                # –®–∞–≥ 3: –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å —á–µ—Ä–µ–∑ API
                exchange_rate = await api_service.get_exchange_rate(pair_format)
                
                if not exchange_rate:
                    print(f"‚ùå –ö—É—Ä—Å –Ω–µ –ø–æ–ª—É—á–µ–Ω")
                    results[pair_callback] = {'status': 'error', 'error': 'no_exchange_rate'}
                    continue
                
                print(f"   üí± –ö—É—Ä—Å: {exchange_rate.rate:.6f} (–∏—Å—Ç–æ—á–Ω–∏–∫: {exchange_rate.source})")
                
                # –®–∞–≥ 4: –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç —Å –Ω–∞—Ü–µ–Ω–∫–æ–π
                test_amount = Decimal('100')
                test_margin = Decimal('5')
                
                result = calculate_margin_rate(
                    pair_info=pair_info,
                    amount=test_amount,
                    margin=test_margin,
                    exchange_rate_data=exchange_rate.to_dict()
                )
                
                print(f"   üìà –ë–∞–∑–æ–≤—ã–π –∫—É—Ä—Å: {result.base_rate:.6f}")
                print(f"   üìä –ö—É—Ä—Å —Å –Ω–∞—Ü–µ–Ω–∫–æ–π 5%: {result.final_rate:.6f}")
                print(f"   üí∞ 100 {pair_info['base']} = {result.amount_final_rate:.2f} {pair_info['quote']}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫—É—Ä—Å —Ä–∞–∑—É–º–Ω—ã–π
                if result.final_rate > 0 and result.amount_final_rate > 0:
                    print(f"   ‚úÖ –†–∞—Å—á–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
                    results[pair_callback] = {
                        'status': 'success',
                        'pair_format': pair_format,
                        'rate': float(exchange_rate.rate),
                        'source': exchange_rate.source,
                        'final_rate': float(result.final_rate),
                        'calculation_result': float(result.amount_final_rate)
                    }
                else:
                    print(f"   ‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–∞—Å—á–µ—Ç")
                    results[pair_callback] = {'status': 'error', 'error': 'invalid_calculation'}
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                results[pair_callback] = {'status': 'error', 'error': str(e)}
    
    return results

async def test_fallback_mechanism():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º fallback –º–µ—Ö–∞–Ω–∏–∑–º –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å API"""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ fallback –º–µ—Ö–∞–Ω–∏–∑–º–∞...")
    
    # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º API –∫–ª—é—á –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è fallback
    original_api_key = None
    try:
        from config import config
        original_api_key = config.API_LAYER_KEY
        config.API_LAYER_KEY = ''  # –û—Ç–∫–ª—é—á–∞–µ–º API –∫–ª—é—á
        
        async with api_service:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–∞—Ç–Ω—É—é –ø–∞—Ä—É
            test_pair = 'RUB/USD'
            print(f"üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ fallback –¥–ª—è {test_pair}")
            
            exchange_rate = await api_service.get_exchange_rate(test_pair)
            
            if exchange_rate:
                print(f"‚úÖ Fallback —Ä–∞–±–æ—Ç–∞–µ—Ç: {exchange_rate.rate:.6f} (–∏—Å—Ç–æ—á–Ω–∏–∫: {exchange_rate.source})")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å—Ç–æ—á–Ω–∏–∫ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ fallback
                if 'fallback' in exchange_rate.source or 'apilayer_fallback' in exchange_rate.source:
                    print("   ‚úÖ –ò—Å—Ç–æ—á–Ω–∏–∫ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ fallback")
                else:
                    print("   ‚ö†Ô∏è –ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ fallback")
                
                return True
            else:
                print("‚ùå Fallback –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                return False
                
    finally:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º API –∫–ª—é—á
        if original_api_key:
            config.API_LAYER_KEY = original_api_key

async def generate_summary_report(results):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç"""
    print("\n" + "="*60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô")
    print("="*60)
    
    successful = sum(1 for r in results.values() if r['status'] == 'success')
    total = len(results)
    
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {successful}/{total} –ø–∞—Ä")
    print(f"‚ùå –û—à–∏–±–æ–∫: {total - successful}/{total} –ø–∞—Ä")
    
    if successful > 0:
        print(f"\nüìà –£—Å–ø–µ—à–Ω—ã–µ –ø–∞—Ä—ã:")
        for pair_callback, result in results.items():
            if result['status'] == 'success':
                print(f"   {pair_callback}: {result['pair_format']} -> {result['rate']:.6f} ({result['source']})")
    
    if total - successful > 0:
        print(f"\n‚ùå –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–∞—Ä—ã:")
        for pair_callback, result in results.items():
            if result['status'] == 'error':
                print(f"   {pair_callback}: {result['error']}")
    
    # –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö
    sources = {}
    for result in results.values():
        if result['status'] == 'success':
            source = result['source']
            sources[source] = sources.get(source, 0) + 1
    
    if sources:
        print(f"\nüìä –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö:")
        for source, count in sources.items():
            print(f"   {source}: {count} –ø–∞—Ä")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    if successful == total:
        print("   ‚úÖ –í—Å–µ –ø–∞—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print("   ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
    else:
        print("   ‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–∞—Ä—ã —Ç—Ä–µ–±—É—é—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è")
        
    fallback_count = sum(1 for r in results.values() 
                        if r['status'] == 'success' and 'fallback' in r['source'])
    
    if fallback_count > 0:
        print(f"   üìã {fallback_count} –ø–∞—Ä –∏—Å–ø–æ–ª—å–∑—É—é—Ç fallback –¥–∞–Ω–Ω—ã–µ")
        print("   üí° –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è API –∫–ª—é—á–µ–π")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä...\n")
    
    try:
        # –¢–µ—Å—Ç 1: –ü–æ–ª–Ω—ã–π –ø–æ—Ç–æ–∫ —Ä–∞–±–æ—Ç—ã
        results = await test_complete_flow()
        
        # –¢–µ—Å—Ç 2: Fallback –º–µ—Ö–∞–Ω–∏–∑–º
        fallback_works = await test_fallback_mechanism()
        
        # –¢–µ—Å—Ç 3: –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        await generate_summary_report(results)
        
        print(f"\nüîÑ Fallback –º–µ—Ö–∞–Ω–∏–∑–º: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if fallback_works else '‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'}")
        
        print("\nüéâ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        successful = sum(1 for r in results.values() if r['status'] == 'success')
        total = len(results)
        
        if successful == total and fallback_works:
            print("\nüéä –í–°–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
        elif successful > total * 0.8:
            print("\n‚úÖ –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            print("\n‚ö†Ô∏è –¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main())