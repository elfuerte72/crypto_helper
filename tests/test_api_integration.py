#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Rapira API
–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã API —Å–µ—Ä–≤–∏—Å–∞
"""

import asyncio
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
src_path = Path(__file__).parent.parent / 'src'
sys.path.insert(0, str(src_path))

from services.api_service import APIService, RapiraAPIError
from config import config
from utils.logger import get_api_logger

logger = get_api_logger()


async def test_health_check():
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è API"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º health check...")
    
    async with APIService() as api:
        try:
            health = await api.health_check()
            print(f"‚úÖ Health check: {health['status']}")
            print(f"   –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {health.get('response_time_ms', 'N/A')}ms")
            print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {health.get('message', 'N/A')}")
            print(f"   –î–æ—Å—Ç—É–ø–Ω–æ –∫—É—Ä—Å–æ–≤: {health.get('rates_available', 'N/A')}")
            return True
        except Exception as e:
            print(f"‚ùå Health check failed: {e}")
            return False


async def test_get_all_rates():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∫—É—Ä—Å–æ–≤"""
    print("\nüìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫—É—Ä—Å–æ–≤...")
    
    async with APIService() as api:
        try:
            rates = await api.get_all_rates()
            if rates:
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(rates)} –∫—É—Ä—Å–æ–≤")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –∫—É—Ä—Å–æ–≤
                for i, (symbol, rate) in enumerate(rates.items()):
                    if i >= 5:
                        break
                    print(f"   {symbol}: {rate.rate} (source: {rate.source})")
                
                if len(rates) > 5:
                    print(f"   ... –∏ –µ—â–µ {len(rates) - 5} –∫—É—Ä—Å–æ–≤")
                
                return True
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤: {e}")
            return False


async def test_specific_pairs():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä"""
    print("\nüí± –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä...")
    
    test_pairs = ['USDT/RUB', 'BTC/USDT', 'ETH/USDT', 'RUB/ZAR', 'USDT/THB']
    
    async with APIService() as api:
        results = []
        for pair in test_pairs:
            try:
                rate = await api.get_exchange_rate(pair)
                if rate:
                    print(f"‚úÖ {pair}: {rate.rate} (source: {rate.source})")
                    results.append(True)
                else:
                    print(f"‚ùå {pair}: –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    results.append(False)
            except RapiraAPIError as e:
                print(f"‚ùå {pair}: API –æ—à–∏–±–∫–∞ - {e}")
                results.append(False)
            except Exception as e:
                print(f"‚ùå {pair}: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ - {e}")
                results.append(False)
        
        success_count = sum(results)
        print(f"\nüìà –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ {success_count}/{len(test_pairs)} –∫—É—Ä—Å–æ–≤")
        return success_count > 0


async def test_multiple_rates():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫—É—Ä—Å–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ"""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤...")
    
    test_pairs = ['USDT/RUB', 'BTC/USDT', 'ETH/USDT']
    
    async with APIService() as api:
        try:
            rates = await api.get_multiple_rates(test_pairs)
            
            success_count = sum(1 for rate in rates.values() if rate is not None)
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {success_count}/{len(test_pairs)} –∫—É—Ä—Å–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ")
            
            for pair, rate in rates.items():
                if rate:
                    print(f"   {pair}: {rate.rate}")
                else:
                    print(f"   {pair}: –Ω–µ –ø–æ–ª—É—á–µ–Ω")
            
            return success_count > 0
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è: {e}")
            return False


async def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Rapira API")
    print(f"üîß –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: {config.DEBUG_MODE}")
    print(f"üåê API URL: {config.RAPIRA_API_URL}")
    print("=" * 60)
    
    tests = [
        ("Health Check", test_health_check),
        ("–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫—É—Ä—Å–æ–≤", test_get_all_rates),
        ("–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã", test_specific_pairs),
        ("–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ", test_multiple_rates),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = await test_func()
            results.append(result)
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results.append(False)
    
    print("\n" + "=" * 60)
    print("üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–û–í:")
    
    for i, (test_name, _) in enumerate(tests):
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if results[i] else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"   {test_name}: {status}")
    
    passed = sum(results)
    total = len(results)
    
    print(f"\nüéØ –ò—Ç–æ–≥–æ: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã!")
        return True
    elif passed > 0:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã, –Ω–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —á–∞—Å—Ç–∏—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return True
    else:
        print("üí• –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã - –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return False


if __name__ == "__main__":
    try:
        success = asyncio.run(run_all_tests())
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –¢–µ—Å—Ç—ã –ø—Ä–µ—Ä–≤–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)