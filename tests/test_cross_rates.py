#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∫—Ä–æ—Å—Å-–∫—É—Ä—Å–æ–≤
"""

import asyncio
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
src_path = Path(__file__).parent.parent / 'src'
sys.path.insert(0, str(src_path))

from services.api_service import APIService, RapiraAPIError
from config import config
from utils.logger import get_api_logger

logger = get_api_logger()


async def test_cross_rates():
    """–¢–µ—Å—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∫—Ä–æ—Å—Å-–∫—É—Ä—Å–æ–≤"""
    print("üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫—Ä–æ—Å—Å-–∫—É—Ä—Å–æ–≤...")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤ debug —Ä–µ–∂–∏–º–µ, –≥–¥–µ –µ—Å—Ç—å mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫—Ä–æ—Å—Å-–∫—É—Ä—Å–æ–≤
    original_debug = config.DEBUG_MODE
    config.DEBUG_MODE = True
    
    try:
        async with APIService() as api:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫—É—Ä—Å—ã
            print("üìä –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∫—É—Ä—Å—ã...")
            all_rates = await api.get_all_rates()
            
            if not all_rates:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–∑–æ–≤—ã–µ –∫—É—Ä—Å—ã")
                return False
            
            print(f"   –ü–æ–ª—É—á–µ–Ω–æ {len(all_rates)} –±–∞–∑–æ–≤—ã—Ö –∫—É—Ä—Å–æ–≤")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∫—É—Ä—Å—ã
            base_pairs = ['USDT/RUB', 'USDT/THB', 'USDT/AED', 'USDT/ZAR', 'USDT/IDR']
            print("\nüí∞ –ë–∞–∑–æ–≤—ã–µ –∫—É—Ä—Å—ã:")
            for pair in base_pairs:
                if pair in all_rates:
                    rate = all_rates[pair]
                    print(f"   {pair}: {rate.rate}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫—Ä–æ—Å—Å-–∫—É—Ä—Å—ã
            print("\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫—Ä–æ—Å—Å-–∫—É—Ä—Å—ã —á–µ—Ä–µ–∑ USDT:")
            cross_pairs = ['RUB/ZAR', 'RUB/THB', 'RUB/AED', 'THB/ZAR']
            
            results = []
            for pair in cross_pairs:
                try:
                    rate = await api.get_exchange_rate(pair)
                    if rate:
                        print(f"   ‚úÖ {pair}: {rate.rate} (source: {rate.source})")
                        results.append(True)
                    else:
                        print(f"   ‚ùå {pair}: –Ω–µ –Ω–∞–π–¥–µ–Ω")
                        results.append(False)
                except Exception as e:
                    print(f"   ‚ùå {pair}: –æ—à–∏–±–∫–∞ - {e}")
                    results.append(False)
            
            success_count = sum(results)
            print(f"\nüìà –£—Å–ø–µ—à–Ω–æ –≤—ã—á–∏—Å–ª–µ–Ω–æ {success_count}/{len(cross_pairs)} –∫—Ä–æ—Å—Å-–∫—É—Ä—Å–æ–≤")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
            if 'USDT/RUB' in all_rates and 'USDT/THB' in all_rates:
                usdt_rub = all_rates['USDT/RUB'].rate
                usdt_thb = all_rates['USDT/THB'].rate
                expected_rub_thb = usdt_thb / usdt_rub
                
                print(f"\nüßÆ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π:")
                print(f"   USDT/RUB: {usdt_rub}")
                print(f"   USDT/THB: {usdt_thb}")
                print(f"   –û–∂–∏–¥–∞–µ–º—ã–π RUB/THB: {expected_rub_thb:.6f}")
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–π –∫—É—Ä—Å
                try:
                    rub_thb = await api.get_exchange_rate('RUB/THB')
                    if rub_thb:
                        print(f"   –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π RUB/THB: {rub_thb.rate:.6f}")
                        diff = abs(rub_thb.rate - expected_rub_thb) / expected_rub_thb * 100
                        print(f"   –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ: {diff:.2f}%")
                        
                        if diff < 5:  # –î–æ–ø—É—Å–∫–∞–µ–º 5% —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –∏–∑-–∑–∞ —Å–ø—Ä–µ–¥–æ–≤
                            print("   ‚úÖ –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                        else:
                            print("   ‚ö†Ô∏è  –ë–æ–ª—å—à–æ–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è—Ö")
                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
            
            return success_count > 0
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—Ä–æ—Å—Å-–∫—É—Ä—Å–æ–≤: {e}")
        return False
    finally:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º debug —Ä–µ–∂–∏–º
        config.DEBUG_MODE = original_debug


async def test_real_cross_calculation():
    """–¢–µ—Å—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∫—Ä–æ—Å—Å-–∫—É—Ä—Å–æ–≤ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüåê –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫—Ä–æ—Å—Å-–∫—É—Ä—Å—ã –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π API
    original_debug = config.DEBUG_MODE
    config.DEBUG_MODE = False
    
    try:
        async with APIService() as api:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã
            all_rates = await api.get_all_rates()
            
            if not all_rates:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–∞–∑–æ–≤—ã—Ö –∫—É—Ä—Å–æ–≤
            if 'USDT/RUB' not in all_rates:
                print("‚ùå –ë–∞–∑–æ–≤—ã–π –∫—É—Ä—Å USDT/RUB –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return False
            
            usdt_rub = all_rates['USDT/RUB'].rate
            print(f"   –ë–∞–∑–æ–≤—ã–π –∫—É—Ä—Å USDT/RUB: {usdt_rub}")
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –∫—É—Ä—Å—ã –¥—Ä—É–≥–∏—Ö –≤–∞–ª—é—Ç (–≤ —Ä–µ–∞–ª—å–Ω–æ–º API –∏—Ö –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å)
            # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ª–æ–≥–∏–∫–∏
            mock_rates = {
                'USDT/THB': 35.5,
                'USDT/AED': 3.67,
                'USDT/ZAR': 18.5
            }
            
            print(f"\\nüßÆ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∫—Ä–æ—Å—Å-–∫—É—Ä—Å–æ–≤:")
            for usdt_pair, mock_rate in mock_rates.items():
                target_currency = usdt_pair.split('/')[1]
                cross_pair = f'RUB/{target_currency}'
                
                # –í—ã—á–∏—Å–ª—è–µ–º –∫—Ä–æ—Å—Å-–∫—É—Ä—Å: RUB/XXX = USDT/XXX / USDT/RUB
                cross_rate = mock_rate / usdt_rub
                
                print(f"   {cross_pair}: {cross_rate:.6f} (—á–µ—Ä–µ–∑ USDT)")
                print(f"     –õ–æ–≥–∏–∫–∞: {usdt_pair}({mock_rate}) / USDT/RUB({usdt_rub}) = {cross_rate:.6f}")
            
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –∫—Ä–æ—Å—Å-–∫—É—Ä—Å–æ–≤: {e}")
        return False
    finally:
        config.DEBUG_MODE = original_debug


if __name__ == "__main__":
    try:
        print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∫—Ä–æ—Å—Å-–∫—É—Ä—Å–æ–≤")
        print("=" * 60)
        
        # –¢–µ—Å—Ç 1: –ö—Ä–æ—Å—Å-–∫—É—Ä—Å—ã —Å mock –¥–∞–Ω–Ω—ã–º–∏
        success1 = asyncio.run(test_cross_rates())
        
        # –¢–µ—Å—Ç 2: –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        success2 = asyncio.run(test_real_cross_calculation())
        
        print("\\n" + "=" * 60)
        print("üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        print(f"   Mock –∫—Ä–æ—Å—Å-–∫—É—Ä—Å—ã: {'‚úÖ –†–ê–ë–û–¢–ê–Æ–¢' if success1 else '‚ùå –ù–ï –†–ê–ë–û–¢–ê–Æ–¢'}")
        print(f"   –õ–æ–≥–∏–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π: {'‚úÖ –ö–û–†–†–ï–ö–¢–ù–ê' if success2 else '‚ùå –û–®–ò–ë–ö–ò'}")
        
        if success1 and success2:
            print("\\nüéâ –°–∏—Å—Ç–µ–º–∞ –∫—Ä–æ—Å—Å-–∫—É—Ä—Å–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            sys.exit(0)
        else:
            print("\\n‚ö†Ô∏è  –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–∏—Å—Ç–µ–º–æ–π –∫—Ä–æ—Å—Å-–∫—É—Ä—Å–æ–≤")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\\n‚èπÔ∏è  –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)