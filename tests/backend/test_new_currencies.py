#!/usr/bin/env python3
"""
Unit —Ç–µ—Å—Ç—ã –¥–ª—è –Ω–æ–≤—ã—Ö –≤–∞–ª—é—Ç: THB, AED, ZAR, IDR
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤–∞–ª—é—Ç –¥–ª—è RUB
"""

import pytest
from decimal import Decimal
from unittest.mock import Mock, AsyncMock, patch

# –ò–º–ø–æ—Ä—Ç—ã —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã—Ö –º–æ–¥—É–ª–µ–π
import sys
import os
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', '..', 'src'))

from handlers.fsm_states import (
    Currency, get_available_targets, is_valid_pair
)
from handlers.keyboards import create_target_currency_keyboard
from handlers.formatters import MessageFormatter


class TestNewCurrencies:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –≤–∞–ª—é—Ç THB, AED, ZAR, IDR"""
    
    def test_new_currency_enums(self):
        """–¢–µ—Å—Ç enum –Ω–æ–≤—ã—Ö –≤–∞–ª—é—Ç"""
        assert Currency.THB == "THB"
        assert Currency.AED == "AED" 
        assert Currency.ZAR == "ZAR"
        assert Currency.IDR == "IDR"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–Ω–∏ –Ω–∞—Å–ª–µ–¥—É—é—Ç—Å—è –æ—Ç str
        assert isinstance(Currency.THB, str)
        assert isinstance(Currency.AED, str)
        assert isinstance(Currency.ZAR, str)
        assert isinstance(Currency.IDR, str)
    
    def test_new_currencies_in_rub_targets(self):
        """–¢–µ—Å—Ç –≤–∫–ª—é—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –≤–∞–ª—é—Ç –≤ TARGETS_FOR_RUB"""
        rub_targets = get_available_targets(Currency.RUB)
        
        # –°—Ç–∞—Ä—ã–µ –≤–∞–ª—é—Ç—ã
        assert Currency.USDT in rub_targets
        assert Currency.USD in rub_targets
        assert Currency.EUR in rub_targets
        
        # –ù–æ–≤—ã–µ –≤–∞–ª—é—Ç—ã
        assert Currency.THB in rub_targets
        assert Currency.AED in rub_targets
        assert Currency.ZAR in rub_targets
        assert Currency.IDR in rub_targets
        
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        assert len(rub_targets) == 7
    
    def test_new_currency_pairs_validation(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä —Å –Ω–æ–≤—ã–º–∏ –≤–∞–ª—é—Ç–∞–º–∏"""
        # RUB ‚Üí –Ω–æ–≤—ã–µ –≤–∞–ª—é—Ç—ã (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω–æ)
        assert is_valid_pair(Currency.RUB, Currency.THB) == True
        assert is_valid_pair(Currency.RUB, Currency.AED) == True
        assert is_valid_pair(Currency.RUB, Currency.ZAR) == True
        assert is_valid_pair(Currency.RUB, Currency.IDR) == True
        
        # –ù–æ–≤—ã–µ –≤–∞–ª—é—Ç—ã ‚Üí RUB (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –Ω–æ–≤—ã–µ –≤–∞–ª—é—Ç—ã –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–º–∏)
        assert is_valid_pair(Currency.THB, Currency.RUB) == False
        assert is_valid_pair(Currency.AED, Currency.RUB) == False
        assert is_valid_pair(Currency.ZAR, Currency.RUB) == False
        assert is_valid_pair(Currency.IDR, Currency.RUB) == False
        
        # –ù–æ–≤—ã–µ –≤–∞–ª—é—Ç—ã –º–µ–∂–¥—É —Å–æ–±–æ–π (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω–æ)
        assert is_valid_pair(Currency.THB, Currency.AED) == False
        assert is_valid_pair(Currency.AED, Currency.ZAR) == False
        assert is_valid_pair(Currency.ZAR, Currency.IDR) == False
        
        # –ù–æ–≤—ã–µ –≤–∞–ª—é—Ç—ã ‚Üí —Å—Ç–∞—Ä—ã–µ —Ñ–∏–∞—Ç–Ω—ã–µ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω–æ)
        assert is_valid_pair(Currency.THB, Currency.USD) == False
        assert is_valid_pair(Currency.AED, Currency.EUR) == False
        assert is_valid_pair(Currency.ZAR, Currency.USDT) == False
    
    def test_new_currencies_keyboard_display(self):
        """–¢–µ—Å—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –≤–∞–ª—é—Ç –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ"""
        keyboard = create_target_currency_keyboard(Currency.RUB)
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫
        buttons_text = []
        for row in keyboard.inline_keyboard:
            for button in row:
                buttons_text.append(button.text)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –≤–∞–ª—é—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —ç–º–æ–¥–∑–∏ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
        assert any("üáπüá≠ THB" in text and "–¢–∞–π—Å–∫–∏–π –±–∞—Ç" in text for text in buttons_text)
        assert any("üá¶üá™ AED" in text and "–î–∏—Ä—Ö–∞–º –û–ê–≠" in text for text in buttons_text)
        assert any("üáøüá¶ ZAR" in text and "–†—ç–Ω–¥ –Æ–ê–†" in text for text in buttons_text)
        assert any("üáÆüá© IDR" in text and "–†—É–ø–∏—è" in text for text in buttons_text)
    
    def test_new_currencies_callback_data(self):
        """–¢–µ—Å—Ç callback –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–æ–≤—ã—Ö –≤–∞–ª—é—Ç"""
        keyboard = create_target_currency_keyboard(Currency.RUB)
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ callback_data
        callbacks = []
        for row in keyboard.inline_keyboard:
            for button in row:
                if button.callback_data and button.callback_data.startswith('target_'):
                    callbacks.append(button.callback_data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ callback –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–æ–≤—ã—Ö –≤–∞–ª—é—Ç
        assert "target_THB" in callbacks
        assert "target_AED" in callbacks
        assert "target_ZAR" in callbacks
        assert "target_IDR" in callbacks


class TestNewCurrencyFormatting:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –Ω–æ–≤—ã–º–∏ –≤–∞–ª—é—Ç–∞–º–∏"""
    
    def test_source_selected_message_formatting(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –∏—Å—Ö–æ–¥–Ω–æ–π –≤–∞–ª—é—Ç—ã RUB"""
        message = MessageFormatter.format_source_selected_message(Currency.RUB)
        
        # –î–æ–ª–∂–Ω–æ —É–ø–æ–º–∏–Ω–∞—Ç—å, —á—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–æ –±–æ–ª—å—à–µ –≤–∞–ª—é—Ç
        assert "RUB" in message or "—Ä—É–±–ª–∏" in message
        assert "–ø–æ–ª—É—á–∞–µ—Ç" in message
    
    def test_target_selected_message_with_new_currencies(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–æ–≤—ã–º–∏ –≤–∞–ª—é—Ç–∞–º–∏"""
        # THB
        message_thb = MessageFormatter.format_target_selected_message(
            Currency.RUB, Currency.THB, Decimal("2.50")
        )
        assert "RUB ‚Üí THB" in message_thb
        assert "1 THB = 2,50 RUB" in message_thb  # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –∫—É—Ä—Å–∞
        
        # AED  
        message_aed = MessageFormatter.format_target_selected_message(
            Currency.RUB, Currency.AED, Decimal("27.20")
        )
        assert "RUB ‚Üí AED" in message_aed
        assert "1 AED = 27,20 RUB" in message_aed  # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –∫—É—Ä—Å–∞
        
        # ZAR
        message_zar = MessageFormatter.format_target_selected_message(
            Currency.RUB, Currency.ZAR, Decimal("5.41")
        )
        assert "RUB ‚Üí ZAR" in message_zar
        assert "1 ZAR = 5,41 RUB" in message_zar  # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –∫—É—Ä—Å–∞
        
        # IDR
        message_idr = MessageFormatter.format_target_selected_message(
            Currency.RUB, Currency.IDR, Decimal("156.50")
        )
        assert "RUB ‚Üí IDR" in message_idr
        assert "1 IDR = 156,50 RUB" in message_idr  # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –∫—É—Ä—Å–∞
    
    def test_final_result_with_new_currencies(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å –Ω–æ–≤—ã–º–∏ –≤–∞–ª—é—Ç–∞–º–∏"""
        # RUB ‚Üí THB
        message_thb = MessageFormatter.format_final_result(
            Currency.RUB, Currency.THB,
            Decimal("10000"), Decimal("2"), Decimal("2.55"), Decimal("3921.57")
        )
        assert "RUB ‚Üí THB" in message_thb
        assert "10 000 RUB" in message_thb
        assert "3 921.57 THB" in message_thb
        
        # RUB ‚Üí AED
        message_aed = MessageFormatter.format_final_result(
            Currency.RUB, Currency.AED,
            Decimal("5000"), Decimal("1.5"), Decimal("27.61"), Decimal("181.09")
        )
        assert "RUB ‚Üí AED" in message_aed
        assert "5 000 RUB" in message_aed
        assert "181.09 AED" in message_aed
        
        # RUB ‚Üí ZAR
        message_zar = MessageFormatter.format_final_result(
            Currency.RUB, Currency.ZAR,
            Decimal("15000"), Decimal("3"), Decimal("5.57"), Decimal("2693.36")
        )
        assert "RUB ‚Üí ZAR" in message_zar
        assert "15 000 RUB" in message_zar
        assert "2 693.36 ZAR" in message_zar
        
        # RUB ‚Üí IDR
        message_idr = MessageFormatter.format_final_result(
            Currency.RUB, Currency.IDR,
            Decimal("8000"), Decimal("2.5"), Decimal("160.41"), Decimal("49.87")
        )
        assert "RUB ‚Üí IDR" in message_idr
        assert "8 000 RUB" in message_idr
        assert "49.87 IDR" in message_idr


class TestNewCurrencyAPIIntegration:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å API –¥–ª—è –Ω–æ–≤—ã—Ö –≤–∞–ª—é—Ç"""
    
    @pytest.mark.asyncio
    async def test_api_rate_methods_exist(self):
        """–¢–µ—Å—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –º–µ—Ç–æ–¥–æ–≤ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –¥–ª—è –Ω–æ–≤—ã—Ö –≤–∞–ª—é—Ç"""
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º ExchangeCalculator
        from handlers.admin_flow import ExchangeCalculator
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        assert hasattr(ExchangeCalculator, 'get_thb_rub_rate')
        assert hasattr(ExchangeCalculator, 'get_aed_rub_rate')
        assert hasattr(ExchangeCalculator, 'get_zar_rub_rate')
        assert hasattr(ExchangeCalculator, 'get_idr_rub_rate')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ async –º–µ—Ç–æ–¥—ã
        import asyncio
        assert asyncio.iscoroutinefunction(ExchangeCalculator.get_thb_rub_rate)
        assert asyncio.iscoroutinefunction(ExchangeCalculator.get_aed_rub_rate)
        assert asyncio.iscoroutinefunction(ExchangeCalculator.get_zar_rub_rate)
        assert asyncio.iscoroutinefunction(ExchangeCalculator.get_idr_rub_rate)
    
    @pytest.mark.asyncio 
    @patch('handlers.admin_flow.fiat_rates_service')
    async def test_get_base_rate_for_new_currency_pairs(self, mock_fiat_service):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–∑–æ–≤—ã—Ö –∫—É—Ä—Å–æ–≤ –¥–ª—è –Ω–æ–≤—ã—Ö –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä"""
        from handlers.admin_flow import ExchangeCalculator
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º mock –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–∞–ª—é—Ç
        mock_rate = Mock()
        mock_rate.rate = 2.50
        mock_rate.source = "apilayer"
        mock_fiat_service.get_fiat_exchange_rate = AsyncMock(return_value=mock_rate)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –¥–ª—è –Ω–æ–≤—ã—Ö –≤–∞–ª—é—Ç
        
        # THB/RUB
        mock_fiat_service.get_fiat_exchange_rate.return_value.rate = 2.50
        rate_thb = await ExchangeCalculator.get_base_rate_for_pair(Currency.RUB, Currency.THB)
        assert rate_thb == Decimal("2.50")
        mock_fiat_service.get_fiat_exchange_rate.assert_called_with('THB/RUB')
        
        # AED/RUB
        mock_fiat_service.get_fiat_exchange_rate.return_value.rate = 27.20
        rate_aed = await ExchangeCalculator.get_base_rate_for_pair(Currency.RUB, Currency.AED)
        assert rate_aed == Decimal("27.20")
        mock_fiat_service.get_fiat_exchange_rate.assert_called_with('AED/RUB')
        
        # ZAR/RUB
        mock_fiat_service.get_fiat_exchange_rate.return_value.rate = 5.41
        rate_zar = await ExchangeCalculator.get_base_rate_for_pair(Currency.RUB, Currency.ZAR)
        assert rate_zar == Decimal("5.41")
        mock_fiat_service.get_fiat_exchange_rate.assert_called_with('ZAR/RUB')
        
        # IDR/RUB
        mock_fiat_service.get_fiat_exchange_rate.return_value.rate = 156.50
        rate_idr = await ExchangeCalculator.get_base_rate_for_pair(Currency.RUB, Currency.IDR)
        assert rate_idr == Decimal("156.50")
        mock_fiat_service.get_fiat_exchange_rate.assert_called_with('IDR/RUB')


class TestNewCurrencyCalculations:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–æ–≤ —Å –Ω–æ–≤—ã–º–∏ –≤–∞–ª—é—Ç–∞–º–∏"""
    
    def test_margin_calculation_with_new_currencies(self):
        """–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞—Ü–µ–Ω–∫–∏ —Å –Ω–æ–≤—ã–º–∏ –≤–∞–ª—é—Ç–∞–º–∏"""
        from handlers.admin_flow import ExchangeCalculator
        
        # RUB ‚Üí THB —Å –Ω–∞—Ü–µ–Ω–∫–æ–π 2%
        base_rate = Decimal("2.50")
        margin = Decimal("2")
        final_rate = ExchangeCalculator.calculate_final_rate(
            Currency.RUB, Currency.THB, base_rate, margin
        )
        expected = base_rate * Decimal("1.02")  # 2.50 * 1.02 = 2.55
        assert final_rate == expected.quantize(Decimal('0.01'))
        
        # RUB ‚Üí AED —Å –Ω–∞—Ü–µ–Ω–∫–æ–π 1.5%
        base_rate = Decimal("27.20")
        margin = Decimal("1.5")
        final_rate = ExchangeCalculator.calculate_final_rate(
            Currency.RUB, Currency.AED, base_rate, margin
        )
        expected = base_rate * Decimal("1.015")  # 27.20 * 1.015 = 27.608
        assert final_rate == expected.quantize(Decimal('0.01'))
    
    def test_result_calculation_with_new_currencies(self):
        """–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å –Ω–æ–≤—ã–º–∏ –≤–∞–ª—é—Ç–∞–º–∏"""
        from handlers.admin_flow import ExchangeCalculator
        
        # 10,000 RUB ‚Üí THB –ø–æ –∫—É—Ä—Å—É 2.55
        amount = Decimal("10000")
        final_rate = Decimal("2.55")
        result = ExchangeCalculator.calculate_result(
            Currency.RUB, Currency.THB, amount, final_rate
        )
        expected = amount / final_rate  # 10000 / 2.55 ‚âà 3921.57
        assert result == expected.quantize(Decimal('0.01'))
        
        # 5,000 RUB ‚Üí AED –ø–æ –∫—É—Ä—Å—É 27.61
        amount = Decimal("5000")
        final_rate = Decimal("27.61")
        result = ExchangeCalculator.calculate_result(
            Currency.RUB, Currency.AED, amount, final_rate
        )
        expected = amount / final_rate  # 5000 / 27.61 ‚âà 181.09
        assert result == expected.quantize(Decimal('0.01'))
        
        # 15,000 RUB ‚Üí ZAR –ø–æ –∫—É—Ä—Å—É 5.57
        amount = Decimal("15000")
        final_rate = Decimal("5.57")
        result = ExchangeCalculator.calculate_result(
            Currency.RUB, Currency.ZAR, amount, final_rate
        )
        expected = amount / final_rate  # 15000 / 5.57 ‚âà 2693.36
        assert result == expected.quantize(Decimal('0.01'))
        
        # 8,000 RUB ‚Üí IDR –ø–æ –∫—É—Ä—Å—É 160.41
        amount = Decimal("8000")
        final_rate = Decimal("160.41")
        result = ExchangeCalculator.calculate_result(
            Currency.RUB, Currency.IDR, amount, final_rate
        )
        expected = amount / final_rate  # 8000 / 160.41 ‚âà 49.87
        assert result == expected.quantize(Decimal('0.01'))


class TestNewCurrencyErrorHandling:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ —Å –Ω–æ–≤—ã–º–∏ –≤–∞–ª—é—Ç–∞–º–∏"""
    
    @pytest.mark.asyncio
    @patch('handlers.admin_flow.fiat_rates_service')
    async def test_api_error_handling_for_new_currencies(self, mock_fiat_service):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ API –¥–ª—è –Ω–æ–≤—ã—Ö –≤–∞–ª—é—Ç"""
        from handlers.admin_flow import ExchangeCalculator
        from services.models import APILayerError
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º mock –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –æ—à–∏–±–∫–∏
        mock_fiat_service.get_fiat_exchange_rate = AsyncMock(side_effect=Exception("Network error"))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—à–∏–±–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è
        with pytest.raises(APILayerError):
            await ExchangeCalculator.get_thb_rub_rate()
        
        with pytest.raises(APILayerError):
            await ExchangeCalculator.get_aed_rub_rate()
        
        with pytest.raises(APILayerError):
            await ExchangeCalculator.get_zar_rub_rate()
        
        with pytest.raises(APILayerError):
            await ExchangeCalculator.get_idr_rub_rate()
    
    @pytest.mark.asyncio
    @patch('handlers.admin_flow.fiat_rates_service')
    async def test_invalid_rate_handling_for_new_currencies(self, mock_fiat_service):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ –¥–ª—è –Ω–æ–≤—ã—Ö –≤–∞–ª—é—Ç"""
        from handlers.admin_flow import ExchangeCalculator
        from services.models import APILayerError
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º mock –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ –∫—É—Ä—Å–∞
        mock_rate = Mock()
        mock_rate.rate = 0  # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –∫—É—Ä—Å
        mock_fiat_service.get_fiat_exchange_rate = AsyncMock(return_value=mock_rate)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∫—É—Ä—Å—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è
        with pytest.raises(APILayerError):
            await ExchangeCalculator.get_thb_rub_rate()


if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    pytest.main([__file__, '-v'])