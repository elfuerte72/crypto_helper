#!/usr/bin/env python3
"""
Unit —Ç–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä –∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
"""

import pytest
from unittest.mock import AsyncMock, MagicMock, patch
from aiogram.types import CallbackQuery, Message, User, Chat
from aiogram.exceptions import TelegramBadRequest

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
import sys
import os
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', '..', 'src'))

from handlers.admin_handlers import (
    CURRENCY_PAIRS,
    get_currency_pair_info,
    is_valid_currency_pair,
    handle_currency_pair_selection,
    handle_cancel_selection,
    handle_header_callbacks
)


class TestCurrencyPairConstants:
    """–¢–µ—Å—Ç—ã –¥–ª—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä"""
    
    def test_currency_pairs_structure(self):
        """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ–Ω—Å—Ç–∞–Ω—Ç –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø–∞—Ä—ã –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        required_keys = {'name', 'base', 'quote', 'description', 'emoji'}
        
        for pair_id, pair_info in CURRENCY_PAIRS.items():
            assert isinstance(pair_info, dict), f"–ü–∞—Ä–∞ {pair_id} –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º"
            assert required_keys.issubset(pair_info.keys()), \
                f"–ü–∞—Ä–∞ {pair_id} –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª—é—á–∏"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
            assert isinstance(pair_info['name'], str), f"name –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –¥–ª—è {pair_id}"
            assert isinstance(pair_info['base'], str), f"base –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –¥–ª—è {pair_id}"
            assert isinstance(pair_info['quote'], str), f"quote –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –¥–ª—è {pair_id}"
            assert isinstance(pair_info['description'], str), f"description –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –¥–ª—è {pair_id}"
            assert isinstance(pair_info['emoji'], str), f"emoji –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –¥–ª—è {pair_id}"
    
    def test_currency_pairs_count(self):
        """–¢–µ—Å—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä"""
        # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 16 –ø–∞—Ä: 4 RUB, 4 USDT, 4 –æ–±—Ä–∞—Ç–Ω—ã—Ö RUB, 4 –æ–±—Ä–∞—Ç–Ω—ã—Ö USDT
        assert len(CURRENCY_PAIRS) == 16, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å 16 –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä"
    
    def test_currency_pairs_naming(self):
        """–¢–µ—Å—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä"""
        expected_pairs = {
            # RUB –ø–∞—Ä—ã
            'rub_zar', 'rub_thb', 'rub_aed', 'rub_idr',
            # USDT –ø–∞—Ä—ã
            'usdt_zar', 'usdt_thb', 'usdt_aed', 'usdt_idr',
            # –û–±—Ä–∞—Ç–Ω—ã–µ RUB –ø–∞—Ä—ã
            'zar_rub', 'thb_rub', 'aed_rub', 'idr_rub',
            # –û–±—Ä–∞—Ç–Ω—ã–µ USDT –ø–∞—Ä—ã
            'zar_usdt', 'thb_usdt', 'aed_usdt', 'idr_usdt'
        }
        
        actual_pairs = set(CURRENCY_PAIRS.keys())
        assert actual_pairs == expected_pairs, "–ù–∞–±–æ—Ä –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É"
    
    def test_currency_pair_names_format(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∞ –Ω–∞–∑–≤–∞–Ω–∏–π –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä"""
        for pair_id, pair_info in CURRENCY_PAIRS.items():
            name = pair_info['name']
            base = pair_info['base']
            quote = pair_info['quote']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏
            expected_name = f"{base}/{quote}"
            assert name == expected_name, f"–ò–º—è –ø–∞—Ä—ã {pair_id} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å {expected_name}, –ø–æ–ª—É—á–µ–Ω–æ {name}"


class TestCurrencyPairHelpers:
    """–¢–µ—Å—Ç—ã –¥–ª—è –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä"""
    
    def test_get_currency_pair_info_valid(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞–ª–∏–¥–Ω–æ–π –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä–µ"""
        pair_info = get_currency_pair_info('rub_zar')
        
        assert pair_info is not None, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ä–µ"
        assert pair_info['name'] == 'RUB/ZAR', "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –ø–∞—Ä—ã"
        assert pair_info['base'] == 'RUB', "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –±–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞"
        assert pair_info['quote'] == 'ZAR', "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ—Ç–∏—Ä—É–µ–º–∞—è –≤–∞–ª—é—Ç–∞"
    
    def test_get_currency_pair_info_invalid(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–π –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä–µ"""
        pair_info = get_currency_pair_info('invalid_pair')
        assert pair_info is None, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–æ–∑–≤—Ä–∞—â–µ–Ω None –¥–ª—è –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–π –ø–∞—Ä—ã"
    
    def test_get_currency_pair_info_empty(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å –ø—É—Å—Ç—ã–º –≤—Ö–æ–¥–æ–º"""
        pair_info = get_currency_pair_info('')
        assert pair_info is None, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–æ–∑–≤—Ä–∞—â–µ–Ω None –¥–ª—è –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏"
    
    def test_is_valid_currency_pair_valid(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –¥–ª—è –≤–∞–ª–∏–¥–Ω—ã—Ö –ø–∞—Ä"""
        valid_pairs = ['rub_zar', 'usdt_thb', 'zar_rub', 'aed_usdt']
        
        for pair in valid_pairs:
            assert is_valid_currency_pair(pair), f"–ü–∞—Ä–∞ {pair} –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω–æ–π"
    
    def test_is_valid_currency_pair_invalid(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –¥–ª—è –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –ø–∞—Ä"""
        invalid_pairs = ['invalid_pair', 'rub_usd', 'btc_eth', '']
        
        for pair in invalid_pairs:
            assert not is_valid_currency_pair(pair), f"–ü–∞—Ä–∞ {pair} –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω–æ–π"
    
    def test_all_pairs_are_valid(self):
        """–¢–µ—Å—Ç —á—Ç–æ –≤—Å–µ –ø–∞—Ä—ã –∏–∑ –∫–æ–Ω—Å—Ç–∞–Ω—Ç –ø—Ä–æ—Ö–æ–¥—è—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é"""
        for pair_id in CURRENCY_PAIRS.keys():
            assert is_valid_currency_pair(pair_id), f"–ü–∞—Ä–∞ {pair_id} –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω–æ–π"


class TestCurrencyPairCallbackHandlers:
    """–¢–µ—Å—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback queries –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä"""
    
    def setup_method(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        # –°–æ–∑–¥–∞–µ–º mock –æ–±—ä–µ–∫—Ç—ã
        self.user = User(
            id=123456789,
            is_bot=False,
            first_name="Test",
            username="testuser"
        )
        
        self.chat = Chat(
            id=-1001234567890,
            type="channel"
        )
        
        self.message = MagicMock(spec=Message)
        self.message.edit_text = AsyncMock()
        
        self.callback_query = MagicMock(spec=CallbackQuery)
        self.callback_query.from_user = self.user
        self.callback_query.message = self.message
        self.callback_query.answer = AsyncMock()
    
    @pytest.mark.asyncio
    async def test_handle_currency_pair_selection_valid_pair(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –≤–∞–ª–∏–¥–Ω–æ–π –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã"""
        self.callback_query.data = 'rub_zar'
        
        await handle_currency_pair_selection(self.callback_query)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ
        self.message.edit_text.assert_called_once()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        call_args = self.message.edit_text.call_args
        message_text = call_args[0][0]
        
        assert "RUB/ZAR" in message_text, "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä—ã"
        assert "üá∑üá∫‚û°Ô∏èüáøüá¶" in message_text, "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å emoji –ø–∞—Ä—ã"
        assert "–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å ‚Üí –Æ–∂–Ω–æ–∞—Ñ—Ä–∏–∫–∞–Ω—Å–∫–∏–π —Ä—ç–Ω–¥" in message_text, "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç
        self.callback_query.answer.assert_called_once()
        answer_call = self.callback_query.answer.call_args
        assert "RUB/ZAR" in answer_call[0][0], "–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä—ã"
    
    @pytest.mark.asyncio
    async def test_handle_currency_pair_selection_invalid_pair(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–π –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã"""
        self.callback_query.data = 'invalid_pair'
        
        await handle_currency_pair_selection(self.callback_query)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ
        self.message.edit_text.assert_not_called()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –æ–± –æ—à–∏–±–∫–µ
        self.callback_query.answer.assert_called_once()
        answer_call = self.callback_query.answer.call_args
        assert "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞" in answer_call[0][0], "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"
        assert answer_call[1]['show_alert'] is True, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–∫–∞–∑–∞–Ω alert"
    
    @pytest.mark.asyncio
    async def test_handle_currency_pair_selection_all_pairs(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä"""
        for pair_id in CURRENCY_PAIRS.keys():
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º mock –æ–±—ä–µ–∫—Ç—ã
            self.message.edit_text.reset_mock()
            self.callback_query.answer.reset_mock()
            
            self.callback_query.data = pair_id
            
            await handle_currency_pair_selection(self.callback_query)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ
            self.message.edit_text.assert_called_once(), f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø–∞—Ä—ã {pair_id}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç
            self.callback_query.answer.assert_called_once(), f"–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –¥–ª—è –ø–∞—Ä—ã {pair_id}"
    
    @pytest.mark.asyncio
    async def test_handle_currency_pair_selection_telegram_error(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ Telegram API"""
        self.callback_query.data = 'rub_zar'
        self.message.edit_text.side_effect = TelegramBadRequest(method="editMessageText", message="Test error")
        
        await handle_currency_pair_selection(self.callback_query)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –æ–± –æ—à–∏–±–∫–µ
        self.callback_query.answer.assert_called_once()
        answer_call = self.callback_query.answer.call_args
        assert "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞" in answer_call[0][0], "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"
        assert answer_call[1]['show_alert'] is True, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–∫–∞–∑–∞–Ω alert"
    
    @pytest.mark.asyncio
    async def test_handle_cancel_selection(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–º–µ–Ω—ã –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã"""
        await handle_cancel_selection(self.callback_query)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ
        self.message.edit_text.assert_called_once()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–µ
        call_args = self.message.edit_text.call_args
        message_text = call_args[0][0]
        
        assert "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞" in message_text, "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–º–µ–Ω–µ"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç
        self.callback_query.answer.assert_called_once()
        answer_call = self.callback_query.answer.call_args
        assert "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞" in answer_call[0][0], "–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–º–µ–Ω–µ"
    
    @pytest.mark.asyncio
    async def test_handle_header_callbacks(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback'–æ–≤ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤"""
        header_callbacks = ['header_rub', 'header_usdt', 'header_reverse_rub', 'header_reverse_usdt']
        
        for header_callback in header_callbacks:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º mock –æ–±—ä–µ–∫—Ç—ã
            self.callback_query.answer.reset_mock()
            
            self.callback_query.data = header_callback
            
            await handle_header_callbacks(self.callback_query)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç
            self.callback_query.answer.assert_called_once()
            answer_call = self.callback_query.answer.call_args
            assert "–≠—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫" in answer_call[0][0], f"–î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥–æ–ª–æ–≤–∫–µ –¥–ª—è {header_callback}"
            assert answer_call[1]['show_alert'] is False, "–ù–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–∫–∞–∑–∞–Ω alert –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤"


class TestCurrencyPairIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä"""
    
    def test_currency_pairs_consistency(self):
        """–¢–µ—Å—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã –µ—Å—Ç—å –æ–±—Ä–∞—Ç–Ω–∞—è –ø–∞—Ä–∞
        bases = set()
        quotes = set()
        
        for pair_info in CURRENCY_PAIRS.values():
            bases.add(pair_info['base'])
            quotes.add(pair_info['quote'])
        
        # –î–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–∞—Ä—ã –≤ –æ–±–æ–∏—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö
        expected_currencies = {'RUB', 'USDT', 'ZAR', 'THB', 'AED', 'IDR'}
        assert bases == expected_currencies, "–ë–∞–∑–æ–≤—ã–µ –≤–∞–ª—é—Ç—ã –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –æ–∂–∏–¥–∞–µ–º—ã–º"
        assert quotes == expected_currencies, "–ö–æ—Ç–∏—Ä—É–µ–º—ã–µ –≤–∞–ª—é—Ç—ã –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –æ–∂–∏–¥–∞–µ–º—ã–º"
    
    def test_currency_pairs_bidirectional(self):
        """–¢–µ—Å—Ç –¥–≤—É–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ—Å—Ç–∏ –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã –µ—Å—Ç—å –æ–±—Ä–∞—Ç–Ω–∞—è
        for pair_id, pair_info in CURRENCY_PAIRS.items():
            base = pair_info['base']
            quote = pair_info['quote']
            
            # –ò—â–µ–º –æ–±—Ä–∞—Ç–Ω—É—é –ø–∞—Ä—É
            reverse_pair_found = False
            for other_pair_id, other_pair_info in CURRENCY_PAIRS.items():
                if (other_pair_info['base'] == quote and 
                    other_pair_info['quote'] == base):
                    reverse_pair_found = True
                    break
            
            assert reverse_pair_found, f"–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –æ–±—Ä–∞—Ç–Ω–∞—è –ø–∞—Ä–∞ –¥–ª—è {pair_id} ({base}/{quote})"
    
    def test_currency_pairs_emoji_consistency(self):
        """–¢–µ—Å—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ emoji –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ emoji —Å–æ–¥–µ—Ä–∂–∞—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        for pair_id, pair_info in CURRENCY_PAIRS.items():
            emoji = pair_info['emoji']
            
            # –î–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—Ç—Ä–µ–ª–∫—É
            assert '‚û°Ô∏è' in emoji, f"Emoji –¥–ª—è {pair_id} –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—Ç—Ä–µ–ª–∫—É"
            
            # –î–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã –≤–∞–ª—é—Ç
            base = pair_info['base']
            quote = pair_info['quote']
            
            if base == 'RUB':
                assert 'üá∑üá∫' in emoji, f"Emoji –¥–ª—è {pair_id} –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ñ–ª–∞–≥ –†–æ—Å—Å–∏–∏"
            elif base == 'USDT':
                assert 'üí∞' in emoji, f"Emoji –¥–ª—è {pair_id} –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–∏–º–≤–æ–ª –¥–æ–ª–ª–∞—Ä–∞"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö –≤–∞–ª—é—Ç
            flag_mapping = {
                'ZAR': 'üáøüá¶',
                'THB': 'üáπüá≠',
                'AED': 'üá¶üá™',
                'IDR': 'üáÆüá©'
            }
            
            if quote in flag_mapping:
                expected_flag = flag_mapping[quote]
                assert expected_flag in emoji, f"Emoji –¥–ª—è {pair_id} –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ñ–ª–∞–≥ {expected_flag}"


if __name__ == '__main__':
    pytest.main([__file__, '-v'])