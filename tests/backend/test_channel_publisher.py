#!/usr/bin/env python3
"""
Unit —Ç–µ—Å—Ç—ã –¥–ª—è –º–æ–¥—É–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª
Crypto Helper Bot - Channel Publisher Tests
"""

import pytest
import asyncio
from decimal import Decimal
from unittest.mock import AsyncMock, MagicMock, patch
from datetime import datetime

import sys
import os
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', '..', 'src'))

from aiogram.types import Message
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError

from handlers.channel_publisher import ChannelPublisher, ChannelPublisherError


class TestChannelPublisher:
    """–¢–µ—Å—Ç—ã –¥–ª—è –∫–ª–∞—Å—Å–∞ ChannelPublisher"""
    
    @pytest.fixture
    def sample_pair_info(self):
        """–û–±—Ä–∞–∑–µ—Ü –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä–µ"""
        return {
            'name': 'RUB/ZAR',
            'base': 'RUB',
            'quote': 'ZAR',
            'emoji': 'üá∑üá∫üáøüá¶',
            'description': '–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å –∫ —é–∂–Ω–æ–∞—Ñ—Ä–∏–∫–∞–Ω—Å–∫–æ–º—É —Ä—ç–Ω–¥—É'
        }
    
    @pytest.fixture
    def sample_exchange_rate_data(self):
        """–û–±—Ä–∞–∑–µ—Ü –¥–∞–Ω–Ω—ã—Ö –æ –∫—É—Ä—Å–µ"""
        return {
            'timestamp': '2024-01-15T12:30:45.123456Z',
            'source': 'Rapira API',
            'rate': 0.2134
        }
    
    @pytest.fixture
    def sample_calculation_data(self, sample_pair_info, sample_exchange_rate_data):
        """–û–±—Ä–∞–∑–µ—Ü –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–∞"""
        return {
            'pair_info': sample_pair_info,
            'base_rate': Decimal('0.2134'),
            'margin': Decimal('5.0'),
            'final_rate': Decimal('0.22407'),
            'rate_change': Decimal('0.01067'),
            'exchange_rate_data': sample_exchange_rate_data,
            'manager_name': '–¢–µ—Å—Ç –ú–µ–Ω–µ–¥–∂–µ—Ä',
            'user_id': 123456789
        }
    
    def test_format_currency_value_crypto(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç"""
        # BTC
        value = Decimal('0.00012345')
        result = ChannelPublisher._format_currency_value(value, 'BTC')
        assert result == '0.00012345'
        
        # ETH
        value = Decimal('1.23456789')
        result = ChannelPublisher._format_currency_value(value, 'ETH')
        assert result == '1.23456789'
    
    def test_format_currency_value_stablecoins(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω–æ–≤"""
        # USDT
        value = Decimal('1.2345')
        result = ChannelPublisher._format_currency_value(value, 'USDT')
        assert result == '1.2345'
        
        # USDC
        value = Decimal('100.123456')
        result = ChannelPublisher._format_currency_value(value, 'USDC')
        assert result == '100.1235'
    
    def test_format_currency_value_fiat(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∏–∞—Ç–Ω—ã—Ö –≤–∞–ª—é—Ç"""
        # RUB
        value = Decimal('123.456789')
        result = ChannelPublisher._format_currency_value(value, 'RUB')
        assert result == '123.46'
        
        # ZAR
        value = Decimal('0.2134567')
        result = ChannelPublisher._format_currency_value(value, 'ZAR')
        assert result == '0.21'
        
        # USD
        value = Decimal('1.999')
        result = ChannelPublisher._format_currency_value(value, 'USD')
        assert result == '2.00'
    
    def test_format_currency_value_other(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥—Ä—É–≥–∏—Ö –≤–∞–ª—é—Ç"""
        # –ë–æ–ª—å—à–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        value = Decimal('1000.123456')
        result = ChannelPublisher._format_currency_value(value, 'UNKNOWN')
        assert result == '1000.1235'
        
        # –ú–∞–ª–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        value = Decimal('0.00012345')
        result = ChannelPublisher._format_currency_value(value, 'UNKNOWN')
        assert result == '0.00012345'
    
    def test_format_channel_message(self, sample_calculation_data):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞–Ω–∞–ª–∞"""
        message = ChannelPublisher.format_channel_message(
            pair_info=sample_calculation_data['pair_info'],
            base_rate=sample_calculation_data['base_rate'],
            margin=sample_calculation_data['margin'],
            final_rate=sample_calculation_data['final_rate'],
            rate_change=sample_calculation_data['rate_change'],
            exchange_rate_data=sample_calculation_data['exchange_rate_data'],
            manager_name=sample_calculation_data['manager_name']
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        assert 'RUB/ZAR' in message
        assert '0.22' in message  # –ò—Ç–æ–≥–æ–≤—ã–π –∫—É—Ä—Å
        assert '+5.0%' in message  # –ù–∞—Ü–µ–Ω–∫–∞
        assert '–¢–µ—Å—Ç –ú–µ–Ω–µ–¥–∂–µ—Ä' in message
        assert 'Rapira API' in message
        assert 'Crypto Helper Bot' in message
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ
        assert len(message) > 100
    
    def test_format_channel_message_negative_margin(self, sample_calculation_data):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π –Ω–∞—Ü–µ–Ω–∫–æ–π"""
        # –ò–∑–º–µ–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π –Ω–∞—Ü–µ–Ω–∫–∏
        sample_calculation_data['margin'] = Decimal('-2.5')
        sample_calculation_data['final_rate'] = Decimal('0.20797')
        sample_calculation_data['rate_change'] = Decimal('-0.00543')
        
        message = ChannelPublisher.format_channel_message(
            pair_info=sample_calculation_data['pair_info'],
            base_rate=sample_calculation_data['base_rate'],
            margin=sample_calculation_data['margin'],
            final_rate=sample_calculation_data['final_rate'],
            rate_change=sample_calculation_data['rate_change'],
            exchange_rate_data=sample_calculation_data['exchange_rate_data'],
            manager_name=sample_calculation_data['manager_name']
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é –Ω–∞—Ü–µ–Ω–∫—É
        assert '-2.5%' in message
    
    def test_format_private_message(self, sample_calculation_data):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –õ–°"""
        message = ChannelPublisher.format_private_message(
            pair_info=sample_calculation_data['pair_info'],
            base_rate=sample_calculation_data['base_rate'],
            margin=sample_calculation_data['margin'],
            final_rate=sample_calculation_data['final_rate'],
            rate_change=sample_calculation_data['rate_change'],
            exchange_rate_data=sample_calculation_data['exchange_rate_data'],
            manager_name=sample_calculation_data['manager_name']
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        assert '–†–ï–ñ–ò–ú –†–ê–ó–†–ê–ë–û–¢–ö–ò' in message
        assert 'RUB/ZAR' in message
        assert '–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞:' in message
        assert '–¢–µ—Å—Ç –ú–µ–Ω–µ–¥–∂–µ—Ä' in message
        assert '–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–Ω–∞–ª–∞:' in message
        assert '–í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª' in message
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–Ω–∞–ª–∞
        assert '<code>' in message and '</code>' in message
    
    @pytest.mark.asyncio
    async def test_publish_to_channel_success(self):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª"""
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –±–æ—Ç–∞
        mock_bot = AsyncMock()
        mock_message = MagicMock(spec=Message)
        mock_bot.send_message.return_value = mock_message
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é
        result = await ChannelPublisher.publish_to_channel(
            bot=mock_bot,
            channel_id='@test_channel',
            message_text='Test message'
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤
        mock_bot.send_message.assert_called_once_with(
            chat_id='@test_channel',
            text='Test message',
            parse_mode='HTML',
            disable_web_page_preview=True
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        assert result == mock_message
    
    @pytest.mark.asyncio
    async def test_publish_to_channel_forbidden_error(self):
        """–¢–µ—Å—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª"""
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –±–æ—Ç–∞ —Å –æ—à–∏–±–∫–æ–π
        mock_bot = AsyncMock()
        mock_bot.send_message.side_effect = TelegramForbiddenError(
            method='send_message',
            message='Forbidden: bot was blocked by the user'
        )
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Å –æ—à–∏–±–∫–æ–π
        with pytest.raises(ChannelPublisherError) as exc_info:
            await ChannelPublisher.publish_to_channel(
                bot=mock_bot,
                channel_id='@test_channel',
                message_text='Test message'
            )
        
        assert '–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª' in str(exc_info.value)
    
    @pytest.mark.asyncio
    async def test_publish_to_channel_bad_request_error(self):
        """–¢–µ—Å—Ç –æ—à–∏–±–∫–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª"""
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –±–æ—Ç–∞ —Å –æ—à–∏–±–∫–æ–π
        mock_bot = AsyncMock()
        mock_bot.send_message.side_effect = TelegramBadRequest(
            method='send_message',
            message='Bad Request: chat not found'
        )
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Å –æ—à–∏–±–∫–æ–π
        with pytest.raises(ChannelPublisherError) as exc_info:
            await ChannelPublisher.publish_to_channel(
                bot=mock_bot,
                channel_id='@invalid_channel',
                message_text='Test message'
            )
        
        assert '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª' in str(exc_info.value)
    
    @pytest.mark.asyncio
    async def test_send_to_private_chat_success(self):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –õ–°"""
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –±–æ—Ç–∞
        mock_bot = AsyncMock()
        mock_message = MagicMock(spec=Message)
        mock_bot.send_message.return_value = mock_message
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
        result = await ChannelPublisher.send_to_private_chat(
            bot=mock_bot,
            user_id=123456789,
            message_text='Test private message'
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤
        mock_bot.send_message.assert_called_once_with(
            chat_id=123456789,
            text='Test private message',
            parse_mode='HTML',
            disable_web_page_preview=True
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        assert result == mock_message
    
    @pytest.mark.asyncio
    async def test_send_to_private_chat_forbidden_error(self):
        """–¢–µ—Å—Ç –æ—à–∏–±–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –±–æ—Ç–∞ —Å –æ—à–∏–±–∫–æ–π
        mock_bot = AsyncMock()
        mock_bot.send_message.side_effect = TelegramForbiddenError(
            method='send_message',
            message='Forbidden: bot was blocked by the user'
        )
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å –æ—à–∏–±–∫–æ–π
        with pytest.raises(ChannelPublisherError) as exc_info:
            await ChannelPublisher.send_to_private_chat(
                bot=mock_bot,
                user_id=123456789,
                message_text='Test message'
            )
        
        assert '–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞' in str(exc_info.value)
    
    @pytest.mark.asyncio
    async def test_publish_result_development_mode(self, sample_calculation_data):
        """–¢–µ—Å—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –±–æ—Ç–∞
        mock_bot = AsyncMock()
        mock_message = MagicMock(spec=Message)
        mock_bot.send_message.return_value = mock_message
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        result = await ChannelPublisher.publish_result(
            bot=mock_bot,
            pair_info=sample_calculation_data['pair_info'],
            base_rate=sample_calculation_data['base_rate'],
            margin=sample_calculation_data['margin'],
            final_rate=sample_calculation_data['final_rate'],
            rate_change=sample_calculation_data['rate_change'],
            exchange_rate_data=sample_calculation_data['exchange_rate_data'],
            manager_name=sample_calculation_data['manager_name'],
            user_id=sample_calculation_data['user_id'],
            channel_id=None,
            development_mode=True
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        assert result['success'] is True
        assert result['target'] == 'private_chat'
        assert '—Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏' in result['message']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω send_message –¥–ª—è –õ–°
        mock_bot.send_message.assert_called_once()
        call_args = mock_bot.send_message.call_args
        assert call_args[1]['chat_id'] == sample_calculation_data['user_id']
        assert '–†–ï–ñ–ò–ú –†–ê–ó–†–ê–ë–û–¢–ö–ò' in call_args[1]['text']
    
    @pytest.mark.asyncio
    async def test_publish_result_production_mode(self, sample_calculation_data):
        """–¢–µ—Å—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω —Ä–µ–∂–∏–º–µ"""
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –±–æ—Ç–∞
        mock_bot = AsyncMock()
        mock_message = MagicMock(spec=Message)
        mock_bot.send_message.return_value = mock_message
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω —Ä–µ–∂–∏–º–µ
        result = await ChannelPublisher.publish_result(
            bot=mock_bot,
            pair_info=sample_calculation_data['pair_info'],
            base_rate=sample_calculation_data['base_rate'],
            margin=sample_calculation_data['margin'],
            final_rate=sample_calculation_data['final_rate'],
            rate_change=sample_calculation_data['rate_change'],
            exchange_rate_data=sample_calculation_data['exchange_rate_data'],
            manager_name=sample_calculation_data['manager_name'],
            user_id=sample_calculation_data['user_id'],
            channel_id='@test_channel',
            development_mode=False
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        assert result['success'] is True
        assert result['target'] == 'channel'
        assert '–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª' in result['message']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω send_message –¥–ª—è –∫–∞–Ω–∞–ª–∞
        mock_bot.send_message.assert_called_once()
        call_args = mock_bot.send_message.call_args
        assert call_args[1]['chat_id'] == '@test_channel'
        assert 'RUB/ZAR' in call_args[1]['text']
        assert '–†–ï–ñ–ò–ú –†–ê–ó–†–ê–ë–û–¢–ö–ò' not in call_args[1]['text']
    
    @pytest.mark.asyncio
    async def test_publish_result_error_handling(self, sample_calculation_data):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –±–æ—Ç–∞ —Å –æ—à–∏–±–∫–æ–π
        mock_bot = AsyncMock()
        mock_bot.send_message.side_effect = TelegramForbiddenError(
            method='send_message',
            message='Forbidden: bot was blocked by the user'
        )
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Å –æ—à–∏–±–∫–æ–π
        result = await ChannelPublisher.publish_result(
            bot=mock_bot,
            pair_info=sample_calculation_data['pair_info'],
            base_rate=sample_calculation_data['base_rate'],
            margin=sample_calculation_data['margin'],
            final_rate=sample_calculation_data['final_rate'],
            rate_change=sample_calculation_data['rate_change'],
            exchange_rate_data=sample_calculation_data['exchange_rate_data'],
            manager_name=sample_calculation_data['manager_name'],
            user_id=sample_calculation_data['user_id'],
            channel_id='@test_channel',
            development_mode=False
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        assert result['success'] is False
        assert result['target'] == 'error'
        assert '–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏' in result['message']
    
    @pytest.mark.asyncio
    async def test_publish_result_unexpected_error(self, sample_calculation_data):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –±–æ—Ç–∞ —Å –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–π –æ—à–∏–±–∫–æ–π
        mock_bot = AsyncMock()
        mock_bot.send_message.side_effect = Exception('Unexpected error')
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Å –æ—à–∏–±–∫–æ–π
        result = await ChannelPublisher.publish_result(
            bot=mock_bot,
            pair_info=sample_calculation_data['pair_info'],
            base_rate=sample_calculation_data['base_rate'],
            margin=sample_calculation_data['margin'],
            final_rate=sample_calculation_data['final_rate'],
            rate_change=sample_calculation_data['rate_change'],
            exchange_rate_data=sample_calculation_data['exchange_rate_data'],
            manager_name=sample_calculation_data['manager_name'],
            user_id=sample_calculation_data['user_id'],
            channel_id=None,
            development_mode=True
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        assert result['success'] is False
        assert result['target'] == 'error'
        assert '–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞' in result['message']
    
    def test_format_channel_message_with_crypto_pair(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã"""
        crypto_pair_info = {
            'name': 'BTC/USDT',
            'base': 'BTC',
            'quote': 'USDT',
            'emoji': '‚Çøüí∞',
            'description': '–ë–∏—Ç–∫–æ–∏–Ω –∫ Tether USD'
        }
        
        crypto_exchange_data = {
            'timestamp': '2024-01-15T12:30:45.123456Z',
            'source': 'Rapira API',
            'rate': 42500.12345678
        }
        
        message = ChannelPublisher.format_channel_message(
            pair_info=crypto_pair_info,
            base_rate=Decimal('42500.12345678'),
            margin=Decimal('1.5'),
            final_rate=Decimal('43137.62530763'),
            rate_change=Decimal('637.50185085'),
            exchange_rate_data=crypto_exchange_data,
            manager_name='–ö—Ä–∏–ø—Ç–æ –ú–µ–Ω–µ–¥–∂–µ—Ä'
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç —ç–ª–µ–º–µ–Ω—Ç—ã
        assert 'BTC/USDT' in message
        assert 'USDT' in message
        assert '–ö—Ä–∏–ø—Ç–æ –ú–µ–Ω–µ–¥–∂–µ—Ä' in message
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        assert '43137.6253' in message  # 4 –∑–Ω–∞–∫–∞ –¥–ª—è USDT
    
    def test_format_private_message_structure(self, sample_calculation_data):
        """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –õ–°"""
        message = ChannelPublisher.format_private_message(
            pair_info=sample_calculation_data['pair_info'],
            base_rate=sample_calculation_data['base_rate'],
            margin=sample_calculation_data['margin'],
            final_rate=sample_calculation_data['final_rate'],
            rate_change=sample_calculation_data['rate_change'],
            exchange_rate_data=sample_calculation_data['exchange_rate_data'],
            manager_name=sample_calculation_data['manager_name']
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–æ–æ–±—â–µ–Ω–∏—è
        lines = message.split('\n')
        
        # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        assert len(lines) > 10
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ–∫—Ü–∏–π
        message_sections = [
            '–†–ï–ñ–ò–ú –†–ê–ó–†–ê–ë–û–¢–ö–ò',
            '–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞:',
            '–ú–µ–Ω–µ–¥–∂–µ—Ä:',
            '–í—Ä–µ–º—è —Ä–∞—Å—á–µ—Ç–∞:',
            '–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–Ω–∞–ª–∞:',
            '–í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª'
        ]
        
        for section in message_sections:
            assert section in message, f"–°–µ–∫—Ü–∏—è '{section}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏"


if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    pytest.main([__file__, '-v'])