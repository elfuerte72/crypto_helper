#!/usr/bin/env python3
"""
Unit —Ç–µ—Å—Ç—ã –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π callback timeout (TASK-CRYPTO-002)
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ç–∏–ª–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏ callback –æ–±—Ä–∞–±–æ—Ç–∫–∏
"""

import pytest
import asyncio
from unittest.mock import AsyncMock, MagicMock, patch
from decimal import Decimal

import sys
import os
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', '..', 'src'))

from aiogram.types import Message, CallbackQuery, User, Chat, InlineKeyboardMarkup
from aiogram.exceptions import TelegramBadRequest

from handlers.formatters import SafeMessageEditor, LoadingMessageFormatter
from handlers.admin_flow import get_exchange_rate_with_loading, safe_callback_answer_and_edit
from handlers.fsm_states import Currency
from config import config


class TestSafeMessageEditor:
    """–¢–µ—Å—Ç—ã –¥–ª—è SafeMessageEditor - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    @pytest.fixture
    def mock_message(self):
        """–°–æ–∑–¥–∞—Ç—å mock Message –æ–±—ä–µ–∫—Ç"""
        message = MagicMock(spec=Message)
        message.text = "Test message"
        message.caption = None
        message.reply_markup = None
        message.edit_text = AsyncMock()
        return message
    
    @pytest.fixture
    def mock_callback_query(self):
        """–°–æ–∑–¥–∞—Ç—å mock CallbackQuery –æ–±—ä–µ–∫—Ç"""
        callback = MagicMock(spec=CallbackQuery)
        callback.answer = AsyncMock()
        callback.from_user = MagicMock(spec=User)
        callback.from_user.id = 123456
        return callback
    
    @pytest.mark.asyncio
    async def test_safe_edit_message_success(self, mock_message):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
        new_text = "New message text"
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º mock –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        mock_message.edit_text.return_value = None
        
        result = await SafeMessageEditor.safe_edit_message(
            mock_message, new_text
        )
        
        assert result is True
        mock_message.edit_text.assert_called_once_with(
            text=new_text,
            reply_markup=None,
            parse_mode='HTML'
        )
    
    @pytest.mark.asyncio
    async def test_safe_edit_message_not_modified(self, mock_message):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ 'message is not modified'"""
        new_text = "New message text"
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º mock –¥–ª—è –æ—à–∏–±–∫–∏ "message is not modified"
        mock_message.edit_text.side_effect = TelegramBadRequest(
            method="editMessageText",
            message="Bad Request: message is not modified"
        )
        
        result = await SafeMessageEditor.safe_edit_message(
            mock_message, new_text
        )
        
        assert result is True  # –î–æ–ª–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å True –¥–ª—è —ç—Ç–æ–π –æ—à–∏–±–∫–∏
        mock_message.edit_text.assert_called_once()
    
    @pytest.mark.asyncio
    async def test_safe_edit_message_retries(self, mock_message):
        """–¢–µ—Å—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ—à–∏–±–∫–∞—Ö"""
        new_text = "New message text"
        
        # –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ - –æ—à–∏–±–∫–∞, –≤—Ç–æ—Ä–∞—è - —É—Å–ø–µ—Ö
        mock_message.edit_text.side_effect = [
            TelegramBadRequest(method="editMessageText", message="Bad request"),
            None
        ]
        
        with patch('asyncio.sleep', new_callable=AsyncMock):
            result = await SafeMessageEditor.safe_edit_message(
                mock_message, new_text, max_attempts=2
            )
        
        assert result is True
        assert mock_message.edit_text.call_count == 2
    
    @pytest.mark.asyncio
    async def test_safe_edit_message_max_attempts_exceeded(self, mock_message):
        """–¢–µ—Å—Ç –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ø—ã—Ç–æ–∫"""
        new_text = "New message text"
        
        # –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã
        mock_message.edit_text.side_effect = TelegramBadRequest(
            method="editMessageText", 
            message="Bad request"
        )
        
        with patch('asyncio.sleep', new_callable=AsyncMock):
            result = await SafeMessageEditor.safe_edit_message(
                mock_message, new_text, max_attempts=2
            )
        
        assert result is False
        assert mock_message.edit_text.call_count == 2
    
    @pytest.mark.asyncio
    async def test_safe_answer_callback_success(self, mock_callback_query):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback query"""
        text = "Success"
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º mock –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        mock_callback_query.answer.return_value = None
        
        result = await SafeMessageEditor.safe_answer_callback(
            mock_callback_query, text
        )
        
        assert result is True
        mock_callback_query.answer.assert_called_once_with(
            text=text, show_alert=False
        )
    
    @pytest.mark.asyncio
    async def test_safe_answer_callback_timeout(self, mock_callback_query):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∞–π–º–∞—É—Ç–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback"""
        text = "Test message"
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º mock –¥–ª—è —Ç–∞–π–º–∞—É—Ç–∞
        mock_callback_query.answer.side_effect = asyncio.TimeoutError()
        
        with patch('asyncio.wait_for', side_effect=asyncio.TimeoutError()):
            result = await SafeMessageEditor.safe_answer_callback(
                mock_callback_query, text, timeout=1.0
            )
        
        assert result is False
    
    @pytest.mark.asyncio
    async def test_safe_answer_callback_old_query(self, mock_callback_query):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ä–æ–≥–æ callback query"""
        text = "Test message"
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º mock –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ query
        mock_callback_query.answer.side_effect = TelegramBadRequest(
            method="answerCallbackQuery",
            message="Bad Request: query is too old and response timeout expired"
        )
        
        result = await SafeMessageEditor.safe_answer_callback(
            mock_callback_query, text
        )
        
        assert result is False


class TestLoadingMessageFormatter:
    """–¢–µ—Å—Ç—ã –¥–ª—è LoadingMessageFormatter - —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–æ—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    def test_format_loading_message(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏"""
        result = LoadingMessageFormatter.format_loading_message(
            "–¢–µ—Å—Ç–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è", 2, 5
        )
        
        assert "‚è≥" in result
        assert "–¢–µ—Å—Ç–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è" in result
        assert "2/5" in result
        assert "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ" in result
    
    def test_format_api_loading_message(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ API"""
        result = LoadingMessageFormatter.format_api_loading_message("Rapira API")
        
        assert "üîÑ" in result
        assert "Rapira API" in result
        assert "–∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É" in result
        assert "–Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥" in result
    
    def test_format_calculation_loading_message(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–∞"""
        result = LoadingMessageFormatter.format_calculation_loading_message()
        
        assert "üßÆ" in result
        assert "–†–∞—Å—á–µ—Ç –∫—É—Ä—Å–∞" in result
        assert "–Ω–∞—Ü–µ–Ω–∫–∏" in result
        assert "–°–µ–∫—É–Ω–¥–æ—á–∫—É" in result
    
    def test_format_error_with_retry(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–∫–∏ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        result = LoadingMessageFormatter.format_error_with_retry(
            "–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞", 2, 3
        )
        
        assert "‚ö†Ô∏è" in result
        assert "–ø–æ–ø—ã—Ç–∫–∞ 2/3" in result
        assert "–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞" in result
        assert "–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞" in result
    
    def test_create_progress_bar(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞"""
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–π
        result = LoadingMessageFormatter._create_progress_bar(3, 10, 10)
        
        assert "[" in result
        assert "]" in result
        assert "‚ñà" in result  # –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–∞—è —á–∞—Å—Ç—å
        assert "‚ñë" in result  # –ù–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–∞—è —á–∞—Å—Ç—å


class TestAsyncAPIHandlers:
    """–¢–µ—Å—Ç—ã –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ API –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    @pytest.fixture
    def mock_message(self):
        """–°–æ–∑–¥–∞—Ç—å mock Message –æ–±—ä–µ–∫—Ç"""
        message = MagicMock(spec=Message)
        message.text = "Test message"
        message.edit_text = AsyncMock()
        return message
    
    @pytest.fixture
    def mock_callback_query(self, mock_message):
        """–°–æ–∑–¥–∞—Ç—å mock CallbackQuery –æ–±—ä–µ–∫—Ç"""
        callback = MagicMock(spec=CallbackQuery)
        callback.answer = AsyncMock()
        callback.message = mock_message
        callback.from_user = MagicMock(spec=User)
        callback.from_user.id = 123456
        return callback
    
    @pytest.mark.asyncio
    async def test_get_exchange_rate_with_loading_success(self, mock_message):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π"""
        source_currency = Currency.RUB
        target_currency = Currency.USDT
        expected_rate = Decimal('100.50')
        
        # –ú–æ–∫–∞–µ–º SafeMessageEditor.safe_edit_message
        with patch('handlers.admin_flow.SafeMessageEditor.safe_edit_message', new_callable=AsyncMock) as mock_edit:
            mock_edit.return_value = True
            
            # –ú–æ–∫–∞–µ–º ExchangeCalculator.get_base_rate_for_pair
            with patch('handlers.admin_flow.ExchangeCalculator.get_base_rate_for_pair', new_callable=AsyncMock) as mock_get_rate:
                mock_get_rate.return_value = expected_rate
                
                result = await get_exchange_rate_with_loading(
                    mock_message, source_currency, target_currency
                )
        
        assert result == expected_rate
        assert mock_edit.call_count >= 1  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω–æ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∑–∞–≥—Ä—É–∑–∫–∏
        mock_get_rate.assert_called_once_with(source_currency, target_currency)
    
    @pytest.mark.asyncio
    async def test_get_exchange_rate_with_loading_timeout(self, mock_message):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∞–π–º–∞—É—Ç–∞ API"""
        source_currency = Currency.RUB
        target_currency = Currency.USD
        
        with patch('handlers.admin_flow.SafeMessageEditor.safe_edit_message', new_callable=AsyncMock) as mock_edit:
            mock_edit.return_value = True
            
            # –ú–æ–∫–∞–µ–º —Ç–∞–π–º–∞—É—Ç
            with patch('handlers.admin_flow.ExchangeCalculator.get_base_rate_for_pair', new_callable=AsyncMock) as mock_get_rate:
                mock_get_rate.side_effect = asyncio.TimeoutError()
                
                with patch('asyncio.wait_for', side_effect=asyncio.TimeoutError()):
                    result = await get_exchange_rate_with_loading(
                        mock_message, source_currency, target_currency
                    )
        
        assert result is None
        # –î–æ–ª–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Ç–∞–π–º–∞—É—Ç–∞
        error_calls = [call for call in mock_edit.call_args_list 
                      if "—Ç–∞–π–º–∞—É—Ç–∞" in str(call)]
        assert len(error_calls) > 0
    
    @pytest.mark.asyncio
    async def test_safe_callback_answer_and_edit_success(self, mock_callback_query):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        new_text = "New message"
        answer_text = "Success"
        
        with patch('handlers.admin_flow.SafeMessageEditor.safe_answer_callback', new_callable=AsyncMock) as mock_answer:
            mock_answer.return_value = True
            
            with patch('handlers.admin_flow.SafeMessageEditor.safe_edit_message', new_callable=AsyncMock) as mock_edit:
                mock_edit.return_value = True
                
                result = await safe_callback_answer_and_edit(
                    mock_callback_query,
                    new_text,
                    answer_text=answer_text
                )
        
        assert result is True
        mock_answer.assert_called_once()
        mock_edit.assert_called_once()
    
    @pytest.mark.asyncio
    async def test_safe_callback_answer_and_edit_partial_failure(self, mock_callback_query):
        """–¢–µ—Å—Ç —á–∞—Å—Ç–∏—á–Ω–æ–π –Ω–µ—É–¥–∞—á–∏ (–æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–µ–Ω, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ—É–¥–∞—á–Ω–æ)"""
        new_text = "New message"
        
        with patch('handlers.admin_flow.SafeMessageEditor.safe_answer_callback', new_callable=AsyncMock) as mock_answer:
            mock_answer.return_value = True
            
            with patch('handlers.admin_flow.SafeMessageEditor.safe_edit_message', new_callable=AsyncMock) as mock_edit:
                mock_edit.return_value = False
                
                result = await safe_callback_answer_and_edit(
                    mock_callback_query,
                    new_text
                )
        
        assert result is False  # –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ—É–¥–∞—á–µ–Ω
        mock_answer.assert_called_once()
        mock_edit.assert_called_once()


class TestConfigurationSettings:
    """–¢–µ—Å—Ç—ã –¥–ª—è –Ω–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    
    def test_callback_timeout_settings(self):
        """–¢–µ—Å—Ç –Ω–∞–ª–∏—á–∏—è –Ω–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–∞–π–º–∞—É—Ç–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
        assert hasattr(config, 'CALLBACK_API_TIMEOUT')
        assert hasattr(config, 'CALLBACK_ANSWER_TIMEOUT')
        assert hasattr(config, 'MAX_MESSAGE_EDIT_ATTEMPTS')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        assert config.CALLBACK_API_TIMEOUT <= 5  # –ù–µ –±–æ–ª—å—à–µ 5 —Å–µ–∫—É–Ω–¥
        assert config.CALLBACK_ANSWER_TIMEOUT <= 3  # –ù–µ –±–æ–ª—å—à–µ 3 —Å–µ–∫—É–Ω–¥
        assert config.MAX_MESSAGE_EDIT_ATTEMPTS >= 1  # –ú–∏–Ω–∏–º—É–º 1 –ø–æ–ø—ã—Ç–∫–∞
    
    def test_callback_timeout_values(self):
        """–¢–µ—Å—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–π —Ç–∞–π–º–∞—É—Ç–æ–≤"""
        # Callback API timeout –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω—å—à–µ –æ–±—ã—á–Ω–æ–≥–æ API timeout
        assert config.CALLBACK_API_TIMEOUT < config.API_TIMEOUT
        
        # Callback answer timeout –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω—å—à–µ callback API timeout
        assert config.CALLBACK_ANSWER_TIMEOUT <= config.CALLBACK_API_TIMEOUT


if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    pytest.main([__file__, '-v', '--tb=short'])