#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ FiatRatesService
Tests TASK-CRYPTO-003: –£–ª—É—á—à–µ–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è API –æ—à–∏–±–æ–∫
"""

import pytest
import asyncio
import logging
from unittest.mock import Mock, patch
from io import StringIO

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
import sys
import os
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.dirname(__file__))))

from src.services.fiat_rates_service import FiatRatesService, log_detailed_error


class TestImprovedLoggingSimple:
    """–ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def test_log_detailed_error_function(self):
        """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫"""
        # –°–æ–∑–¥–∞–µ–º mock logger –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –≤—ã–≤–æ–¥–∞
        logger_output = StringIO()
        handler = logging.StreamHandler(logger_output)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä
        with patch('src.services.fiat_rates_service.logger') as mock_logger:
            mock_logger.error = Mock()
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –æ—à–∏–±–∫—É
            test_error = ValueError("Test error message")
            
            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            result = log_detailed_error("TEST_TYPE", test_error, "test context")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            assert result['type'] == "TEST_TYPE"
            assert result['message'] == "Test error message"
            assert result['class'] == "ValueError"
            assert result['context'] == "test context"
            assert 'traceback' in result
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –±—ã–ª–æ –≤—ã–∑–≤–∞–Ω–æ
            mock_logger.error.assert_called_once()
            call_args = mock_logger.error.call_args[0][0]
            assert "üö® TEST_TYPE ERROR in test context:" in call_args
            assert "Type: ValueError" in call_args
            assert "Message: Test error message" in call_args
    
    @pytest.mark.asyncio
    async def test_missing_api_key_logging(self):
        """–¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ API –∫–ª—é—á–∞"""
        service = FiatRatesService()
        service.api_key = None
        
        with patch('src.services.fiat_rates_service.logger') as mock_logger:
            mock_logger.warning = Mock()
            mock_logger.info = Mock()
            
            # –ú–æ–∫–∏—Ä—É–µ–º fallback rates
            with patch.object(service, '_get_fallback_rates') as mock_fallback:
                mock_fallback.return_value = {"EUR": 0.85}
                
                result = await service.get_rates_from_base("USD")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è API –∫–ª—é—á–∞
                mock_logger.warning.assert_called()
                warning_call = mock_logger.warning.call_args[0][0]
                assert "üîë APILayer API key not configured" in warning_call
                assert "Service: FiatRatesService" in warning_call
                assert "Base currency: USD" in warning_call
                assert "Fallback available: True" in warning_call
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                assert result == {"EUR": 0.85}
    
    @pytest.mark.asyncio 
    async def test_fallback_rates_loading_logging(self):
        """–¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ fallback rates"""
        service = FiatRatesService()
        
        with patch('src.services.fiat_rates_service.logger') as mock_logger:
            mock_logger.info = Mock()
            
            # –í—ã–∑—ã–≤–∞–µ–º fallback rates
            result = await service._get_fallback_rates("USD")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            mock_logger.info.assert_called()
            info_call = mock_logger.info.call_args[0][0]
            assert "üóÑ LOADING FALLBACK RATES for USD" in info_call
            assert "Source: Static historical data" in info_call
            assert "Reason: APILayer unavailable" in info_call
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –∫—É—Ä—Å—ã
            assert isinstance(result, dict)
            assert len(result) > 0
    
    @pytest.mark.asyncio
    async def test_health_check_logging(self):
        """–¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è health check"""
        service = FiatRatesService()
        
        with patch('src.services.fiat_rates_service.logger') as mock_logger:
            mock_logger.info = Mock()
            
            # –ú–æ–∫–∏—Ä—É–µ–º get_fiat_rate –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ health check
            with patch.object(service, 'get_fiat_rate') as mock_get_rate:
                mock_get_rate.return_value = 0.85
                
                result = await service.health_check()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ health check
                mock_logger.info.assert_called()
                info_calls = [call[0][0] for call in mock_logger.info.call_args_list]
                
                # –ò—â–µ–º –ª–æ–≥ —Å—Ç–∞—Ä—Ç–∞ health check
                start_log = next((log for log in info_calls if "Performing APILayer health check" in log), None)
                assert start_log is not None
                
                # –ò—â–µ–º –ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è health check
                complete_log = next((log for log in info_calls if "APILayer health check completed" in log), None)
                assert complete_log is not None
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                assert result['status'] == 'healthy'
                assert 'response_time_ms' in result
                assert result['service'] == 'apilayer_fiat_rates'
    
    def test_log_detailed_error_with_real_traceback(self):
        """–¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–∫–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º —Ç—Ä–µ–π—Å–±–µ–∫–æ–º"""
        with patch('src.services.fiat_rates_service.logger') as mock_logger:
            mock_logger.error = Mock()
            
            try:
                # –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É —Å —Ç—Ä–µ–π—Å–±–µ–∫–æ–º
                raise ValueError("Test error with traceback")
            except ValueError as e:
                result = log_detailed_error("TRACEBACK_TEST", e, "test context")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç—Ä–µ–π—Å–±–µ–∫ –∑–∞–ø–∏—Å–∞–Ω
                assert result['traceback'] != 'No traceback available'
                assert 'ValueError: Test error with traceback' in result['traceback']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                mock_logger.error.assert_called_once()
                call_args = mock_logger.error.call_args[0][0]
                assert "üö® TRACEBACK_TEST ERROR" in call_args
                assert "‚îî‚îÄ Traceback:" in call_args
    
    @pytest.mark.asyncio
    async def test_network_error_handling_and_logging(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫"""
        service = FiatRatesService()
        service.api_key = "test_key"
        
        with patch('src.services.fiat_rates_service.logger') as mock_logger:
            mock_logger.error = Mock()
            mock_logger.critical = Mock()
            mock_logger.info = Mock()
            
            # –ú–æ–∫–∏—Ä—É–µ–º —Å–µ—Ç–µ–≤—É—é –æ—à–∏–±–∫—É –Ω–∞ –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–º —É—Ä–æ–≤–Ω–µ
            with patch.object(service, '_rate_limit') as mock_rate_limit, \
                 patch.object(service, '_get_fallback_rates') as mock_fallback, \
                 patch('aiohttp.ClientSession.get') as mock_get:
                
                # –ú–æ–∫–∏—Ä—É–µ–º —Å–µ—Ç–µ–≤—É—é –æ—à–∏–±–∫—É –±–µ–∑ –ø—Ä–æ–±–ª–µ–º—ã ssl
                from aiohttp import ClientError
                network_error = ClientError("Connection refused")
                mock_get.side_effect = network_error
                mock_fallback.return_value = {"EUR": 0.85}
                
                result = await service.get_rates_from_base("USD")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–∞ –æ—à–∏–±–∫–∞ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω fallback
                assert result == {"EUR": 0.85}
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±—ã–ª–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
                assert mock_logger.error.called or mock_logger.critical.called
    
    @pytest.mark.asyncio
    async def test_api_key_validation_logging(self):
        """–¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ API –∫–ª—é—á–∞"""
        service = FiatRatesService()
        
        # –¢–µ—Å—Ç —Å –ø—É—Å—Ç—ã–º API –∫–ª—é—á–æ–º
        service.api_key = ""
        
        with patch('src.services.fiat_rates_service.logger') as mock_logger:
            mock_logger.warning = Mock()
            
            with patch.object(service, '_get_fallback_rates') as mock_fallback:
                mock_fallback.return_value = {"EUR": 0.85}
                
                result = await service.get_rates_from_base("USD")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∫–ª—é—á–∞
                mock_logger.warning.assert_called()
                warning_call = mock_logger.warning.call_args[0][0]
                assert "üîë APILayer API key not configured" in warning_call
        
        # –¢–µ—Å—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º API –∫–ª—é—á–æ–º
        service.api_key = "test_valid_key"
        
        with patch('src.services.fiat_rates_service.logger') as mock_logger:
            mock_logger.info = Mock()
            
            # –ú–æ–∫–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            with patch.object(service, 'session') as mock_session, \
                 patch.object(service, '_rate_limit'), \
                 patch.object(service, '_cache_rates'):
                
                # –ú–æ–∫–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç (–Ω–æ –ø—Ä–æ—â–µ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –Ω–µ—Ç warning)
                # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç–µ—Å—Ç –±—É–¥–µ—Ç —á–µ—Ä–µ–∑ fallback –∏–∑-–∑–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è
                with patch.object(service, '_get_fallback_rates') as mock_fallback:
                    mock_fallback.return_value = {"EUR": 0.85}
                    
                    # –ú–æ–∫–∏—Ä—É–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫—ç—à–∞
                    with patch.object(service, '_get_cached_rates') as mock_cache:
                        mock_cache.return_value = None
                        
                        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback (–∏–º–∏—Ç–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è)
                        service.api_key = None
                        result = await service.get_rates_from_base("USD")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ fallback
                        assert result == {"EUR": 0.85}


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    pytest.main([__file__, "-v"])