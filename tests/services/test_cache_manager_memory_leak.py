#!/usr/bin/env python3
"""
Unit Tests –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è Memory Leak –≤ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–∏
TASK-PERF-001: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ UnifiedCacheManager
"""

import pytest
import asyncio
import time
import sys
import os

# Add src directory to path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', '..', 'src'))

from services.cache_manager import UnifiedCacheManager, rates_cache, api_cache
from config import config


class TestMemoryLeakFix:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è Memory Leak –≤ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–∏"""
    
    @pytest.fixture
    def test_cache(self):
        """–°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫—ç—à –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤"""
        return UnifiedCacheManager(
            max_size=10,
            default_ttl=2,  # –ö–æ—Ä–æ—Ç–∫–∏–π TTL –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            cleanup_interval=1,
            enable_stats=True
        )
    
    def test_cache_size_limit_enforcement(self, test_cache):
        """–¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∫—ç—à–∞ (LRU eviction)"""
        print("üß™ Test 1: Cache size limit enforcement")
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –∫—ç—à –≤—ã—à–µ –ª–∏–º–∏—Ç–∞
        for i in range(15):  # –õ–∏–º–∏—Ç 10, –¥–æ–±–∞–≤–ª—è–µ–º 15
            test_cache.set(f"key_{i}", f"value_{i}")
        
        stats = test_cache.get_stats()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–∞–∑–º–µ—Ä –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç
        assert stats['current_size'] <= test_cache.max_size, f"Cache size {stats['current_size']} exceeds limit {test_cache.max_size}"
        assert stats['evictions'] > 0, "LRU evictions should have occurred"
        
        print(f"‚úÖ Cache size enforced: {stats['current_size']}/{test_cache.max_size}")
        print(f"‚úÖ LRU evictions: {stats['evictions']}")
    
    def test_ttl_cleanup(self, test_cache):
        """–¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ –ø–æ TTL"""
        print("üß™ Test 2: TTL cleanup functionality")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –≤ –∫—ç—à
        test_cache.set("temp_key_1", "temp_value_1")
        test_cache.set("temp_key_2", "temp_value_2")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–ø–∏—Å–∏ –µ—Å—Ç—å
        assert test_cache.get("temp_key_1") is not None
        assert test_cache.get("temp_key_2") is not None
        
        initial_size = test_cache.get_stats()['current_size']
        print(f"üìä Initial cache size: {initial_size}")
        
        # –ñ–¥–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏—è TTL (2 —Å–µ–∫—É–Ω–¥—ã + –∑–∞–ø–∞—Å)
        time.sleep(3)
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º cleanup
        expired_count = test_cache.cleanup_expired()
        
        final_size = test_cache.get_stats()['current_size']
        print(f"üìä Final cache size: {final_size}")
        print(f"üßπ Expired entries removed: {expired_count}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏ —É–¥–∞–ª–µ–Ω—ã
        assert test_cache.get("temp_key_1") is None, "Expired entries should be removed"
        assert test_cache.get("temp_key_2") is None, "Expired entries should be removed"
        assert expired_count >= 2, "At least 2 entries should be expired"
    
    def test_memory_usage_estimation(self, test_cache):
        """–¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"""
        print("üß™ Test 3: Memory usage estimation")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞–∑–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        test_data = {
            "small": "x" * 100,
            "medium": "y" * 1000,
            "large": "z" * 10000,
            "dict": {"key1": "value1", "key2": "value2", "nested": {"a": 1, "b": 2}}
        }
        
        initial_memory = test_cache.get_stats()['memory_usage_bytes']
        
        for key, value in test_data.items():
            test_cache.set(key, value)
        
        final_memory = test_cache.get_stats()['memory_usage_bytes']
        memory_increase = final_memory - initial_memory
        
        print(f"üìä Initial memory: {initial_memory} bytes")
        print(f"üìä Final memory: {final_memory} bytes")
        print(f"üìà Memory increase: {memory_increase} bytes")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–∞–º—è—Ç—å —É–≤–µ–ª–∏—á–∏–ª–∞—Å—å
        assert final_memory > initial_memory, "Memory usage should increase with added data"
        assert memory_increase > 0, "Memory increase should be positive"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –æ—Ü–µ–Ω–∫–∞ –≤ MB
        stats = test_cache.get_stats()
        assert 'memory_usage_mb' in stats, "Memory usage should be available in MB"
        assert stats['memory_usage_mb'] >= 0, "Memory usage in MB should be non-negative"
    
    def test_cache_stats_accuracy(self, test_cache):
        """–¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞"""
        print("üß™ Test 4: Cache statistics accuracy")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∫—ç—à–µ–º
        test_cache.set("hit_key", "hit_value")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º hits
        hit_value = test_cache.get("hit_key")  # Hit
        miss_value = test_cache.get("miss_key")  # Miss
        
        stats = test_cache.get_stats()
        
        print(f"üìä Stats: {stats}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        assert stats['hits'] >= 1, "Should have at least 1 hit"
        assert stats['misses'] >= 1, "Should have at least 1 miss"
        assert stats['total_sets'] >= 1, "Should have at least 1 set operation"
        assert stats['current_size'] <= stats['max_size'], "Current size should not exceed max size"
        assert 0 <= stats['utilization'] <= 1, "Utilization should be between 0 and 1"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º hit ratio
        total_requests = stats['hits'] + stats['misses']
        expected_hit_ratio = stats['hits'] / total_requests if total_requests > 0 else 0
        assert abs(stats['hit_ratio'] - expected_hit_ratio) < 0.001, "Hit ratio calculation should be accurate"
    
    def test_lru_order_maintenance(self, test_cache):
        """–¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ LRU ordering"""
        print("üß™ Test 5: LRU order maintenance")
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –∫—ç—à –¥–æ –ª–∏–º–∏—Ç–∞
        for i in range(test_cache.max_size):
            test_cache.set(f"lru_key_{i}", f"lru_value_{i}")
        
        # –û–±—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–µ—Ä–≤–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É (–¥–µ–ª–∞–µ–º –µ–≥–æ recently used)
        first_value = test_cache.get("lru_key_0")
        assert first_value == "lru_value_0"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç (–¥–æ–ª–∂–µ–Ω –≤—ã—Ç–µ—Å–Ω–∏—Ç—å lru_key_1, –∞ –Ω–µ lru_key_0)
        test_cache.set("new_key", "new_value")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤—Å–µ –µ—â–µ –µ—Å—Ç—å (–±—ã–ª recently used)
        assert test_cache.get("lru_key_0") is not None, "Recently used item should not be evicted"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç —É–¥–∞–ª–µ–Ω (–±—ã–ª least recently used)
        assert test_cache.get("lru_key_1") is None, "Least recently used item should be evicted"
        
        print("‚úÖ LRU ordering works correctly")
    
    @pytest.mark.asyncio
    async def test_background_cleanup_task(self, test_cache):
        """–¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ background cleanup task"""
        print("üß™ Test 6: Background cleanup task")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º background cleanup
        await test_cache.start()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        test_cache.set("bg_key_1", "bg_value_1")
        test_cache.set("bg_key_2", "bg_value_2")
        
        initial_cleanups = test_cache.get_stats()['ttl_cleanups']
        
        # –ñ–¥–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ü–∏–∫–ª–æ–≤ cleanup (TTL = 2s, cleanup interval = 1s)
        await asyncio.sleep(4)
        
        final_cleanups = test_cache.get_stats()['ttl_cleanups']
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º background task
        await test_cache.stop()
        
        print(f"üìä Initial cleanups: {initial_cleanups}")
        print(f"üìä Final cleanups: {final_cleanups}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ cleanup —Å—Ä–∞–±–æ—Ç–∞–ª
        assert final_cleanups > initial_cleanups, "Background cleanup should have run"
        
        print("‚úÖ Background cleanup task works correctly")


class TestFiatRatesServiceMemoryLeakFix:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è Memory Leak –≤ FiatRatesService"""
    
    @pytest.mark.asyncio
    async def test_fiat_service_cache_integration(self):
        """–¢–µ—Å—Ç 7: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è FiatRatesService —Å –Ω–æ–≤—ã–º –∫—ç—à–µ–º"""
        print("üß™ Test 7: FiatRatesService cache integration")
        
        from services.fiat_rates_service import FiatRatesService
        
        service = FiatRatesService()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—ã–π –∫—ç—à
        cache_stats = service.get_cache_stats()
        
        print(f"üìä Cache stats: {cache_stats}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        required_fields = [
            'service', 'cache_manager', 'current_entries', 'max_entries',
            'memory_usage_mb', 'hit_ratio_percent', 'ttl_seconds'
        ]
        
        for field in required_fields:
            assert field in cache_stats, f"Cache stats should contain {field}"
        
        assert cache_stats['service'] == 'fiat_rates_cache'
        assert cache_stats['cache_manager'] == 'UnifiedCacheManager'
        assert cache_stats['max_entries'] == config.CACHE_MAX_SIZE
        
        print("‚úÖ FiatRatesService integration works correctly")
    
    @pytest.mark.asyncio  
    async def test_cache_clear_functionality(self):
        """–¢–µ—Å—Ç 8: –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞"""
        print("üß™ Test 8: Cache clear functionality")
        
        from services.fiat_rates_service import FiatRatesService
        
        service = FiatRatesService()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        await service._cache_rates("USD", {"EUR": 0.85, "RUB": 100.0})
        await service._cache_rates("EUR", {"USD": 1.18, "RUB": 118.0})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å
        cached_usd = await service._get_cached_rates("USD")
        assert cached_usd is not None, "USD rates should be cached"
        
        # –û—á–∏—â–∞–µ–º –∫—ç—à
        clear_result = await service.clear_cache()
        
        print(f"üìä Clear result: {clear_result}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã
        cached_usd_after = await service._get_cached_rates("USD")
        assert cached_usd_after is None, "USD rates should be cleared"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—á–∏—Å—Ç–∫–∏
        assert 'operation' in clear_result
        assert 'entries_removed' in clear_result
        assert 'memory_freed_mb' in clear_result
        assert clear_result['operation'] == 'cache_clear'
        assert clear_result['entries_removed'] >= 0
        
        print("‚úÖ Cache clear functionality works correctly")


class TestMemoryLeakStressTest:
    """–°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è Memory Leak"""
    
    def test_memory_leak_stress_test(self):
        """–¢–µ—Å—Ç 9: –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ Memory Leak"""
        print("üß™ Test 9: Memory leak stress test")
        
        test_cache = UnifiedCacheManager(
            max_size=50,
            default_ttl=1,  # –ö–æ—Ä–æ—Ç–∫–∏–π TTL
            cleanup_interval=1
        )
        
        initial_memory = test_cache.get_stats()['memory_usage_bytes']
        print(f"üìä Initial memory: {initial_memory} bytes")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫—ç—à–∞
        cycles = 100
        entries_per_cycle = 100
        
        for cycle in range(cycles):
            # –î–æ–±–∞–≤–ª—è–µ–º –º–Ω–æ–≥–æ –∑–∞–ø–∏—Å–µ–π
            for i in range(entries_per_cycle):
                key = f"stress_key_{cycle}_{i}"
                value = f"stress_value_{cycle}_{i}" * 10  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
                test_cache.set(key, value)
            
            # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º
            if cycle % 10 == 0:
                test_cache.cleanup_expired()
                current_stats = test_cache.get_stats()
                print(f"  Cycle {cycle}: {current_stats['current_size']} entries, {current_stats['memory_usage_mb']:.2f}MB")
        
        final_stats = test_cache.get_stats()
        final_memory = final_stats['memory_usage_bytes']
        
        print(f"üìä Final memory: {final_memory} bytes")
        print(f"üìä Final stats: {final_stats}")
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω
        assert final_stats['current_size'] <= test_cache.max_size, \
            f"Cache size {final_stats['current_size']} exceeded limit {test_cache.max_size} - MEMORY LEAK!"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏–ª–∏ evictions –∏ cleanups
        assert final_stats['evictions'] > 0, "LRU evictions should have occurred during stress test"
        assert final_stats['ttl_cleanups'] >= 0, "TTL cleanups should have occurred"
        
        print(f"‚úÖ Memory leak stress test passed!")
        print(f"   ‚îú‚îÄ Total evictions: {final_stats['evictions']}")
        print(f"   ‚îú‚îÄ Total cleanups: {final_stats['ttl_cleanups']}")
        print(f"   ‚îî‚îÄ Final cache size: {final_stats['current_size']}/{test_cache.max_size}")


if __name__ == "__main__":
    print("üß™ Running Memory Leak Fix Tests for TASK-PERF-001")
    print("=" * 60)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    pytest.main([__file__, "-v", "-s"])