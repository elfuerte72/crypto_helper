#!/usr/bin/env python3
"""
Unit tests for improved logging in FiatRatesService
Tests TASK-CRYPTO-003: –£–ª—É—á—à–µ–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è API –æ—à–∏–±–æ–∫
"""

import pytest
import asyncio
import json
import logging
from unittest.mock import Mock, AsyncMock, patch, MagicMock
from aiohttp import ClientError, ClientTimeout
import aiohttp

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
import sys
import os
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.dirname(__file__))))

from src.services.fiat_rates_service import FiatRatesService, log_detailed_error
from src.services.models import APILayerError


class TestFiatRatesLogging:
    """–¢–µ—Å—Ç—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ FiatRatesService"""
    
    @pytest.fixture
    def service(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
        service = FiatRatesService()
        service.api_key = "test_api_key"
        return service
    
    @pytest.fixture
    def mock_logger(self):
        """Mock logger –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        with patch('src.services.fiat_rates_service.logger') as mock_logger:
            yield mock_logger
    
    def test_log_detailed_error_function(self, mock_logger):
        """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫"""
        test_error = ValueError("Test error message")
        test_error.__traceback__ = None  # –°–∏–º—É–ª—è—Ü–∏—è —Ç—Ä–µ–π—Å–±–µ–∫–∞
        
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        result = log_detailed_error("TEST_TYPE", test_error, "test context")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        assert result['type'] == "TEST_TYPE"
        assert result['message'] == "Test error message"
        assert result['class'] == "ValueError"
        assert result['context'] == "test context"
        assert 'traceback' in result
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –±—ã–ª–æ –≤—ã–∑–≤–∞–Ω–æ
        mock_logger.error.assert_called_once()
        call_args = mock_logger.error.call_args[0][0]
        assert "üö® TEST_TYPE ERROR in test context:" in call_args
        assert "Type: ValueError" in call_args
        assert "Message: Test error message" in call_args
    
    @pytest.mark.asyncio
    async def test_missing_api_key_logging(self, service, mock_logger):
        """–¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ API –∫–ª—é—á–∞"""
        service.api_key = None
        
        # –ú–æ–∫–∏—Ä—É–µ–º fallback rates
        with patch.object(service, '_get_fallback_rates') as mock_fallback:
            mock_fallback.return_value = {"EUR": 0.85}
            
            result = await service.get_rates_from_base("USD")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è API –∫–ª—é—á–∞
            mock_logger.warning.assert_called()
            warning_call = mock_logger.warning.call_args[0][0]
            assert "üîë APILayer API key not configured" in warning_call
            assert "Service: FiatRatesService" in warning_call
            assert "Base currency: USD" in warning_call
            assert "Fallback available: True" in warning_call
    
    @pytest.mark.asyncio
    async def test_successful_request_logging(self, service, mock_logger):
        """–¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        # –ú–æ–∫–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –∏ –æ—Ç–≤–µ—Ç
        mock_response = AsyncMock()
        mock_response.status = 200
        mock_response.json = AsyncMock(return_value={
            "success": True,
            "rates": {"EUR": 0.85, "GBP": 0.75}
        })
        
        # –°–æ–∑–¥–∞–µ–º context manager mock
        mock_context = AsyncMock()
        mock_context.__aenter__ = AsyncMock(return_value=mock_response)
        mock_context.__aexit__ = AsyncMock(return_value=None)
        
        mock_session = AsyncMock()
        mock_session.get = AsyncMock(return_value=mock_context)
        service.session = mock_session
        
        # –ú–æ–∫–∏—Ä—É–µ–º rate limiting –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
        with patch.object(service, '_rate_limit') as mock_rate_limit, \
             patch.object(service, '_cache_rates') as mock_cache:
            
            result = await service.get_rates_from_base("USD")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            mock_logger.info.assert_called()
            info_calls = [call[0][0] for call in mock_logger.info.call_args_list]
            
            # –ò—â–µ–º –ª–æ–≥ –∑–∞–ø—É—Å–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
            start_log = next((log for log in info_calls if "üöÄ Starting APILayer request" in log), None)
            assert start_log is not None
            assert "Max retries: 3" in start_log
            assert "Base delay: 5s" in start_log
            
            # –ò—â–µ–º –ª–æ–≥ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            success_log = next((log for log in info_calls if "‚úÖ APILayer SUCCESS" in log), None)
            assert success_log is not None
            assert "Rates received: 2" in success_log
            assert "Attempt: 1/3" in success_log
    
    @pytest.mark.asyncio
    async def test_api_error_logging(self, service, mock_logger):
        """–¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫ API"""
        # –ú–æ–∫–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –∏ –æ—Ç–≤–µ—Ç —Å –æ—à–∏–±–∫–æ–π
        mock_response = AsyncMock()
        mock_response.status = 200
        mock_response.json = AsyncMock(return_value={
            "success": False,
            "error": {
                "code": "invalid_base",
                "info": "Invalid base currency specified"
            }
        })
        
        # –°–æ–∑–¥–∞–µ–º context manager mock
        mock_context = AsyncMock()
        mock_context.__aenter__ = AsyncMock(return_value=mock_response)
        mock_context.__aexit__ = AsyncMock(return_value=None)
        
        mock_session = AsyncMock()
        mock_session.get = AsyncMock(return_value=mock_context)
        service.session = mock_session
        
        # –ú–æ–∫–∏—Ä—É–µ–º fallback
        with patch.object(service, '_rate_limit') as mock_rate_limit, \
             patch.object(service, '_get_fallback_rates') as mock_fallback:
            mock_fallback.return_value = {"EUR": 0.85}
            
            result = await service.get_rates_from_base("USD")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ API
            mock_logger.error.assert_called()
            error_call = mock_logger.error.call_args[0][0]
            assert "‚ùå APILayer API ERROR for USD" in error_call
            assert "Error code: invalid_base" in error_call
            assert "Error message: Invalid base currency specified" in error_call
            assert "Full response:" in error_call
    
    @pytest.mark.asyncio
    async def test_authentication_error_logging(self, service, mock_logger):
        """–¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        # –ú–æ–∫–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –∏ –æ—Ç–≤–µ—Ç 401
        mock_response = AsyncMock()
        mock_response.status = 401
        mock_response.headers = {'content-type': 'application/json'}
        mock_response.url = "https://api.apilayer.com/exchangerates_data/latest"
        
        # –°–æ–∑–¥–∞–µ–º context manager mock
        mock_context = AsyncMock()
        mock_context.__aenter__ = AsyncMock(return_value=mock_response)
        mock_context.__aexit__ = AsyncMock(return_value=None)
        
        mock_session = AsyncMock()
        mock_session.get = AsyncMock(return_value=mock_context)
        service.session = mock_session
        
        # –ú–æ–∫–∏—Ä—É–µ–º fallback
        with patch.object(service, '_rate_limit') as mock_rate_limit, \
             patch.object(service, '_get_fallback_rates') as mock_fallback:
            mock_fallback.return_value = {"EUR": 0.85}
            
            result = await service.get_rates_from_base("USD")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            mock_logger.error.assert_called()
            error_call = mock_logger.error.call_args[0][0]
            assert "üîí APILayer AUTHENTICATION FAILED for USD" in error_call
            assert "Status: 401" in error_call
            assert "API key present: True" in error_call
            assert "API key length:" in error_call
    
    @pytest.mark.asyncio
    async def test_rate_limit_error_logging(self, service, mock_logger):
        """–¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫ rate limiting"""
        # –ú–æ–∫–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –∏ –æ—Ç–≤–µ—Ç 429
        mock_response = AsyncMock()
        mock_response.status = 429
        mock_response.headers = {'Retry-After': '30', 'content-type': 'application/json'}
        
        # –°–æ–∑–¥–∞–µ–º context manager mock
        mock_context = AsyncMock()
        mock_context.__aenter__ = AsyncMock(return_value=mock_response)
        mock_context.__aexit__ = AsyncMock(return_value=None)
        
        mock_session = AsyncMock()
        mock_session.get = AsyncMock(return_value=mock_context)
        service.session = mock_session
        
        # –ú–æ–∫–∏—Ä—É–µ–º fallback –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–ª—É—á–∞—è
        with patch.object(service, '_rate_limit') as mock_rate_limit, \
             patch.object(service, '_get_fallback_rates') as mock_fallback:
            mock_fallback.return_value = {"EUR": 0.85}
            
            result = await service.get_rates_from_base("USD")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ rate limit
            mock_logger.warning.assert_called()
            warning_calls = [call[0][0] for call in mock_logger.warning.call_args_list]
            
            # –ò—â–µ–º –ª–æ–≥ rate limit
            rate_limit_log = next((log for log in warning_calls if "‚è±Ô∏è APILayer RATE LIMIT" in log), None)
            assert rate_limit_log is not None
            assert "Status: 429" in rate_limit_log
            assert "Retry-After header: 30s" in rate_limit_log
            assert "Exponential delay:" in rate_limit_log
    
    @pytest.mark.asyncio
    async def test_network_error_logging(self, service, mock_logger):
        """–¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫"""
        # –ú–æ–∫–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç ClientError
        mock_session = AsyncMock()
        network_error = ClientError("Connection timeout")
        mock_session.get.side_effect = network_error
        
        service.session = mock_session
        
        # –ú–æ–∫–∏—Ä—É–µ–º fallback
        with patch.object(service, '_rate_limit') as mock_rate_limit, \
             patch.object(service, '_get_fallback_rates') as mock_fallback:
            mock_fallback.return_value = {"EUR": 0.85}
            
            result = await service.get_rates_from_base("USD")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–µ–≤–æ–π –æ—à–∏–±–∫–∏
            mock_logger.error.assert_called()
            error_calls = [call[0][0] for call in mock_logger.error.call_args_list]
            
            # –ò—â–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –ª–æ–≥ –æ—à–∏–±–∫–∏
            detailed_error_log = next((log for log in error_calls if "üö® NETWORK ERROR" in log), None)
            assert detailed_error_log is not None
            
            # –ò—â–µ–º –ª–æ–≥ —Å–µ—Ç–µ–≤–æ–π –æ—à–∏–±–∫–∏
            network_error_log = next((log for log in error_calls if "üåê NETWORK ERROR" in log), None)
            assert network_error_log is not None
            assert "Error type: ClientError" in network_error_log
            assert "Connection timeout" in network_error_log
    
    @pytest.mark.asyncio
    async def test_unexpected_error_logging(self, service, mock_logger):
        """–¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫"""
        # –ú–æ–∫–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—É—é –æ—à–∏–±–∫—É
        mock_session = AsyncMock()
        unexpected_error = RuntimeError("Unexpected system error")
        mock_session.get.side_effect = unexpected_error
        
        service.session = mock_session
        
        # –ú–æ–∫–∏—Ä—É–µ–º fallback
        with patch.object(service, '_rate_limit') as mock_rate_limit, \
             patch.object(service, '_get_fallback_rates') as mock_fallback:
            mock_fallback.return_value = {"EUR": 0.85}
            
            result = await service.get_rates_from_base("USD")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–π –æ—à–∏–±–∫–∏
            mock_logger.critical.assert_called()
            critical_call = mock_logger.critical.call_args[0][0]
            assert "üö® UNEXPECTED ERROR for USD" in critical_call
            assert "Error type: RuntimeError" in critical_call
            assert "Unexpected system error" in critical_call
            assert "Python version:" in critical_call
    
    @pytest.mark.asyncio
    async def test_json_decode_error_logging(self, service, mock_logger):
        """–¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON"""
        # –ú–æ–∫–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –∏ –æ—Ç–≤–µ—Ç —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º JSON
        mock_response = AsyncMock()
        mock_response.status = 200
        mock_response.json = AsyncMock(side_effect=json.JSONDecodeError("Invalid JSON", "doc", 0))
        mock_response.text = AsyncMock(return_value="Invalid JSON response")
        
        # –°–æ–∑–¥–∞–µ–º context manager mock
        mock_context = AsyncMock()
        mock_context.__aenter__ = AsyncMock(return_value=mock_response)
        mock_context.__aexit__ = AsyncMock(return_value=None)
        
        mock_session = AsyncMock()
        mock_session.get = AsyncMock(return_value=mock_context)
        service.session = mock_session
        
        # –ú–æ–∫–∏—Ä—É–µ–º fallback
        with patch.object(service, '_rate_limit') as mock_rate_limit, \
             patch.object(service, '_get_fallback_rates') as mock_fallback:
            mock_fallback.return_value = {"EUR": 0.85}
            
            result = await service.get_rates_from_base("USD")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ JSON
            mock_logger.error.assert_called()
            error_calls = [call[0][0] for call in mock_logger.error.call_args_list]
            
            # –ò—â–µ–º –ª–æ–≥ JSON –æ—à–∏–±–∫–∏
            json_error_log = next((log for log in error_calls if "üö® Invalid JSON response" in log), None)
            assert json_error_log is not None
            assert "Invalid JSON response" in json_error_log
    
    @pytest.mark.asyncio
    async def test_fallback_success_logging(self, service, mock_logger):
        """–¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è fallback –¥–∞–Ω–Ω—ã—Ö"""
        service.api_key = None  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
        
        result = await service.get_rates_from_base("USD")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ fallback
        mock_logger.info.assert_called()
        info_calls = [call[0][0] for call in mock_logger.info.call_args_list]
        
        # –ò—â–µ–º –ª–æ–≥ –∑–∞–≥—Ä—É–∑–∫–∏ fallback
        fallback_load_log = next((log for log in info_calls if "üóÑ LOADING FALLBACK RATES" in log), None)
        assert fallback_load_log is not None
        assert "Source: Static historical data" in fallback_load_log
        
        # –ò—â–µ–º –ª–æ–≥ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ fallback
        fallback_success_log = next((log for log in info_calls if "‚úÖ Fallback rates loaded" in log), None)
        assert fallback_success_log is not None
    
    @pytest.mark.asyncio
    async def test_health_check_logging(self, service, mock_logger):
        """–¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è health check"""
        # –ú–æ–∫–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π health check
        with patch.object(service, 'get_fiat_rate') as mock_get_rate:
            mock_get_rate.return_value = 0.85
            
            result = await service.health_check()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ health check
            mock_logger.info.assert_called()
            info_calls = [call[0][0] for call in mock_logger.info.call_args_list]
            
            # –ò—â–µ–º –ª–æ–≥ —Å—Ç–∞—Ä—Ç–∞ health check
            start_log = next((log for log in info_calls if "Performing APILayer health check" in log), None)
            assert start_log is not None
            
            # –ò—â–µ–º –ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è health check
            complete_log = next((log for log in info_calls if "APILayer health check completed" in log), None)
            assert complete_log is not None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            assert result['status'] == 'healthy'
            assert 'response_time_ms' in result
    
    def test_log_detailed_error_with_traceback(self, mock_logger):
        """–¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–∫–∏ —Å –ø–æ–ª–Ω—ã–º —Ç—Ä–µ–π—Å–±–µ–∫–æ–º"""
        try:
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É —Å —Ç—Ä–µ–π—Å–±–µ–∫–æ–º
            raise ValueError("Test error with traceback")
        except ValueError as e:
            result = log_detailed_error("TRACEBACK_TEST", e, "test context")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç—Ä–µ–π—Å–±–µ–∫ –∑–∞–ø–∏—Å–∞–Ω
            assert result['traceback'] != 'No traceback available'
            assert 'ValueError: Test error with traceback' in result['traceback']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            mock_logger.error.assert_called_once()
            call_args = mock_logger.error.call_args[0][0]
            assert "üö® TRACEBACK_TEST ERROR" in call_args
            assert "‚îî‚îÄ Traceback:" in call_args


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    pytest.main([__file__, "-v"])