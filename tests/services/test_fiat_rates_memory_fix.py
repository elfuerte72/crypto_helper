#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è Memory Leak –≤ FiatRatesService
TASK-PERF-001: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å UnifiedCacheManager
"""

import pytest
import asyncio
import time
import sys
import os
from unittest.mock import AsyncMock, patch

# Add src directory to path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', '..', 'src'))

from services.fiat_rates_service import FiatRatesService, fiat_rates_service
from services.cache_manager import rates_cache
from config import config


class TestFiatRatesMemoryLeakFix:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è FiatRatesService —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    
    @pytest.fixture
    async def service(self):
        """–°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        service = FiatRatesService()
        await service.start_session()
        yield service
        await service.close_session()
    
    @pytest.mark.asyncio
    async def test_cache_usage_in_get_rates_from_base(self, service):
        """–¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫—ç—à–∞ –≤ get_rates_from_base"""
        print("üß™ Test 1: Cache usage in get_rates_from_base")
        
        # –û—á–∏—â–∞–µ–º –∫—ç—à
        await service.clear_cache()
        
        # –ú–æ–∫–∞–µ–º API –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        test_rates = {"EUR": 0.85, "RUB": 100.0, "GBP": 0.75}
        
        with patch.object(service.session, 'get') as mock_get:
            # –ú–æ–∫–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π API –æ—Ç–≤–µ—Ç
            mock_response = AsyncMock()
            mock_response.status = 200
            mock_response.json.return_value = {
                'success': True,
                'rates': test_rates
            }
            mock_get.return_value.__aenter__.return_value = mock_response
            
            # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å - –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ API
            initial_stats = service.get_cache_stats()
            rates1 = await service.get_rates_from_base("USD")
            
            assert rates1 == test_rates, "Should return mocked rates"
            
            # –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å - –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à
            rates2 = await service.get_rates_from_base("USD")
            
            assert rates2 == test_rates, "Should return cached rates"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞
            final_stats = service.get_cache_stats()
            
            print(f"üìä Initial cache hits: {initial_stats['total_hits']}")
            print(f"üìä Final cache hits: {final_stats['total_hits']}")
            
            # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º –æ–¥–∏–Ω cache hit
            assert final_stats['total_hits'] > initial_stats['total_hits'], \
                "Cache should have at least one hit from second request"
            
            # API –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ (–ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å)
            assert mock_get.call_count == 1, "API should be called only once due to caching"
            
            print("‚úÖ Cache is working correctly in get_rates_from_base")
    
    @pytest.mark.asyncio
    async def test_cache_ttl_expiration(self, service):
        """–¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è TTL –≤ –∫—ç—à–µ"""
        print("üß™ Test 2: Cache TTL expiration")
        
        # –û—á–∏—â–∞–µ–º –∫—ç—à
        await service.clear_cache()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à –≤—Ä—É—á–Ω—É—é —Å –∫–æ—Ä–æ—Ç–∫–∏–º TTL
        test_rates = {"EUR": 0.85, "RUB": 100.0}
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ –∫—ç—à—É –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ TTL
        rates_cache.set("rates_USD", test_rates, ttl=1)  # 1 —Å–µ–∫—É–Ω–¥–∞ TTL
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å
        cached_rates = await service._get_cached_rates("USD")
        assert cached_rates == test_rates, "Should return cached data immediately"
        
        # –ñ–¥–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏—è TTL
        time.sleep(2)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã
        expired_rates = await service._get_cached_rates("USD")
        assert expired_rates is None, "Cached data should expire after TTL"
        
        print("‚úÖ TTL expiration works correctly")
    
    @pytest.mark.asyncio
    async def test_cache_size_limit_with_real_service(self, service):
        """–¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∫—ç—à–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º —Å–µ—Ä–≤–∏—Å–µ"""
        print("üß™ Test 3: Cache size limit with real service")
        
        # –û—á–∏—â–∞–µ–º –∫—ç—à
        await service.clear_cache()
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –∫—ç—à –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä
        currencies = ['USD', 'EUR', 'GBP', 'JPY', 'CAD', 'AUD', 'CHF', 'CNY']
        test_data = {}
        
        for base_currency in currencies:
            rates = {target: 1.0 + ord(target[0]) * 0.01 for target in currencies if target != base_currency}
            test_data[base_currency] = rates
            await service._cache_rates(base_currency, rates)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –µ—â–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –∫—ç—à–∞
        for i in range(config.CACHE_MAX_SIZE):
            extra_rates = {"EXTRA": float(i)}
            await service._cache_rates(f"EXTRA_{i}", extra_rates)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç
        final_stats = service.get_cache_stats()
        
        print(f"üìä Cache entries: {final_stats['current_entries']}/{final_stats['max_entries']}")
        print(f"üìä Memory usage: {final_stats['memory_usage_mb']:.2f}MB")
        
        assert final_stats['current_entries'] <= final_stats['max_entries'], \
            f"Cache size {final_stats['current_entries']} exceeds limit {final_stats['max_entries']}"
        
        print("‚úÖ Cache size limit enforced correctly")
    
    @pytest.mark.asyncio
    async def test_memory_monitoring_accuracy(self, service):
        """–¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–∞–º—è—Ç–∏"""
        print("üß™ Test 4: Memory monitoring accuracy")
        
        # –û—á–∏—â–∞–µ–º –∫—ç—à –∏ –ø–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        await service.clear_cache()
        empty_stats = service.get_cache_stats()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        large_data = {
            "EUR": 0.85,
            "RUB": 100.0,
            "GBP": 0.75,
            "JPY": 149.0,
            "large_string": "x" * 10000  # 10KB —Å—Ç—Ä–æ–∫–∞
        }
        
        await service._cache_rates("MEMORY_TEST", large_data)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        filled_stats = service.get_cache_stats()
        
        print(f"üìä Empty cache memory: {empty_stats['memory_usage_mb']:.4f}MB")
        print(f"üìä Filled cache memory: {filled_stats['memory_usage_mb']:.4f}MB")
        print(f"üìä Memory increase: {filled_stats['memory_usage_mb'] - empty_stats['memory_usage_mb']:.4f}MB")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–∞–º—è—Ç—å —É–≤–µ–ª–∏—á–∏–ª–∞—Å—å
        assert filled_stats['memory_usage_mb'] > empty_stats['memory_usage_mb'], \
            "Memory usage should increase when adding data"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å —Ä–∞–∑—É–º–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
        memory_increase_bytes = (filled_stats['memory_usage_mb'] - empty_stats['memory_usage_mb']) * 1024 * 1024
        assert memory_increase_bytes > 5000, "Memory increase should be at least 5KB for large data"  # –ú–∏–Ω–∏–º—É–º –¥–ª—è –Ω–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        
        print("‚úÖ Memory monitoring works accurately")
    
    @pytest.mark.asyncio
    async def test_concurrent_cache_access(self, service):
        """–¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ concurrent –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—ç—à—É"""
        print("üß™ Test 5: Concurrent cache access safety")
        
        await service.clear_cache()
        
        async def cache_worker(worker_id: int):
            """–í–æ—Ä–∫–µ—Ä –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—ç—à—É"""
            for i in range(10):
                # –ü–æ–ø–µ—Ä–µ–º–µ–Ω–Ω–æ —á–∏—Ç–∞–µ–º –∏ –ø–∏—à–µ–º –≤ –∫—ç—à
                await service._cache_rates(f"worker_{worker_id}_key_{i}", {"rate": float(worker_id * 100 + i)})
                cached_data = await service._get_cached_rates(f"worker_{worker_id}_key_{i}")
                assert cached_data is not None, f"Worker {worker_id} should find its own data"
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤
        workers = [cache_worker(i) for i in range(5)]
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        await asyncio.gather(*workers)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        final_stats = service.get_cache_stats()
        
        print(f"üìä Final cache entries: {final_stats['current_entries']}")
        print(f"üìä Total hits: {final_stats['total_hits']}")
        print(f"üìä Total misses: {final_stats['total_misses']}")
        
        # –ö—ç—à –¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞—Ç—å—Å—è –≤ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        assert final_stats['current_entries'] >= 0, "Cache should remain in consistent state"
        assert final_stats['current_entries'] <= final_stats['max_entries'], "Cache size should not exceed limit"
        
        print("‚úÖ Concurrent access handled safely")
    
    @pytest.mark.asyncio
    async def test_cache_stats_comprehensive(self, service):
        """–¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ—Ç—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞"""
        print("üß™ Test 6: Comprehensive cache statistics")
        
        await service.clear_cache()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        await service._cache_rates("STATS_USD", {"EUR": 0.85})  # Set
        await service._get_cached_rates("STATS_USD")  # Hit
        await service._get_cached_rates("NONEXISTENT")  # Miss
        
        stats = service.get_cache_stats()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –æ–∂–∏–¥–∞–µ–º—ã—Ö –ø–æ–ª–µ–π
        expected_fields = [
            'service', 'timestamp', 'cache_manager', 'current_entries', 'max_entries',
            'utilization_percent', 'hit_ratio_percent', 'total_hits', 'total_misses',
            'memory_usage_mb', 'memory_usage_bytes', 'ttl_cleanups', 'lru_evictions',
            'ttl_seconds', 'cleanup_interval_seconds', 'status'
        ]
        
        for field in expected_fields:
            assert field in stats, f"Stats should contain {field}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –∏ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –∑–Ω–∞—á–µ–Ω–∏–π
        assert isinstance(stats['current_entries'], int), "current_entries should be int"
        assert isinstance(stats['max_entries'], int), "max_entries should be int"
        assert 0 <= stats['utilization_percent'] <= 100, "utilization_percent should be 0-100"
        assert 0 <= stats['hit_ratio_percent'] <= 100, "hit_ratio_percent should be 0-100"
        assert stats['memory_usage_mb'] >= 0, "memory_usage_mb should be non-negative"
        assert stats['status'] in ['healthy', 'warning'], "status should be healthy or warning"
        
        print(f"üìä Cache stats structure validation passed")
        print(f"üìä Service: {stats['service']}")
        print(f"üìä Cache manager: {stats['cache_manager']}")
        print(f"üìä Utilization: {stats['utilization_percent']:.1f}%")
        print(f"üìä Hit ratio: {stats['hit_ratio_percent']:.1f}%")
        
        print("‚úÖ Cache statistics are comprehensive and accurate")


class TestMemoryLeakRegression:
    """–†–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ Memory Leak"""
    
    @pytest.mark.asyncio
    async def test_no_unlimited_cache_growth(self):
        """–¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –±–µ–∑–≥—Ä–∞–Ω–∏—á–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞ –∫—ç—à–∞"""
        print("üß™ Test 7: No unlimited cache growth regression test")
        
        service = FiatRatesService()
        await service.clear_cache()
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–∞–∫ –≤ production
        base_currencies = ['USD', 'EUR', 'GBP', 'JPY', 'CAD', 'AUD', 'CHF', 'CNY', 'RUB', 'ZAR']
        
        initial_stats = service.get_cache_stats()
        print(f"üìä Initial memory: {initial_stats['memory_usage_mb']:.4f}MB")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–Ω–æ–≥–æ –¥–∞–Ω–Ω—ã—Ö (—Å–∏–º—É–ª–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ —Ä–∞–±–æ—Ç—ã)
        for cycle in range(20):  # 20 —Ü–∏–∫–ª–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤
            for base in base_currencies:
                # –ö–∞–∂–¥—ã–π —Ü–∏–∫–ª –¥–æ–±–∞–≤–ª—è–µ–º –∫—É—Ä—Å—ã –¥–ª—è –≤—Å–µ—Ö –≤–∞–ª—é—Ç
                rates = {target: 1.0 + cycle * 0.1 + ord(target[0]) * 0.01 
                        for target in base_currencies if target != base}
                await service._cache_rates(f"{base}_cycle_{cycle}", rates)
        
        final_stats = service.get_cache_stats()
        print(f"üìä Final memory: {final_stats['memory_usage_mb']:.4f}MB")
        print(f"üìä Final entries: {final_stats['current_entries']}/{final_stats['max_entries']}")
        print(f"üìä LRU evictions: {final_stats['lru_evictions']}")
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –∫—ç—à –ù–ï –¥–æ–ª–∂–µ–Ω —Ä–∞—Å—Ç–∏ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
        assert final_stats['current_entries'] <= config.CACHE_MAX_SIZE, \
            f"MEMORY LEAK DETECTED: Cache has {final_stats['current_entries']} entries, limit is {config.CACHE_MAX_SIZE}"
        
        # –î–æ–ª–∂–Ω—ã –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å evictions –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
        assert final_stats['lru_evictions'] > 0, \
            "LRU evictions should occur to prevent unlimited growth"
        
        # –ü–∞–º—è—Ç—å –Ω–µ –¥–æ–ª–∂–Ω–∞ —Ä–∞—Å—Ç–∏ –ª–∏–Ω–µ–π–Ω–æ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ–ø–µ—Ä–∞—Ü–∏–π
        memory_growth = final_stats['memory_usage_mb'] - initial_stats['memory_usage_mb']
        assert memory_growth < 50, \
            f"Memory growth {memory_growth:.2f}MB is too high - possible memory leak"
        
        print("‚úÖ No unlimited cache growth detected - Memory leak is FIXED!")
    
    def test_old_cache_attributes_removed(self):
        """–¢–µ—Å—Ç 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Å—Ç–∞—Ä—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã –∫—ç—à–∞ —É–¥–∞–ª–µ–Ω—ã"""
        print("üß™ Test 8: Old cache attributes removed")
        
        service = FiatRatesService()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç–∞—Ä—ã–π self._cache –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
        assert not hasattr(service, '_cache') or not service._cache, \
            "Old self._cache attribute should not be used - this would cause memory leak"
        
        print("‚úÖ Old cache attributes properly removed")
    
    @pytest.mark.asyncio
    async def test_cache_cleanup_on_service_destruction(self):
        """–¢–µ—Å—Ç 9: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞"""
        print("üß™ Test 9: Cache cleanup on service destruction")
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å
        temp_service = FiatRatesService()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        await temp_service._cache_rates("TEMP_USD", {"EUR": 0.85})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å
        cached_data = await temp_service._get_cached_rates("TEMP_USD")
        assert cached_data is not None, "Data should be cached"
        
        # –û—á–∏—â–∞–µ–º –∫—ç—à —Å–µ—Ä–≤–∏—Å–∞
        clear_result = await temp_service.clear_cache()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã
        assert clear_result['entries_removed'] > 0, "Should remove cached entries"
        
        cleared_data = await temp_service._get_cached_rates("TEMP_USD")
        assert cleared_data is None, "Data should be cleared"
        
        print("‚úÖ Cache cleanup works correctly")


if __name__ == "__main__":
    print("üß™ Running FiatRatesService Memory Leak Fix Integration Tests")
    print("=" * 70)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    pytest.main([__file__, "-v", "-s"])