#!/usr/bin/env python3
"""
–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ FiatRatesService
Tests TASK-CRYPTO-003: –£–ª—É—á—à–µ–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è API –æ—à–∏–±–æ–∫
"""

import pytest
import asyncio
import logging
from unittest.mock import Mock, patch
from io import StringIO

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
import sys
import os
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.dirname(__file__))))

from src.services.fiat_rates_service import FiatRatesService, log_detailed_error


class TestLoggingFunctional:
    """–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    @pytest.mark.asyncio
    async def test_api_key_missing_scenario(self):
        """–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç: —Å—Ü–µ–Ω–∞—Ä–∏–π –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è API –∫–ª—é—á–∞"""
        service = FiatRatesService()
        service.api_key = None  # –ù–∞–º–µ—Ä–µ–Ω–Ω–æ —É–±–∏—Ä–∞–µ–º API –∫–ª—é—á
        
        captured_logs = []
        
        def capture_log(msg):
            captured_logs.append(msg)
        
        with patch('src.services.fiat_rates_service.logger') as mock_logger:
            mock_logger.warning = Mock(side_effect=capture_log)
            mock_logger.info = Mock(side_effect=capture_log)
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –±–µ–∑ API –∫–ª—é—á–∞
            result = await service.get_rates_from_base("USD")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ fallback –¥–∞–Ω–Ω—ã–µ
            assert result is not None
            assert isinstance(result, dict)
            assert len(result) > 0
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            log_messages = ' '.join(captured_logs)
            assert "üîë APILayer API key not configured" in log_messages
            assert "Service: FiatRatesService" in log_messages
            assert "‚úÖ Fallback rates loaded" in log_messages
    
    @pytest.mark.asyncio
    async def test_fallback_rates_detailed_logging(self):
        """–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç: –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ fallback rates"""
        service = FiatRatesService()
        
        captured_logs = []
        
        def capture_log(msg):
            captured_logs.append(msg)
        
        with patch('src.services.fiat_rates_service.logger') as mock_logger:
            mock_logger.info = Mock(side_effect=capture_log)
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É fallback –∫—É—Ä—Å–æ–≤
            result = await service._get_fallback_rates("USD")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            assert result is not None
            assert isinstance(result, dict)
            assert "EUR" in result
            assert "GBP" in result
            assert "RUB" in result
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            log_messages = ' '.join(captured_logs)
            assert "üóÑ LOADING FALLBACK RATES for USD" in log_messages
            assert "Source: Static historical data" in log_messages
            assert "Reason: APILayer unavailable" in log_messages
    
    @pytest.mark.asyncio
    async def test_get_fiat_rate_with_logging(self):
        """–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç: –ø–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        service = FiatRatesService()
        
        captured_logs = []
        
        def capture_log(msg):
            captured_logs.append(msg)
        
        with patch('src.services.fiat_rates_service.logger') as mock_logger:
            mock_logger.info = Mock(side_effect=capture_log)
            mock_logger.warning = Mock(side_effect=capture_log)
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ USD/EUR
            rate = await service.get_fiat_rate("USD", "EUR")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            assert rate is not None
            assert isinstance(rate, float)
            assert rate > 0
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            log_messages = ' '.join(captured_logs)
            assert "Getting fiat rate for USD/EUR" in log_messages
    
    @pytest.mark.asyncio
    async def test_health_check_with_logging(self):
        """–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç: health check —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        service = FiatRatesService()
        
        captured_logs = []
        
        def capture_log(msg):
            captured_logs.append(msg)
        
        with patch('src.services.fiat_rates_service.logger') as mock_logger:
            mock_logger.info = Mock(side_effect=capture_log)
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º health check
            result = await service.health_check()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            assert result is not None
            assert 'status' in result
            assert 'timestamp' in result
            assert 'service' in result
            assert result['service'] == 'apilayer_fiat_rates'
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            log_messages = ' '.join(captured_logs)
            assert "Performing APILayer health check" in log_messages
            assert "APILayer health check completed" in log_messages
    
    def test_detailed_error_logging_function(self):
        """–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç: —Ñ—É–Ω–∫—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫"""
        captured_logs = []
        
        def capture_log(msg):
            captured_logs.append(msg)
        
        with patch('src.services.fiat_rates_service.logger') as mock_logger:
            mock_logger.error = Mock(side_effect=capture_log)
            
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É
            try:
                raise ConnectionError("Network connection failed")
            except ConnectionError as e:
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
                result = log_detailed_error("NETWORK", e, "APILayer request")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                assert result['type'] == "NETWORK"
                assert result['class'] == "ConnectionError"
                assert result['message'] == "Network connection failed"
                assert result['context'] == "APILayer request"
                assert 'traceback' in result
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
                log_messages = ' '.join(captured_logs)
                assert "üö® NETWORK ERROR in APILayer request:" in log_messages
                assert "Type: ConnectionError" in log_messages
                assert "Message: Network connection failed" in log_messages
                assert "‚îî‚îÄ Traceback:" in log_messages
    
    @pytest.mark.asyncio
    async def test_exchange_rate_object_creation(self):
        """–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç: —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ ExchangeRate"""
        service = FiatRatesService()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ ExchangeRate –æ–±—ä–µ–∫—Ç–∞
        exchange_rate = await service.create_fiat_exchange_rate("USD", "EUR", 0.85)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        assert exchange_rate is not None
        assert exchange_rate.pair == "USD/EUR"
        assert exchange_rate.rate == 0.85
        assert exchange_rate.source == 'apilayer'
        assert exchange_rate.timestamp is not None
    
    @pytest.mark.asyncio
    async def test_get_fiat_exchange_rate_with_fallback(self):
        """–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç: –ø–æ–ª—É—á–µ–Ω–∏–µ ExchangeRate —Å fallback"""
        service = FiatRatesService()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ ExchangeRate –æ–±—ä–µ–∫—Ç–∞
        exchange_rate = await service.get_fiat_exchange_rate("USD/EUR")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        assert exchange_rate is not None
        assert exchange_rate.pair == "USD/EUR"
        assert exchange_rate.rate > 0
        assert exchange_rate.source in ['apilayer', 'apilayer_fallback']
        assert exchange_rate.timestamp is not None
    
    @pytest.mark.asyncio
    async def test_multiple_currency_pairs(self):
        """–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç: –ø–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä"""
        service = FiatRatesService()
        
        currency_pairs = [
            ("USD", "EUR"),
            ("EUR", "GBP"), 
            ("USD", "RUB"),
            ("GBP", "USD")
        ]
        
        captured_logs = []
        
        def capture_log(msg):
            captured_logs.append(msg)
        
        with patch('src.services.fiat_rates_service.logger') as mock_logger:
            mock_logger.info = Mock(side_effect=capture_log)
            mock_logger.warning = Mock(side_effect=capture_log)
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä
            for from_curr, to_curr in currency_pairs:
                rate = await service.get_fiat_rate(from_curr, to_curr)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                assert rate is not None
                assert isinstance(rate, float)
                assert rate > 0
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
                expected_log = f"Getting fiat rate for {from_curr}/{to_curr}"
                log_messages = ' '.join(captured_logs)
                assert expected_log in log_messages
    
    @pytest.mark.asyncio
    async def test_caching_functionality(self):
        """–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç: —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
        service = FiatRatesService()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
        test_rates = {"EUR": 0.85, "GBP": 0.75}
        await service._cache_rates("USD", test_rates)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–∑ –∫—ç—à–∞
        cached_rates = await service._get_cached_rates("USD")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        assert cached_rates is not None
        assert cached_rates == test_rates
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏–µ –∫—ç—à–∞ (—Å–∏–º—É–ª–∏—Ä—É–µ–º)
        import time
        time.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        
        # –ö—ç—à –≤—Å–µ –µ—â–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–∫—Ç–∏–≤–µ–Ω (–≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ 5 –º–∏–Ω—É—Ç)
        cached_rates_2 = await service._get_cached_rates("USD")
        assert cached_rates_2 is not None


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    pytest.main([__file__, "-v"])