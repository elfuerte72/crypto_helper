#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API Rapira (–±–µ–∑ debug —Ä–µ–∂–∏–º–∞)
"""

import asyncio
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
src_path = Path(__file__).parent.parent / 'src'
sys.path.insert(0, str(src_path))

from services.api_service import APIService, RapiraAPIError
from config import config
from utils.logger import get_api_logger

logger = get_api_logger()


async def test_real_api():
    """–¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ API"""
    print("üåê –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π Rapira API...")
    
    # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º debug —Ä–µ–∂–∏–º
    original_debug = config.DEBUG_MODE
    config.DEBUG_MODE = False
    
    try:
        async with APIService() as api:
            # Health check
            print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º health check...")
            health = await api.health_check()
            print(f"   –°—Ç–∞—Ç—É—Å: {health['status']}")
            print(f"   –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {health.get('response_time_ms', 'N/A')}ms")
            print(f"   –î–æ—Å—Ç—É–ø–Ω–æ –∫—É—Ä—Å–æ–≤: {health.get('rates_available', 'N/A')}")
            
            if health['status'] != 'healthy':
                print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {health.get('message', 'N/A')}")
                return False
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫—É—Ä—Å–æ–≤
            print("\nüìä –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫—É—Ä—Å—ã...")
            rates = await api.get_all_rates()
            
            if rates:
                print(f"   –ü–æ–ª—É—á–µ–Ω–æ {len(rates)} –∫—É—Ä—Å–æ–≤")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫—É—Ä—Å–æ–≤
                count = 0
                for symbol, rate in rates.items():
                    if count >= 5:
                        break
                    print(f"   {symbol}: {rate.rate} (bid: {rate.bid}, ask: {rate.ask})")
                    count += 1
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–∞—Ä—ã
                print("\nüí± –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–∞—Ä—ã...")
                test_pairs = ['USDT/RUB', 'BTC/USDT', 'ETH/USDT']
                
                for pair in test_pairs:
                    try:
                        rate = await api.get_exchange_rate(pair)
                        if rate:
                            print(f"   ‚úÖ {pair}: {rate.rate} (source: {rate.source})")
                        else:
                            print(f"   ‚ùå {pair}: –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    except Exception as e:
                        print(f"   ‚ùå {pair}: –æ—à–∏–±–∫–∞ - {e}")
                
                return True
            else:
                print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã")
                return False
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ API: {e}")
        return False
    finally:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º debug —Ä–µ–∂–∏–º
        config.DEBUG_MODE = original_debug


if __name__ == "__main__":
    try:
        success = asyncio.run(test_real_api())
        if success:
            print("\nüéâ –†–µ–∞–ª—å–Ω—ã–π API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        else:
            print("\n‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º API")
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)