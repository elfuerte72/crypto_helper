#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤–æ–π –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –ª–æ–≥–∏–∫–∏ –∫—É—Ä—Å–æ–≤
"""

import sys
import os
sys.path.insert(0, 'src')

from decimal import Decimal
from src.handlers.calculation_logic import calculate_banking_rate, MarginCalculator, BankingRates
from src.handlers.formatters import MessageFormatter
from src.handlers.currency_pairs import get_currency_pair_info

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –∫—É—Ä—Å–∞—Ö
test_exchange_rates = {
    'RUB/USD': {
        'rate': 0.01,
        'timestamp': '2024-01-15T10:00:00Z',
        'source': 'test'
    },
    'USD/RUB': {
        'rate': 100.0,
        'timestamp': '2024-01-15T10:00:00Z',
        'source': 'test'
    },
    'USDT/RUB': {
        'rate': 95.0,
        'timestamp': '2024-01-15T10:00:00Z',
        'source': 'test'
    },
    'EUR/RUB': {
        'rate': 110.0,
        'timestamp': '2024-01-15T10:00:00Z',
        'source': 'test'
    }
}

def test_rate_display():
    """–¢–µ—Å—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤...")
    
    test_pairs = [
        ('rubusd', 'RUB/USD'),
        ('usdrub', 'USD/RUB'),
        ('usdtrub', 'USDT/RUB'),
        ('eurrub', 'EUR/RUB')
    ]
    
    for pair_key, pair_name in test_pairs:
        pair_info = get_currency_pair_info(pair_key)
        if pair_info:
            rate = test_exchange_rates[pair_name]['rate']
            formatted = MessageFormatter._format_rate_display(pair_info, rate)
            print(f"  {pair_name}: {formatted}")
        else:
            print(f"  ‚ùå –ü–∞—Ä–∞ {pair_key} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    print()

def test_banking_rates():
    """–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –∫—É—Ä—Å–æ–≤"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –∫—É—Ä—Å–æ–≤...")
    
    base_rate = Decimal('100.0')  # USD/RUB
    margin = Decimal('3.0')  # 3% –Ω–∞—Ü–µ–Ω–∫–∞
    spread = Decimal('0.5')  # 0.5% —Å–ø—Ä—ç–¥
    
    banking_rates = MarginCalculator.calculate_banking_rates(
        base_rate, margin, spread
    )
    
    print(f"  –ë–∞–∑–æ–≤—ã–π –∫—É—Ä—Å: {banking_rates.base_rate}")
    print(f"  –ö—É—Ä—Å –ø–æ–∫—É–ø–∫–∏: {banking_rates.buy_rate}")
    print(f"  –ö—É—Ä—Å –ø—Ä–æ–¥–∞–∂–∏: {banking_rates.sell_rate}")
    print(f"  –ù–∞—Ü–µ–Ω–∫–∞: {banking_rates.margin_percent}%")
    print(f"  –°–ø—Ä—ç–¥: {banking_rates.spread_percent}%")
    print()

def test_calculation_result():
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞...")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º USD/RUB
    pair_info = get_currency_pair_info('usdrub')
    amount = Decimal('100.0')  # 100 USD
    margin = Decimal('3.0')  # 3% –Ω–∞—Ü–µ–Ω–∫–∞
    exchange_rate_data = test_exchange_rates['USD/RUB']
    
    result = calculate_banking_rate(
        pair_info, amount, margin, exchange_rate_data
    )
    
    print("  –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞:")
    print(f"    –°—É–º–º–∞: {result.amount} {result.base_currency}")
    print(f"    –ë–∞–∑–æ–≤—ã–π –∫—É—Ä—Å: {result.base_rate}")
    print(f"    –ö—É—Ä—Å –ø–æ–∫—É–ø–∫–∏: {result.banking_rates.buy_rate}")
    print(f"    –ö—É—Ä—Å –ø—Ä–æ–¥–∞–∂–∏: {result.banking_rates.sell_rate}")
    print(f"    –ü–æ –±–∞–∑–æ–≤–æ–º—É –∫—É—Ä—Å—É: {result.amount_base_rate} {result.quote_currency}")
    print(f"    –ü–æ –∫—É—Ä—Å—É –ø–æ–∫—É–ø–∫–∏: {result.amount_buy_rate} {result.quote_currency}")
    print(f"    –ü–æ –∫—É—Ä—Å—É –ø—Ä–æ–¥–∞–∂–∏: {result.amount_sell_rate} {result.quote_currency}")
    print(f"    –ü—Ä–∏–±—ã–ª—å –±–∞–Ω–∫–∞: {result.bank_profit} {result.quote_currency}")
    print()

def test_formatting():
    """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º RUB/USD - –ø—Ä–æ–±–ª–µ–º–Ω–∞—è –ø–∞—Ä–∞
    pair_info = get_currency_pair_info('rubusd')
    amount = Decimal('1000.0')  # 1000 RUB
    margin = Decimal('2.0')  # 2% –Ω–∞—Ü–µ–Ω–∫–∞
    exchange_rate_data = test_exchange_rates['RUB/USD']
    
    result = calculate_banking_rate(
        pair_info, amount, margin, exchange_rate_data
    )
    
    formatted = MessageFormatter.format_banking_calculation_result(result)
    print("  –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:")
    print(formatted)
    print()

def test_all_pairs():
    """–¢–µ—Å—Ç –≤—Å–µ—Ö –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä...")
    
    test_cases = [
        ('rubusd', 'RUB/USD', Decimal('1000.0')),
        ('usdrub', 'USD/RUB', Decimal('100.0')),
        ('usdtrub', 'USDT/RUB', Decimal('50.0')),
        ('eurrub', 'EUR/RUB', Decimal('100.0'))
    ]
    
    for pair_key, pair_name, amount in test_cases:
        print(f"\n  --- {pair_name} ---")
        pair_info = get_currency_pair_info(pair_key)
        if pair_info and pair_name in test_exchange_rates:
            exchange_rate_data = test_exchange_rates[pair_name]
            
            result = calculate_banking_rate(
                pair_info, amount, Decimal('2.5'), exchange_rate_data
            )
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫—É—Ä—Å
            base_rate_display = MessageFormatter._format_rate_display(
                pair_info, float(result.base_rate)
            )
            buy_rate_display = MessageFormatter._format_rate_display(
                pair_info, float(result.banking_rates.buy_rate)
            )
            sell_rate_display = MessageFormatter._format_rate_display(
                pair_info, float(result.banking_rates.sell_rate)
            )
            
            print(f"    –ë–∞–∑–æ–≤—ã–π –∫—É—Ä—Å: {base_rate_display}")
            print(f"    –ö—É—Ä—Å –ø–æ–∫—É–ø–∫–∏: {buy_rate_display}")
            print(f"    –ö—É—Ä—Å –ø—Ä–æ–¥–∞–∂–∏: {sell_rate_display}")
            print(f"    –°—É–º–º–∞: {amount} {result.base_currency}")
            print(f"    –†–µ–∑—É–ª—å—Ç–∞—Ç: {result.amount_sell_rate:.2f} {result.quote_currency}")
        else:
            print(f"    ‚ùå –ü–∞—Ä–∞ {pair_key} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

if __name__ == "__main__":
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –ª–æ–≥–∏–∫–∏ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç\n")
    
    test_rate_display()
    test_banking_rates()
    test_calculation_result()
    test_formatting()
    test_all_pairs()
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")