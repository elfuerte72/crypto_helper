#!/usr/bin/env python3
"""
Unit —Ç–µ—Å—Ç—ã –¥–ª—è UX —É–ª—É—á—à–µ–Ω–∏–π –∏ telegram fixes (TASK-CRYPTO-004)
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞:
- –ü–æ–∫–∞–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫—É—Ä—Å–æ–≤
- –ü–æ–Ω—è—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é  
- –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–º–µ–Ω—ã –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
"""

import pytest
import asyncio
from unittest.mock import AsyncMock, MagicMock, patch
from decimal import Decimal

import sys
import os
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src'))

from aiogram.types import Message, CallbackQuery, User, Chat, InlineKeyboardMarkup
from aiogram.exceptions import TelegramBadRequest

from handlers.formatters import (
    LoadingMessageFormatter, 
    UserFriendlyErrorFormatter, 
    SafeMessageEditor
)
from handlers.admin_flow import get_exchange_rate_with_loading
from handlers.fsm_states import Currency
from config import config


class TestUserFriendlyErrorFormatter:
    """–¢–µ—Å—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–Ω—è—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö"""
    
    def test_format_api_timeout_error(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–∫–∏ —Ç–∞–π–º–∞—É—Ç–∞ API"""
        result = UserFriendlyErrorFormatter.format_api_timeout_error(
            "Rapira API", Currency.RUB, Currency.USDT
        )
        
        assert "‚è±Ô∏è" in result
        assert "–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω" in result
        assert "RUB ‚Üí USDT" in result
        assert "Rapira API" in result
        assert "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã" in result
        assert "–ú–µ–¥–ª–µ–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ" in result
        assert "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ" in result
        assert "30-60 —Å–µ–∫—É–Ω–¥" in result
    
    def test_format_api_error_unauthorized(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ API"""
        result = UserFriendlyErrorFormatter.format_api_error(
            "APILayer", "Unauthorized: Invalid API key", 
            Currency.RUB, Currency.USD
        )
        
        assert "‚ùå" in result
        assert "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞" in result
        assert "RUB ‚Üí USD" in result
        assert "üîë –ü—Ä–æ–±–ª–µ–º–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π" in result
        assert "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É" in result
        assert "/admin_bot" in result
    
    def test_format_api_error_rate_limit(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–∫–∏ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤"""
        result = UserFriendlyErrorFormatter.format_api_error(
            "APILayer", "Rate limit exceeded: too many requests", 
            Currency.RUB, Currency.EUR
        )
        
        assert "‚ùå" in result
        assert "RUB ‚Üí EUR" in result
        assert "‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤" in result
        assert "—á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç" in result
    
    def test_format_api_error_invalid_pair(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–∫–∏ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–π –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã"""
        result = UserFriendlyErrorFormatter.format_api_error(
            "APILayer", "Currency pair not found", 
            Currency.USDT, Currency.THB
        )
        
        assert "‚ùå" in result
        assert "USDT ‚Üí THB" in result
        assert "‚ö†Ô∏è –í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞" in result
        assert "–Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è" in result
        assert "–¥—Ä—É–≥—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é" in result
    
    def test_format_api_error_generic(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—â–µ–π –æ—à–∏–±–∫–∏ API"""
        result = UserFriendlyErrorFormatter.format_api_error(
            "APILayer", "Service temporarily unavailable", 
            Currency.RUB, Currency.AED
        )
        
        assert "‚ùå" in result
        assert "RUB ‚Üí AED" in result
        assert "Service temporarily unavailable" in result
        assert "üí¨ –û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏" in result
        assert "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑" in result
    
    def test_format_unexpected_error(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–π –æ—à–∏–±–∫–∏"""
        result = UserFriendlyErrorFormatter.format_unexpected_error(
            Currency.RUB, Currency.ZAR
        )
        
        assert "üõ†Ô∏è" in result
        assert "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞" in result
        assert "RUB ‚Üí ZAR" in result
        assert "–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞" in result
        assert "–ß—Ç–æ –¥–µ–ª–∞—Ç—å" in result
        assert "–¥—Ä—É–≥—É—é –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É" in result
        assert "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É" in result
    
    def test_format_operation_cancelled(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        result = UserFriendlyErrorFormatter.format_operation_cancelled()
        
        assert "‚ùå" in result
        assert "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞" in result
        assert "–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É" in result
        assert "/admin_bot" in result
        assert "–Ω–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞" in result


class TestEnhancedLoadingMessageFormatter:
    """–¢–µ—Å—Ç—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–≥—Ä—É–∑–∫–∏"""
    
    def test_format_api_loading_message_with_cancel(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ—Ç–º–µ–Ω—ã"""
        result = LoadingMessageFormatter.format_api_loading_message_with_cancel("Rapira API")
        
        assert "üîÑ" in result
        assert "–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –æ—Ç Rapira API" in result
        assert "–∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É" in result
        assert "–Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥" in result
        assert "/cancel" in result
        assert "–æ—Ç–º–µ–Ω–∏—Ç—å" in result
    
    def test_format_loading_with_progress_start(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ –Ω–∞—á–∞–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        result = LoadingMessageFormatter.format_loading_with_progress(
            "–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö", 1, 3, show_cancel=True
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É: 1 –∏–∑ 3 < 3//2 (1.5), –ø–æ—ç—Ç–æ–º—É –±—É–¥–µ—Ç ‚è≥, –Ω–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞–µ—Ç—Å—è üîÑ
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –µ—Å—Ç—å –ª—é–±–æ–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π emoji
        assert ("‚è≥" in result or "üîÑ" in result)  # Emoji –¥–ª—è –Ω–∞—á–∞–ª–∞/–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
        assert "–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö" in result
        assert "33% (1/3)" in result
        assert "‚ñà" in result  # –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–∞—è —á–∞—Å—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
        assert "‚ñë" in result  # –ù–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–∞—è —á–∞—Å—Ç—å
        assert "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ" in result
        assert "/cancel" in result
    
    def test_format_loading_with_progress_middle(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        result = LoadingMessageFormatter.format_loading_with_progress(
            "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞", 2, 4, show_cancel=False
        )
        
        assert "üîÑ" in result  # Emoji –¥–ª—è —Å–µ—Ä–µ–¥–∏–Ω—ã
        assert "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞" in result
        assert "50% (2/4)" in result
        assert "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ" in result
        assert "/cancel" not in result  # –û—Ç–º–µ–Ω–∞ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è
    
    def test_format_loading_with_progress_complete(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        result = LoadingMessageFormatter.format_loading_with_progress(
            "–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞", 3, 3
        )
        
        assert "‚úÖ" in result  # Emoji –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        assert "–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞" in result
        assert "100% (3/3)" in result
        assert "–ì–æ—Ç–æ–≤–æ!" in result
        assert "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ" not in result
        assert "/cancel" not in result  # –ü—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ—Ç–º–µ–Ω–∞ –Ω–µ –Ω—É–∂–Ω–∞
    
    def test_create_progress_bar_empty(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—É—Å—Ç–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞"""
        result = LoadingMessageFormatter._create_progress_bar(0, 10, 10)
        
        assert result == "[‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë]"
    
    def test_create_progress_bar_half(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–ª–æ–≤–∏–Ω—É –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞"""
        result = LoadingMessageFormatter._create_progress_bar(5, 10, 10)
        
        assert result == "[‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë]"
    
    def test_create_progress_bar_full(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞"""
        result = LoadingMessageFormatter._create_progress_bar(10, 10, 10)
        
        assert result == "[‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà]"
    
    def test_create_progress_bar_custom_length(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –¥–ª–∏–Ω—ã"""
        result = LoadingMessageFormatter._create_progress_bar(1, 4, 8)
        
        assert len(result) == 10  # [8 —Å–∏–º–≤–æ–ª–æ–≤]
        assert result == "[‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë]"


class TestCancellationSupport:
    """–¢–µ—Å—Ç—ã –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–π"""
    
    @pytest.fixture
    def mock_message(self):
        """–°–æ–∑–¥–∞—Ç—å mock Message –æ–±—ä–µ–∫—Ç"""
        message = MagicMock(spec=Message)
        message.text = "Test message"
        message.edit_text = AsyncMock()
        return message
    
    @pytest.fixture
    def cancellation_token(self):
        """–°–æ–∑–¥–∞—Ç—å —Ç–æ–∫–µ–Ω –æ—Ç–º–µ–Ω—ã"""
        return asyncio.Event()
    
    @pytest.mark.asyncio
    async def test_get_exchange_rate_with_cancellation_early(
        self, mock_message, cancellation_token
    ):
        """–¢–µ—Å—Ç –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–æ –Ω–∞—á–∞–ª–∞ API –∑–∞–ø—Ä–æ—Å–∞"""
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –æ—Ç–º–µ–Ω—ã
        cancellation_token.set()
        
        with patch('handlers.admin_flow.SafeMessageEditor.safe_edit_message', new_callable=AsyncMock) as mock_edit:
            mock_edit.return_value = True
            
            result = await get_exchange_rate_with_loading(
                mock_message, Currency.RUB, Currency.USDT, cancellation_token
            )
        
        assert result is None
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–æ –ø–æ–∫–∞–∑–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ
        cancel_calls = [call for call in mock_edit.call_args_list 
                       if "–æ—Ç–º–µ–Ω–µ–Ω–∞" in str(call)]
        assert len(cancel_calls) > 0
    
    @pytest.mark.asyncio
    async def test_get_exchange_rate_with_cancellation_during_api(
        self, mock_message, cancellation_token
    ):
        """–¢–µ—Å—Ç –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è API –∑–∞–ø—Ä–æ—Å–∞"""
        with patch('handlers.admin_flow.SafeMessageEditor.safe_edit_message', new_callable=AsyncMock) as mock_edit:
            mock_edit.return_value = True
            
            with patch('handlers.admin_flow.ExchangeCalculator.get_base_rate_for_pair', new_callable=AsyncMock) as mock_get_rate:
                # –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–æ–ª–≥–∏–π API –∑–∞–ø—Ä–æ—Å
                async def slow_api_call(*args, **kwargs):
                    await asyncio.sleep(5)  # –ò–º–∏—Ç–∞—Ü–∏—è –º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ API
                    return Decimal('100.0')
                
                mock_get_rate.side_effect = slow_api_call
                
                # –û—Ç–º–µ–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è
                async def cancel_after_delay():
                    await asyncio.sleep(0.1)
                    cancellation_token.set()
                
                cancel_task = asyncio.create_task(cancel_after_delay())
                
                try:
                    result = await get_exchange_rate_with_loading(
                        mock_message, Currency.RUB, Currency.USD, cancellation_token
                    )
                finally:
                    cancel_task.cancel()
        
        assert result is None
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–æ –ø–æ–∫–∞–∑–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ
        cancel_calls = [call for call in mock_edit.call_args_list 
                       if "–æ—Ç–º–µ–Ω–µ–Ω–∞" in str(call)]
        assert len(cancel_calls) > 0
    
    @pytest.mark.asyncio
    async def test_get_exchange_rate_without_cancellation(
        self, mock_message
    ):
        """–¢–µ—Å—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–µ–∑ –æ—Ç–º–µ–Ω—ã"""
        expected_rate = Decimal('95.50')
        
        with patch('handlers.admin_flow.SafeMessageEditor.safe_edit_message', new_callable=AsyncMock) as mock_edit:
            mock_edit.return_value = True
            
            with patch('handlers.admin_flow.ExchangeCalculator.get_base_rate_for_pair', new_callable=AsyncMock) as mock_get_rate:
                mock_get_rate.return_value = expected_rate
                
                result = await get_exchange_rate_with_loading(
                    mock_message, Currency.RUB, Currency.EUR, None  # –ë–µ–∑ —Ç–æ–∫–µ–Ω–∞ –æ—Ç–º–µ–Ω—ã
                )
        
        assert result == expected_rate
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ù–ï –±—ã–ª–æ –ø–æ–∫–∞–∑–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ
        cancel_calls = [call for call in mock_edit.call_args_list 
                       if "–æ—Ç–º–µ–Ω–µ–Ω–∞" in str(call)]
        assert len(cancel_calls) == 0


class TestProgressiveLoadingExperience:
    """–¢–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ UX –∑–∞–≥—Ä—É–∑–∫–∏"""
    
    @pytest.fixture
    def mock_message(self):
        """–°–æ–∑–¥–∞—Ç—å mock Message –æ–±—ä–µ–∫—Ç"""
        message = MagicMock(spec=Message)
        message.text = "Test message"
        message.edit_text = AsyncMock()
        return message
    
    @pytest.mark.asyncio
    async def test_progressive_loading_messages(self, mock_message):
        """–¢–µ—Å—Ç –ø–æ–∫–∞–∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–≥—Ä—É–∑–∫–∏"""
        expected_rate = Decimal('100.25')
        
        with patch('handlers.admin_flow.SafeMessageEditor.safe_edit_message', new_callable=AsyncMock) as mock_edit:
            mock_edit.return_value = True
            
            with patch('handlers.admin_flow.ExchangeCalculator.get_base_rate_for_pair', new_callable=AsyncMock) as mock_get_rate:
                mock_get_rate.return_value = expected_rate
                
                result = await get_exchange_rate_with_loading(
                    mock_message, Currency.RUB, Currency.USDT, None
                )
        
        assert result == expected_rate
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã–∑–æ–≤–æ–≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
        edit_calls = mock_edit.call_args_list
        assert len(edit_calls) >= 3  # –ú–∏–Ω–∏–º—É–º: –Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ + –ø—Ä–æ–≥—Ä–µ—Å—Å + —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
        
        # –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ - –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
        first_call_text = str(edit_calls[0])
        assert ("–ø–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞" in first_call_text.lower() or 
                "loading" in first_call_text.lower())
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–∑–æ–≤ - —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
        last_call_text = str(edit_calls[-1])
        assert ("–ø–æ–ª—É—á–µ–Ω" in last_call_text.lower() or 
                "–≥–æ—Ç–æ–≤–æ" in last_call_text.lower() or
                "2/2" in last_call_text)
    
    def test_loading_message_contains_helpful_info(self):
        """–¢–µ—Å—Ç —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –¢–µ—Å—Ç –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
        loading_msg = LoadingMessageFormatter.format_api_loading_message("Rapira API")
        assert "—Å–µ–∫—É–Ω–¥" in loading_msg.lower()
        assert "rapira api" in loading_msg.lower()
        
        # –¢–µ—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ—Ç–º–µ–Ω—ã
        loading_with_cancel = LoadingMessageFormatter.format_api_loading_message_with_cancel("APILayer")
        assert "/cancel" in loading_with_cancel
        assert "–æ—Ç–º–µ–Ω–∏—Ç—å" in loading_with_cancel.lower()
        
        # –¢–µ—Å—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        progress_msg = LoadingMessageFormatter.format_loading_with_progress(
            "–¢–µ—Å—Ç–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è", 1, 3, show_cancel=True
        )
        assert "1/3" in progress_msg
        assert "–ø–æ–¥–æ–∂–¥–∏—Ç–µ" in progress_msg.lower()
        assert "/cancel" in progress_msg


class TestErrorRecoveryGuidance:
    """–¢–µ—Å—Ç—ã –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é –ø–æ—Å–ª–µ –æ—à–∏–±–æ–∫"""
    
    def test_all_error_messages_contain_recovery_instructions(self):
        """–¢–µ—Å—Ç —á—Ç–æ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö —Å–æ–¥–µ—Ä–∂–∞—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é"""
        # –û—à–∏–±–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞
        timeout_error = UserFriendlyErrorFormatter.format_api_timeout_error(
            "APILayer", Currency.RUB, Currency.USD
        )
        assert "/admin_bot" in timeout_error or "–ø–æ–≤—Ç–æ—Ä–∏—Ç—å" in timeout_error.lower()
        assert "–ø–æ–ø—Ä–æ–±—É–π—Ç–µ" in timeout_error.lower()
        
        # –û—à–∏–±–∫–∞ API
        api_error = UserFriendlyErrorFormatter.format_api_error(
            "APILayer", "Generic error", Currency.RUB, Currency.EUR
        )
        assert "/admin_bot" in api_error
        
        # –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞
        unexpected_error = UserFriendlyErrorFormatter.format_unexpected_error(
            Currency.USDT, Currency.RUB
        )
        assert "/admin_bot" in unexpected_error
        assert "—á—Ç–æ –¥–µ–ª–∞—Ç—å" in unexpected_error.lower()
        
        # –û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
        cancelled = UserFriendlyErrorFormatter.format_operation_cancelled()
        assert "/admin_bot" in cancelled
        assert "–Ω–∞—á–∞—Ç—å" in cancelled.lower()
    
    def test_error_messages_explain_context(self):
        """–¢–µ—Å—Ç —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –æ–±—ä—è—Å–Ω—è—é—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—à–∏–±–∫–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä–µ
        error_msg = UserFriendlyErrorFormatter.format_api_timeout_error(
            "TestAPI", Currency.RUB, Currency.USDT
        )
        assert "RUB ‚Üí USDT" in error_msg
        assert "TestAPI" in error_msg
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–∏—á–∏–Ω
        timeout_error = UserFriendlyErrorFormatter.format_api_timeout_error(
            "APILayer", Currency.USD, Currency.EUR
        )
        assert "–ø—Ä–∏—á–∏–Ω—ã" in timeout_error.lower()
        assert ("—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ" in timeout_error.lower() or 
                "–∏–Ω—Ç–µ—Ä–Ω–µ—Ç" in timeout_error.lower())


if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    pytest.main([__file__, '-v', '--tb=short'])