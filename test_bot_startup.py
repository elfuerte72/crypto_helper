#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ –∏—Ö –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Ä–∞–±–æ—Ç–µ
"""

import sys
import os
import asyncio
from unittest.mock import AsyncMock, MagicMock, patch

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

def test_imports():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π –±–æ—Ç–∞"""
    
    print("üì¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ –º–æ–¥—É–ª–µ–π...")
    
    try:
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏
        from config import config
        print("   ‚úÖ config")
        
        from utils.logger import get_bot_logger
        print("   ‚úÖ logger")
        
        # API —Å–µ—Ä–≤–∏—Å—ã
        from services.api_service import api_service
        print("   ‚úÖ api_service")
        
        from services.fiat_rates_service import fiat_rates_service
        print("   ‚úÖ fiat_rates_service")
        
        # Handlers
        from handlers.admin_handlers import admin_router
        print("   ‚úÖ admin_handlers")
        
        from handlers.bot_handlers import margin_router
        print("   ‚úÖ bot_handlers")
        
        from handlers.margin_calculation import margin_router as margin_calc_router
        print("   ‚úÖ margin_calculation")
        
        # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏
        from handlers.currency_pairs import get_currency_pair_info
        print("   ‚úÖ currency_pairs")
        
        from handlers.validation import InputValidator
        print("   ‚úÖ validation")
        
        from handlers.calculation_logic import calculate_margin_rate
        print("   ‚úÖ calculation_logic")
        
        from handlers.formatters import MessageFormatter
        print("   ‚úÖ formatters")
        
        from handlers.keyboards import create_currency_pairs_keyboard
        print("   ‚úÖ keyboards")
        
        from handlers.fsm_states import MarginCalculationForm
        print("   ‚úÖ fsm_states")
        
        print("\n‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except ImportError as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False
    except Exception as e:
        print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: {e}")
        return False

def test_configuration():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    
    print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    try:
        from config import config
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        required_fields = ['BOT_TOKEN', 'API_LAYER_KEY', 'RAPIRA_API_URL', 'API_LAYER_URL']
        missing_fields = []
        
        for field in required_fields:
            value = getattr(config, field, None)
            if value:
                print(f"   ‚úÖ {field}: {str(value)[:10]}...")
            else:
                print(f"   ‚ùå {field}: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                missing_fields.append(field)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        print(f"   üìä API_TIMEOUT: {config.API_TIMEOUT}")
        print(f"   üîÑ API_RETRY_COUNT: {config.API_RETRY_COUNT}")
        print(f"   üìã LOG_LEVEL: {config.LOG_LEVEL}")
        print(f"   üéØ USE_MOCK_DATA: {config.USE_MOCK_DATA}")
        print(f"   üìà –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –ø–∞—Ä: {len(config.SUPPORTED_PAIRS)}")
        
        if missing_fields:
            print(f"\n‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {', '.join(missing_fields)}")
            return False
        
        print("\n‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞!")
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

async def test_api_services():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —Å–µ—Ä–≤–∏—Å–æ–≤"""
    
    print("\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —Å–µ—Ä–≤–∏—Å–æ–≤...")
    
    try:
        from services.api_service import api_service
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º health check
        print("   üîç Health check...")
        async with api_service as service:
            health = await service.health_check()
            
            print(f"   üìä –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: {health['status']}")
            print(f"   üîó Rapira API: {health['rapira_api'].get('status', 'unknown')}")
            print(f"   üîó APILayer: {health['apilayer_api'].get('status', 'unknown')}")
            
            if health['status'] in ['healthy', 'degraded']:
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤
                print("   üí± –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤...")
                
                test_pairs = ['BTC/USDT', 'USD/RUB']
                for pair in test_pairs:
                    try:
                        rate = await service.get_exchange_rate(pair)
                        if rate:
                            print(f"      ‚úÖ {pair}: {rate.rate:.6f}")
                        else:
                            print(f"      ‚ùå {pair}: –∫—É—Ä—Å –Ω–µ –ø–æ–ª—É—á–µ–Ω")
                    except Exception as e:
                        print(f"      ‚ùå {pair}: –æ—à–∏–±–∫–∞ - {e}")
                
                print("\n‚úÖ API —Å–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç!")
                return True
            else:
                print("\n‚ö†Ô∏è  API —Å–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –Ω–æ –∫–æ–¥ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
                return True
                
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ API —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")
        return False

def test_handlers():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    
    print("\nüéÆ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
    
    try:
        from handlers.currency_pairs import get_currency_pair_info, is_valid_currency_pair
        from handlers.validation import InputValidator
        from handlers.calculation_logic import calculate_margin_rate
        from handlers.formatters import MessageFormatter
        from handlers.keyboards import create_currency_pairs_keyboard
        from decimal import Decimal
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã
        print("   üí± –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä...")
        test_pairs = ['usdtrub', 'rubzar', 'btcusdt']
        for pair in test_pairs:
            is_valid = is_valid_currency_pair(pair)
            pair_info = get_currency_pair_info(pair) if is_valid else None
            status = "‚úÖ" if is_valid and pair_info else "‚ùå"
            print(f"      {status} {pair}: {'–≤–∞–ª–∏–¥–Ω–∞' if is_valid else '–Ω–µ–≤–∞–ª–∏–¥–Ω–∞'}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
        print("   ‚úîÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏...")
        try:
            margin = InputValidator.validate_margin("2.5")
            amount = InputValidator.validate_amount("1000")
            print(f"      ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è: margin={margin}, amount={amount}")
        except Exception as e:
            print(f"      ‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è: {e}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        print("   üìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
        try:
            welcome_msg = MessageFormatter.format_welcome_message()
            error_msg = MessageFormatter.format_error_message('api_error', '–¢–µ—Å—Ç')
            print(f"      ‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: welcome={len(welcome_msg)}, error={len(error_msg)}")
        except Exception as e:
            print(f"      ‚ùå –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {e}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        print("   ‚å®Ô∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä...")
        try:
            keyboard = create_currency_pairs_keyboard()
            print(f"      ‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞: {len(keyboard.inline_keyboard)} —Ä—è–¥–æ–≤")
        except Exception as e:
            print(f"      ‚ùå –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞: {e}")
        
        print("\n‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {e}")
        return False

async def test_bot_initialization():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞ (–±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram)"""
    
    print("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞...")
    
    try:
        # –ú–æ–∫–∞–µ–º Telegram API
        with patch('aiogram.Bot') as MockBot, \
             patch('aiogram.Dispatcher') as MockDispatcher:
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏
            mock_bot = AsyncMock()
            mock_dispatcher = AsyncMock()
            MockBot.return_value = mock_bot
            MockDispatcher.return_value = mock_dispatcher
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            print("   üì¶ –ò–º–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è...")
            
            # –ú–æ–∫–∞–µ–º sys.argv —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∑–∞–ø—É—Å–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
            original_argv = sys.argv
            sys.argv = ['test']
            
            try:
                # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç main.py
                import importlib.util
                spec = importlib.util.spec_from_file_location(
                    "main", 
                    os.path.join(os.path.dirname(__file__), 'src', 'main.py')
                )
                main_module = importlib.util.module_from_spec(spec)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫
                print("   ‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
                from aiogram.fsm.storage.memory import MemoryStorage
                storage = MemoryStorage()
                print("   ‚úÖ FSM storage –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ—É—Ç–µ—Ä—ã
                from handlers.admin_handlers import admin_router
                from handlers.margin_calculation import margin_router
                print("   ‚úÖ –†–æ—É—Ç–µ—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
                
                print("\n‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
                return True
                
            finally:
                sys.argv = original_argv
                
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–ü–£–°–ö–ê TELEGRAM –ë–û–¢–ê")
    print("=" * 60)
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    print("=" * 60)
    
    tests = [
        ("–ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π", test_imports),
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", test_configuration),
        ("API —Å–µ—Ä–≤–∏—Å—ã", test_api_services),
        ("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏", test_handlers),
        ("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞", test_bot_initialization)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\nüîç {test_name}...")
        print("-" * 40)
        
        try:
            if asyncio.iscoroutinefunction(test_func):
                result = await test_func()
            else:
                result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 60)
    
    all_passed = True
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name}: {status}")
        all_passed = all_passed and result
    
    print("=" * 60)
    if all_passed:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        print("\nüöÄ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É!")
        print("\nüìã –ß—Ç–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ:")
        print("‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        print("‚úÖ API —Å–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç")
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç")
        print("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ö–æ–¥–∏—Ç –±–µ–∑ –æ—à–∏–±–æ–∫")
        print("\nüí° –î–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
        print("   python src/main.py")
    else:
        print("‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´")
        print("üîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞")
    
    return all_passed

if __name__ == "__main__":
    try:
        success = asyncio.run(main())
        print(f"\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {'—É—Å–ø–µ—à–Ω–æ' if success else '—Å –æ—à–∏–±–∫–∞–º–∏'}")
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)