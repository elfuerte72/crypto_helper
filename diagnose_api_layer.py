#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API Layer
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
"""

import asyncio
import sys
import os
import json
import aiohttp
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from config import config
from services.fiat_rates_service import fiat_rates_service
from utils.logger import get_api_logger

logger = get_api_logger()

async def test_api_layer_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å API Layer"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API Layer...")
    
    if not config.API_LAYER_KEY:
        print("‚ùå API_LAYER_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        return False
    
    print(f"üîó URL: {config.API_LAYER_URL}")
    print(f"üîë API Key: {config.API_LAYER_KEY[:10]}...")
    
    headers = {
        'apikey': config.API_LAYER_KEY,
        'Accept': 'application/json'
    }
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
    test_url = f"{config.API_LAYER_URL}/latest"
    params = {
        'base': 'USD',
        'symbols': 'EUR,RUB,ZAR'
    }
    
    try:
        async with aiohttp.ClientSession() as session:
            print(f"üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å: {test_url}")
            print(f"üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")
            
            async with session.get(test_url, params=params, headers=headers) as response:
                print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status}")
                print(f"üìÑ –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {dict(response.headers)}")
                
                if response.status == 200:
                    data = await response.json()
                    print("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API Layer:")
                    print(json.dumps(data, indent=2, ensure_ascii=False))
                    return True
                else:
                    error_text = await response.text()
                    print(f"‚ùå –û—à–∏–±–∫–∞ API Layer ({response.status}): {error_text}")
                    return False
                    
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
        return False

async def test_fiat_service_health():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º health check fiat_rates_service"""
    print("\nüè• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ health check fiat_rates_service...")
    
    try:
        async with fiat_rates_service:
            health_data = await fiat_rates_service.health_check()
            
            print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç health check:")
            print(json.dumps(health_data, indent=2, ensure_ascii=False))
            
            return health_data.get('status') == 'healthy'
            
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ health check: {e}")
        return False

async def test_problematic_pairs():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–∞—Ä—ã"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–∞—Ä...")
    
    problematic_pairs = [
        'RUB/THB', 'THB/RUB',
        'RUB/AED', 'AED/RUB', 
        'RUB/IDR', 'IDR/RUB',
        'RUB/EUR', 'EUR/RUB',
        'RUB/USD', 'USD/RUB'
    ]
    
    results = {}
    
    async with fiat_rates_service:
        for pair in problematic_pairs:
            try:
                print(f"\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—ã: {pair}")
                
                from_currency, to_currency = pair.split('/')
                
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –±–µ–∑ fallback
                rate_no_fallback = await fiat_rates_service.get_fiat_rate(
                    from_currency, to_currency, use_fallback=False
                )
                
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å —Å fallback
                rate_with_fallback = await fiat_rates_service.get_fiat_rate(
                    from_currency, to_currency, use_fallback=True
                )
                
                results[pair] = {
                    'no_fallback': rate_no_fallback,
                    'with_fallback': rate_with_fallback
                }
                
                if rate_no_fallback:
                    print(f"‚úÖ –†–µ–∞–ª—å–Ω—ã–π API: {rate_no_fallback:.6f}")
                else:
                    print("‚ùå –†–µ–∞–ª—å–Ω—ã–π API: –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
                
                if rate_with_fallback:
                    print(f"‚úÖ –° fallback: {rate_with_fallback:.6f}")
                else:
                    print("‚ùå –° fallback: –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    
            except Exception as e:
                print(f"üí• –û—à–∏–±–∫–∞ –¥–ª—è {pair}: {e}")
                results[pair] = {'error': str(e)}
    
    return results

async def test_fallback_data_integrity():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å fallback –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ fallback –¥–∞–Ω–Ω—ã—Ö...")
    
    async with fiat_rates_service:
        base_currencies = ['USD', 'EUR', 'RUB', 'ZAR', 'THB', 'AED', 'IDR']
        
        for base_currency in base_currencies:
            print(f"\nüí± –ü—Ä–æ–≤–µ—Ä–∫–∞ fallback –¥–ª—è {base_currency}:")
            
            fallback_rates = await fiat_rates_service._get_fallback_rates(base_currency)
            
            if not fallback_rates:
                print(f"‚ùå –ù–µ—Ç fallback –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {base_currency}")
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –∫—É—Ä—Å—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –≤–∞–ª—é—Ç
            supported_currencies = fiat_rates_service.supported_currencies
            missing_currencies = supported_currencies - set(fallback_rates.keys()) - {base_currency}
            
            if missing_currencies:
                print(f"‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫—É—Ä—Å—ã –¥–ª—è: {missing_currencies}")
            else:
                print(f"‚úÖ –í—Å–µ –∫—É—Ä—Å—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç ({len(fallback_rates)} –≤–∞–ª—é—Ç)")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å –∫—É—Ä—Å–æ–≤
            for currency, rate in fallback_rates.items():
                if rate <= 0:
                    print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫—É—Ä—Å {base_currency}/{currency}: {rate}")
                elif rate > 1000000:  # –û—á–µ–Ω—å –±–æ–ª—å—à–æ–π –∫—É—Ä—Å
                    print(f"‚ö†Ô∏è  –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –±–æ–ª—å—à–æ–π –∫—É—Ä—Å {base_currency}/{currency}: {rate}")

async def generate_config_recommendations():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("\nüìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
    
    print(f"üîë API_LAYER_KEY: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if config.API_LAYER_KEY else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
    print(f"üîó API_LAYER_URL: {config.API_LAYER_URL}")
    print(f"‚è±Ô∏è  API_TIMEOUT: {config.API_TIMEOUT}s")
    print(f"üîÑ API_RETRY_COUNT: {config.API_RETRY_COUNT}")
    print(f"üß™ USE_MOCK_DATA: {config.USE_MOCK_DATA}")
    
    if not config.API_LAYER_KEY:
        print("\n‚ö†Ô∏è  –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ API_LAYER_KEY –≤ .env —Ñ–∞–π–ª–µ")
        print("   –ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á –º–æ–∂–Ω–æ –Ω–∞: https://apilayer.com/marketplace/exchangerates_data-api")
    
    if config.API_TIMEOUT < 30:
        print("\n‚ö†Ô∏è  –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–≤–µ–ª–∏—á–∏—Ç—å API_TIMEOUT –¥–æ 30 —Å–µ–∫—É–Ω–¥")
    
    if config.API_RETRY_COUNT < 3:
        print("\n‚ö†Ô∏è  –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å API_RETRY_COUNT = 3")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ API Layer...\n")
    print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    try:
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        await generate_config_recommendations()
        
        # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        api_connection_ok = await test_api_layer_connection()
        
        # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º health check
        health_ok = await test_fiat_service_health()
        
        # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–∞—Ä—ã
        pair_results = await test_problematic_pairs()
        
        # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º fallback –¥–∞–Ω–Ω—ã–µ
        await test_fallback_data_integrity()
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print("\n" + "="*50)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
        print("="*50)
        print(f"üîó API Layer —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: {'‚úÖ OK' if api_connection_ok else '‚ùå FAIL'}")
        print(f"üè• Health check: {'‚úÖ OK' if health_ok else '‚ùå FAIL'}")
        
        successful_pairs = sum(1 for result in pair_results.values() 
                             if result.get('with_fallback') is not None)
        total_pairs = len(pair_results)
        print(f"üìä –†–∞–±–æ—Ç–∞—é—â–∏–µ –ø–∞—Ä—ã: {successful_pairs}/{total_pairs}")
        
        if not api_connection_ok:
            print("\n‚ö†Ô∏è  –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API_LAYER_KEY –≤ .env —Ñ–∞–π–ª–µ")
            print("2. –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞")
            print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏–º–∏—Ç—ã API Layer")
        
        if successful_pairs < total_pairs:
            print("\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–∞—Ä—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç –¥–∞–∂–µ —Å fallback")
            print("   –≠—Ç–æ –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã –≤ fallback –¥–∞–Ω–Ω—ã—Ö")
        
        print("\nüéâ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main())