#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ä–∞–±–æ—Ç—É —Å –ø—Ä–æ–±–ª–µ–º–Ω—ã–º–∏ –ø–∞—Ä–∞–º–∏
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from services.api_service import api_service
from services.fiat_rates_service import fiat_rates_service
from handlers.currency_pairs import get_currency_pair_info, CURRENCY_PAIRS
from utils.logger import get_api_logger

logger = get_api_logger()

# –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–∞—Ä—ã –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞
PROBLEMATIC_PAIRS = [
    'rubthb', 'thbrub',
    'rubaed', 'aedrub', 
    'rubidr', 'idrrub',
    'rubeur', 'eurrub',
    'rubusd', 'usdrub'
]

async def test_currency_pairs_info():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä–∞—Ö"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä–∞—Ö...")
    
    for pair_callback in PROBLEMATIC_PAIRS:
        pair_info = get_currency_pair_info(pair_callback)
        if pair_info:
            print(f"‚úÖ {pair_callback}: {pair_info['name']} ({pair_info['base']}/{pair_info['quote']})")
        else:
            print(f"‚ùå {pair_callback}: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

async def test_api_service_with_correct_format():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º API service —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º –ø–∞—Ä"""
    print("\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API service —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º...")
    
    async with api_service:
        for pair_callback in PROBLEMATIC_PAIRS:
            pair_info = get_currency_pair_info(pair_callback)
            if not pair_info:
                print(f"‚ùå {pair_callback}: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                continue
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è API
            pair_format = f"{pair_info['base']}/{pair_info['quote']}"
            
            try:
                print(f"\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—ã: {pair_callback} -> {pair_format}")
                
                exchange_rate = await api_service.get_exchange_rate(pair_format)
                
                if exchange_rate:
                    print(f"‚úÖ {pair_format}: {exchange_rate.rate:.6f} (source: {exchange_rate.source})")
                else:
                    print(f"‚ùå {pair_format}: –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è {pair_format}: {e}")

async def test_fiat_pairs_specifically():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–∞—Ç–Ω—ã–µ –ø–∞—Ä—ã –æ—Ç–¥–µ–ª—å–Ω–æ"""
    print("\nüí± –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–∞—Ç–Ω—ã—Ö –ø–∞—Ä —á–µ—Ä–µ–∑ fiat_rates_service...")
    
    fiat_pairs = [
        'RUB/THB', 'THB/RUB',
        'RUB/AED', 'AED/RUB', 
        'RUB/IDR', 'IDR/RUB',
        'RUB/EUR', 'EUR/RUB',
        'RUB/USD', 'USD/RUB'
    ]
    
    async with fiat_rates_service:
        for pair in fiat_pairs:
            try:
                print(f"\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–∞—Ç–Ω–æ–π –ø–∞—Ä—ã: {pair}")
                
                exchange_rate = await fiat_rates_service.get_fiat_exchange_rate(pair)
                
                if exchange_rate:
                    print(f"‚úÖ {pair}: {exchange_rate.rate:.6f} (source: {exchange_rate.source})")
                else:
                    print(f"‚ùå {pair}: –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è {pair}: {e}")

async def test_integration_flow():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø–æ—Ç–æ–∫ –∫–∞–∫ –≤ –±–æ—Ç–µ"""
    print("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –∫–∞–∫ –≤ –±–æ—Ç–µ...")
    
    async with api_service:
        for pair_callback in PROBLEMATIC_PAIRS:
            try:
                print(f"\nüîÑ –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è: {pair_callback}")
                
                # –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä–µ
                pair_info = get_currency_pair_info(pair_callback)
                if not pair_info:
                    print(f"‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ä–µ {pair_callback} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    continue
                
                print(f"   üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ä–µ: {pair_info['name']} ({pair_info['base']}/{pair_info['quote']})")
                
                # –®–∞–≥ 2: –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è API (–∫–∞–∫ –≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º –∫–æ–¥–µ)
                pair_format = f"{pair_info['base']}/{pair_info['quote']}"
                
                # –®–∞–≥ 3: –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å —á–µ—Ä–µ–∑ API
                exchange_rate = await api_service.get_exchange_rate(pair_format)
                
                if exchange_rate:
                    print(f"   ‚úÖ –ö—É—Ä—Å –ø–æ–ª—É—á–µ–Ω: {exchange_rate.rate:.6f} (source: {exchange_rate.source})")
                    
                    # –®–∞–≥ 4: –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç —Å –Ω–∞—Ü–µ–Ω–∫–æ–π
                    from handlers.calculation_logic import calculate_margin_rate
                    from decimal import Decimal
                    
                    result = calculate_margin_rate(
                        pair_info=pair_info,
                        amount=Decimal('100'),
                        margin=Decimal('5'),
                        exchange_rate_data=exchange_rate.to_dict()
                    )
                    
                    print(f"   üí∞ –†–∞—Å—á–µ—Ç —Å –Ω–∞—Ü–µ–Ω–∫–æ–π 5%: {result.final_rate:.6f}")
                    print(f"   üìä –°—É–º–º–∞ –¥–ª—è 100 {pair_info['base']}: {result.amount_final_rate:.2f} {pair_info['quote']}")
                    
                else:
                    print(f"   ‚ùå –ö—É—Ä—Å –Ω–µ –ø–æ–ª—É—á–µ–Ω –¥–ª—è {pair_format}")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ–ª–Ω–æ–º —Ç–µ—Å—Ç–µ –¥–ª—è {pair_callback}: {e}")
                import traceback
                traceback.print_exc()

async def test_health_checks():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º health check'–∏ —Å–µ—Ä–≤–∏—Å–æ–≤"""
    print("\nüè• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ health check'–æ–≤...")
    
    # API service health check
    try:
        async with api_service:
            health_data = await api_service.health_check()
            print(f"API Service: {health_data.get('status', 'unknown')}")
            if health_data.get('rapira_api'):
                print(f"  Rapira API: {health_data['rapira_api'].get('status', 'unknown')}")
            if health_data.get('apilayer_api'):
                print(f"  APILayer: {health_data['apilayer_api'].get('status', 'unknown')}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ health check API service: {e}")
    
    # Fiat rates service health check
    try:
        async with fiat_rates_service:
            health_data = await fiat_rates_service.health_check()
            print(f"Fiat Rates Service: {health_data.get('status', 'unknown')}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ health check fiat rates service: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä...\n")
    
    try:
        # –¢–µ—Å—Ç 1: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ä–∞—Ö
        await test_currency_pairs_info()
        
        # –¢–µ—Å—Ç 2: API service —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
        await test_api_service_with_correct_format()
        
        # –¢–µ—Å—Ç 3: –§–∏–∞—Ç–Ω—ã–µ –ø–∞—Ä—ã –æ—Ç–¥–µ–ª—å–Ω–æ
        await test_fiat_pairs_specifically()
        
        # –¢–µ—Å—Ç 4: –ü–æ–ª–Ω—ã–π –ø–æ—Ç–æ–∫
        await test_integration_flow()
        
        # –¢–µ—Å—Ç 5: Health check'–∏
        await test_health_checks()
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
        
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main())