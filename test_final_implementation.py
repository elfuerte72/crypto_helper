#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ª–æ–≥–∏–∫–∏ —Ä–∞—Å—á–µ—Ç–∞ –º–∞—Ä–∂–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞–±–æ—Ç–µ
"""

import sys
import os
from decimal import Decimal

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from handlers.calculation_logic import MarginCalculator, calculate_margin_rate
from handlers.formatters import MessageFormatter
from handlers.currency_pairs import CURRENCY_PAIRS


def demo_changes():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
    
    print("üéâ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ò–ó–ú–ï–ù–ï–ù–ò–ô –í –õ–û–ì–ò–ö–ï –†–ê–°–ß–ï–¢–ê –ú–ê–†–ñ–ò")
    print("=" * 80)
    print()
    
    print("üìã –ß–¢–û –ò–ó–ú–ï–ù–ò–õ–û–°–¨:")
    print("1. ‚úÖ –õ–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –º–∞—Ä–∂–∏:")
    print("   ‚Ä¢ X/RUB –ø–∞—Ä—ã (USDT/RUB, USD/RUB, EUR/RUB, AED/RUB, THB/RUB, ZAR/RUB, IDR/RUB)")
    print("     ‚Üí –ú–ò–ù–£–° –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –∫—É—Ä—Å–∞")
    print("   ‚Ä¢ RUB/X –ø–∞—Ä—ã (RUB/USDT, RUB/USD, RUB/EUR, RUB/AED, RUB/THB, RUB/ZAR, RUB/IDR)")
    print("     ‚Üí –ü–õ–Æ–° –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –∫—É—Ä—Å–∞")
    print()
    print("2. ‚úÖ –§–æ—Ä–º–∞—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤:")
    print("   ‚Ä¢ –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç '—Å–∫–æ–ª—å–∫–æ —Ä—É–±–ª–µ–π —Å—Ç–æ–∏—Ç 1 –µ–¥–∏–Ω–∏—Ü–∞ –≤–∞–ª—é—Ç—ã'")
    print("   ‚Ä¢ RUB/USD (0.01018) ‚Üí –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∫–∞–∫ 'USD/RUB (98.23)'")
    print("   ‚Ä¢ USD/RUB (98.25) ‚Üí –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∫–∞–∫ 'USD/RUB (98.25)'")
    print()
    print("=" * 80)
    print()
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã
    examples = [
        {
            'title': 'USDT/RUB - –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ú–ò–ù–£–° –ø—Ä–æ—Ü–µ–Ω—Ç',
            'pair_key': 'usdtrub',
            'api_rate': 95.50,
            'margin': 3.0,
            'expected_logic': '–º–∏–Ω—É—Å',
            'expected_display_format': 'USDT/RUB'
        },
        {
            'title': 'RUB/USDT - –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ü–õ–Æ–° –ø—Ä–æ—Ü–µ–Ω—Ç',
            'pair_key': 'rubusdt',
            'api_rate': 0.01047,
            'margin': 2.5,
            'expected_logic': '–ø–ª—é—Å',
            'expected_display_format': 'USDT/RUB (–∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω)'
        },
        {
            'title': 'USD/RUB - –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ú–ò–ù–£–° –ø—Ä–æ—Ü–µ–Ω—Ç',
            'pair_key': 'usdrub',
            'api_rate': 98.25,
            'margin': 1.5,
            'expected_logic': '–º–∏–Ω—É—Å',
            'expected_display_format': 'USD/RUB'
        },
        {
            'title': 'RUB/USD - –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ü–õ–Æ–° –ø—Ä–æ—Ü–µ–Ω—Ç',
            'pair_key': 'rubusd',
            'api_rate': 0.01018,
            'margin': 4.0,
            'expected_logic': '–ø–ª—é—Å',
            'expected_display_format': 'USD/RUB (–∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω)'
        },
        {
            'title': 'EUR/RUB - –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ú–ò–ù–£–° –ø—Ä–æ—Ü–µ–Ω—Ç',
            'pair_key': 'eurrub',
            'api_rate': 107.50,
            'margin': 2.0,
            'expected_logic': '–º–∏–Ω—É—Å',
            'expected_display_format': 'EUR/RUB'
        },
        {
            'title': 'RUB/EUR - –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ü–õ–Æ–° –ø—Ä–æ—Ü–µ–Ω—Ç',
            'pair_key': 'rubeur',
            'api_rate': 0.00930,
            'margin': 3.5,
            'expected_logic': '–ø–ª—é—Å',
            'expected_display_format': 'EUR/RUB (–∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω)'
        },
    ]
    
    print(f"üîç –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ù–ê {len(examples)} –ü–†–ò–ú–ï–†–ê–•:")
    print()
    
    for i, example in enumerate(examples, 1):
        print(f"üìä –ü–†–ò–ú–ï–† {i}: {example['title']}")
        print(f"   üî§ –ü–∞—Ä–∞: {example['pair_key']}")
        print(f"   üìà API –∫—É—Ä—Å: {example['api_rate']}")
        print(f"   üí∞ –ú–∞—Ä–∂–∞: {example['margin']}%")
        print(f"   üîÑ –û–∂–∏–¥–∞–µ–º–∞—è –ª–æ–≥–∏–∫–∞: {example['expected_logic']} –ø—Ä–æ—Ü–µ–Ω—Ç")
        print(f"   üé® –§–æ—Ä–º–∞—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: {example['expected_display_format']}")
        print()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä–µ
        pair_info = CURRENCY_PAIRS.get(example['pair_key'])
        if not pair_info:
            print(f"   ‚ùå –ü–∞—Ä–∞ {example['pair_key']} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            continue
        
        try:
            # 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–∞—Ä—ã
            pair_type = MarginCalculator.detect_pair_type(pair_info)
            print(f"   üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–∏–ø –ø–∞—Ä—ã: {pair_type}")
            
            # 2. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫—É—Ä—Å —Å –º–∞—Ä–∂–æ–π
            base_rate = Decimal(str(example['api_rate']))
            margin = Decimal(str(example['margin']))
            
            calculated_rate = MarginCalculator.calculate_final_rate(
                base_rate, margin, pair_info
            )
            
            # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É —Ä–∞—Å—á–µ—Ç–∞
            if example['expected_logic'] == '–ø–ª—é—Å':
                expected_rate = base_rate * (Decimal('1') + margin / Decimal('100'))
                operation_symbol = '+'
            else:
                expected_rate = base_rate * (Decimal('1') - margin / Decimal('100'))
                operation_symbol = '-'
            
            print(f"   üìä –§–æ—Ä–º—É–ª–∞: {base_rate} √ó (1 {operation_symbol} {margin}% / 100)")
            print(f"   üéØ –û–∂–∏–¥–∞–µ–º—ã–π –∫—É—Ä—Å: {expected_rate}")
            print(f"   üíé –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π –∫—É—Ä—Å: {calculated_rate}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
            if abs(calculated_rate - expected_rate) < Decimal('0.00000001'):
                print(f"   ‚úÖ –õ–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ö–û–†–†–ï–ö–¢–ù–ê!")
            else:
                print(f"   ‚ùå –õ–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ù–ï–í–ï–†–ù–ê!")
            
            # 4. –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            base_display = MessageFormatter._format_user_friendly_rate(pair_info, float(base_rate))
            final_display = MessageFormatter._format_user_friendly_rate(pair_info, float(calculated_rate))
            
            print(f"   üé® –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –∫—É—Ä—Å–∞: {base_display}")
            print(f"   üé® –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –∫—É—Ä—Å–∞: {final_display}")
            
            # 5. –ü–æ–ª–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å —Å—É–º–º–æ–π
            exchange_rate_data = {
                'rate': str(example['api_rate']),
                'timestamp': '2024-01-01T12:00:00Z',
                'source': 'demo'
            }
            
            result = calculate_margin_rate(
                pair_info=pair_info,
                amount=Decimal('1000.0'),
                margin=margin,
                exchange_rate_data=exchange_rate_data,
                use_banking_logic=False
            )
            
            print(f"   üí∞ –ü—Ä–∏–º–µ—Ä —Ä–∞—Å—á–µ—Ç–∞: 1000 {pair_info['base']} = {result.amount_final_rate:.2f} {pair_info['quote']}")
            print(f"   üìà –†–∞–∑–Ω–∏—Ü–∞: {result.amount_difference:.2f} {pair_info['quote']}")
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        print()
        print("-" * 80)
        print()
    
    print("üéâ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
    print()
    print("üìã –°–í–û–î–ö–ê –ò–ó–ú–ï–ù–ï–ù–ò–ô:")
    print("‚úÖ –õ–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –º–∞—Ä–∂–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º")
    print("‚úÖ –§–æ—Ä–º–∞—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ —É–ª—É—á—à–µ–Ω –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    print("‚úÖ –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
    print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—Ö–æ–¥—è—Ç —É—Å–ø–µ—à–Ω–æ")
    print()
    print("üöÄ –ì–û–¢–û–í–û –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!")


def test_all_pairs_summary():
    """–ö—Ä–∞—Ç–∫–∏–π —Ç–µ—Å—Ç –≤—Å–µ—Ö –ø–∞—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    
    print("\nüìä –ö–†–ê–¢–ö–ò–ô –¢–ï–°–¢ –í–°–ï–• –í–ê–õ–Æ–¢–ù–´–• –ü–ê–†")
    print("=" * 50)
    
    test_margin = Decimal('5.0')
    test_rate = Decimal('100.0')
    
    rub_quote_pairs = []  # X/RUB - –º–∏–Ω—É—Å –ø—Ä–æ—Ü–µ–Ω—Ç
    rub_base_pairs = []   # RUB/X - –ø–ª—é—Å –ø—Ä–æ—Ü–µ–Ω—Ç
    
    for pair_key, pair_info in CURRENCY_PAIRS.items():
        pair_type = MarginCalculator.detect_pair_type(pair_info)
        
        calculated_rate = MarginCalculator.calculate_final_rate(
            test_rate, test_margin, pair_info
        )
        
        if pair_type == 'rub_quote':
            rub_quote_pairs.append((pair_key, pair_info['name'], calculated_rate))
        elif pair_type == 'rub_base':
            rub_base_pairs.append((pair_key, pair_info['name'], calculated_rate))
    
    print(f"\nüî¥ X/RUB –ø–∞—Ä—ã (–ú–ò–ù–£–° {test_margin}%): {test_rate} ‚Üí {test_rate * Decimal('0.95')}")
    for pair_key, pair_name, rate in rub_quote_pairs:
        status = "‚úÖ" if rate == Decimal('95.0') else "‚ùå"
        print(f"   {status} {pair_name}: {rate}")
    
    print(f"\nüîµ RUB/X –ø–∞—Ä—ã (–ü–õ–Æ–° {test_margin}%): {test_rate} ‚Üí {test_rate * Decimal('1.05')}")
    for pair_key, pair_name, rate in rub_base_pairs:
        status = "‚úÖ" if rate == Decimal('105.0') else "‚ùå"
        print(f"   {status} {pair_name}: {rate}")
    
    print(f"\nüìà –ò—Ç–æ–≥–æ X/RUB –ø–∞—Ä: {len(rub_quote_pairs)}")
    print(f"üìà –ò—Ç–æ–≥–æ RUB/X –ø–∞—Ä: {len(rub_base_pairs)}")
    print(f"üìà –í—Å–µ–≥–æ –ø–∞—Ä: {len(rub_quote_pairs) + len(rub_base_pairs)}")


if __name__ == '__main__':
    # –û—Å–Ω–æ–≤–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è
    demo_changes()
    
    # –ö—Ä–∞—Ç–∫–∏–π —Ç–µ—Å—Ç –≤—Å–µ—Ö –ø–∞—Ä
    test_all_pairs_summary()
    
    print("\nüèÅ –í–°–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø –£–°–ü–ï–®–ù–û –†–ï–ê–õ–ò–ó–û–í–ê–ù–´ –ò –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–ù–´!")