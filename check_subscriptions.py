#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–æ–∫ APILayer
"""

import asyncio
import aiohttp
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from config import config

async def check_subscriptions():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–æ–∫ APILayer"""
    
    print("üìä –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê –ü–û–î–ü–ò–°–û–ö APILAYER")
    print("=" * 50)
    print(f"API Key: {config.API_LAYER_KEY}")
    print("=" * 50)
    
    headers = {
        'apikey': config.API_LAYER_KEY,
        'User-Agent': 'CryptoHelper-Bot/1.0'
    }
    
    async with aiohttp.ClientSession(headers=headers) as session:
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: Exchange Rates Data API
        print("\n1. üìà Exchange Rates Data API")
        print("-" * 30)
        
        endpoints = [
            ("/latest", "–¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã"),
            ("/symbols", "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã"),
            ("/convert", "–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç"),
            ("/historical", "–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ")
        ]
        
        for endpoint, description in endpoints:
            try:
                url = f"{config.API_LAYER_URL}{endpoint}"
                params = {}
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö endpoint'–æ–≤
                if endpoint == "/latest":
                    params = {'base': 'USD', 'symbols': 'RUB'}
                elif endpoint == "/convert":
                    params = {'from': 'USD', 'to': 'RUB', 'amount': 1}
                elif endpoint == "/historical":
                    params = {'date': '2024-01-01', 'base': 'USD', 'symbols': 'RUB'}
                
                async with session.get(url, params=params) as response:
                    if response.status == 200:
                        data = await response.json()
                        if data.get('success'):
                            print(f"   ‚úÖ {description}: –î–æ—Å—Ç—É–ø–µ–Ω")
                        else:
                            error = data.get('error', {})
                            print(f"   ‚ùå {description}: {error.get('info', '–û—à–∏–±–∫–∞ API')}")
                    elif response.status == 403:
                        print(f"   üîí {description}: –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞")
                    elif response.status == 401:
                        print(f"   üö´ {description}: –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á")
                    else:
                        print(f"   ‚ùå {description}: HTTP {response.status}")
                        
            except Exception as e:
                print(f"   ‚ùå {description}: –û—à–∏–±–∫–∞ - {e}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: Currency Data API
        print("\n2. üí∞ Currency Data API")
        print("-" * 30)
        
        endpoints = [
            ("/list", "–°–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç"),
            ("/live", "–ö—É—Ä—Å—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"),
            ("/historical", "–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –∫—É—Ä—Å—ã"),
            ("/change", "–ò–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤"),
            ("/timeframe", "–ö—É—Ä—Å—ã –∑–∞ –ø–µ—Ä–∏–æ–¥")
        ]
        
        for endpoint, description in endpoints:
            try:
                url = f"https://api.apilayer.com/currency_data{endpoint}"
                params = {}
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö endpoint'–æ–≤
                if endpoint == "/live":
                    params = {'source': 'USD', 'currencies': 'RUB'}
                elif endpoint == "/historical":
                    params = {'date': '2024-01-01', 'source': 'USD', 'currencies': 'RUB'}
                elif endpoint == "/change":
                    params = {'source': 'USD', 'currencies': 'RUB', 'start_date': '2024-01-01', 'end_date': '2024-01-02'}
                elif endpoint == "/timeframe":
                    params = {'source': 'USD', 'currencies': 'RUB', 'start_date': '2024-01-01', 'end_date': '2024-01-02'}
                
                async with session.get(url, params=params) as response:
                    if response.status == 200:
                        data = await response.json()
                        if data.get('success'):
                            print(f"   ‚úÖ {description}: –î–æ—Å—Ç—É–ø–µ–Ω")
                        else:
                            error = data.get('error', {})
                            print(f"   ‚ùå {description}: {error.get('info', '–û—à–∏–±–∫–∞ API')}")
                    elif response.status == 403:
                        print(f"   üîí {description}: –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞")
                    elif response.status == 401:
                        print(f"   üö´ {description}: –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á")
                    else:
                        print(f"   ‚ùå {description}: HTTP {response.status}")
                        
            except Exception as e:
                print(f"   ‚ùå {description}: –û—à–∏–±–∫–∞ - {e}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ
        print("\n3. üìã –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ")
        print("-" * 30)
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π endpoint
            url = f"{config.API_LAYER_URL}/latest"
            params = {'base': 'USD', 'symbols': 'RUB,EUR,ZAR,THB,AED,IDR,GBP,JPY,CAD,AUD,CHF,CNY'}
            
            async with session.get(url, params=params) as response:
                if response.status == 200:
                    data = await response.json()
                    if data.get('success'):
                        print("   ‚úÖ –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ Exchange Rates Data API")
                        print(f"   ‚Ä¢ –ë–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞: {data.get('base', 'N/A')}")
                        print(f"   ‚Ä¢ –î–∞—Ç–∞: {data.get('date', 'N/A')}")
                        print(f"   ‚Ä¢ –ü–æ–ª—É—á–µ–Ω–æ –∫—É—Ä—Å–æ–≤: {len(data.get('rates', {}))}")
                        print(f"   ‚Ä¢ Timestamp: {data.get('timestamp', 'N/A')}")
                    else:
                        error = data.get('error', {})
                        print(f"   ‚ùå –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø: {error.get('info', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                else:
                    print(f"   ‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ—Å—Ç—É–ø–æ–º: HTTP {response.status}")
                    error_text = await response.text()
                    print(f"   ‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {error_text[:200]}...")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤
        print("\n4. üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤")
        print("-" * 30)
        
        try:
            # –î–µ–ª–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –±—ã—Å—Ç—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            for i in range(5):
                url = f"{config.API_LAYER_URL}/latest"
                params = {'base': 'USD', 'symbols': 'RUB'}
                
                async with session.get(url, params=params) as response:
                    if response.status == 200:
                        print(f"   ‚úÖ –ó–∞–ø—Ä–æ—Å {i+1}/5: –£—Å–ø–µ—à–Ω–æ")
                    elif response.status == 429:
                        print(f"   ‚è≥ –ó–∞–ø—Ä–æ—Å {i+1}/5: –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç")
                        break
                    else:
                        print(f"   ‚ùå –ó–∞–ø—Ä–æ—Å {i+1}/5: HTTP {response.status}")
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                await asyncio.sleep(0.1)
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ª–∏–º–∏—Ç–æ–≤: {e}")
    
    print("\n" + "=" * 50)
    print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("‚Ä¢ –ï—Å–ª–∏ –≤–∏–¥–∏—Ç–µ üîí '–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞' - –Ω—É–∂–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–ª–∞–Ω")
    print("‚Ä¢ –ï—Å–ª–∏ –≤–∏–¥–∏—Ç–µ üö´ '–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á' - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á –≤ .env —Ñ–∞–π–ª–µ")
    print("‚Ä¢ –ï—Å–ª–∏ –≤–∏–¥–∏—Ç–µ ‚úÖ '–î–æ—Å—Ç—É–ø–µ–Ω' - API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

if __name__ == "__main__":
    try:
        asyncio.run(check_subscriptions())
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)