#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ APILayer –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
"""

import os
import sys
import argparse

def list_test_files():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã"""
    test_files = [
        'quick_test.py',
        'check_subscriptions.py', 
        'test_apilayer_full.py',
        'run_tests.py',
        'demo.py',
        'manage_tests.py',
        'TESTING_INSTRUCTIONS.md',
        'APILAYER_INTEGRATION_STATUS.md'
    ]
    
    print("üìÅ –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã APILayer –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:")
    print("=" * 50)
    
    for file in test_files:
        if os.path.exists(file):
            size = os.path.getsize(file)
            print(f"‚úÖ {file:<30} ({size:,} bytes)")
        else:
            print(f"‚ùå {file:<30} (–Ω–µ –Ω–∞–π–¥–µ–Ω)")
    
    print("\nüí° –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
    print("‚Ä¢ python quick_test.py          - –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞")
    print("‚Ä¢ python check_subscriptions.py - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫")
    print("‚Ä¢ python demo.py               - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è")
    print("‚Ä¢ python test_apilayer_full.py - –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
    print("‚Ä¢ python run_tests.py          - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫")

def clean_test_files():
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã"""
    test_files = [
        'quick_test.py',
        'check_subscriptions.py',
        'test_apilayer_full.py',
        'run_tests.py',
        'demo.py',
        'TESTING_INSTRUCTIONS.md',
        'APILAYER_INTEGRATION_STATUS.md'
    ]
    
    print("üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤...")
    print("=" * 50)
    
    for file in test_files:
        if os.path.exists(file):
            try:
                os.remove(file)
                print(f"‚úÖ –£–¥–∞–ª–µ–Ω: {file}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {file}: {e}")
        else:
            print(f"‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω: {file} (–Ω–µ –Ω–∞–π–¥–µ–Ω)")
    
    print("\n‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("üí° –§–∞–π–ª manage_tests.py –æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")

def backup_test_files():
    """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    import shutil
    from datetime import datetime
    
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_dir = f"tests_backup_{timestamp}"
    
    test_files = [
        'quick_test.py',
        'check_subscriptions.py',
        'test_apilayer_full.py',
        'run_tests.py',
        'demo.py',
        'TESTING_INSTRUCTIONS.md',
        'APILAYER_INTEGRATION_STATUS.md'
    ]
    
    print(f"üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –≤ {backup_dir}...")
    print("=" * 50)
    
    try:
        os.makedirs(backup_dir, exist_ok=True)
        
        for file in test_files:
            if os.path.exists(file):
                shutil.copy2(file, backup_dir)
                print(f"‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {file}")
            else:
                print(f"‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω: {file} (–Ω–µ –Ω–∞–π–¥–µ–Ω)")
        
        print(f"\n‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ –≤ –ø–∞–ø–∫–µ: {backup_dir}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(
        description='–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ APILayer –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏'
    )
    
    parser.add_argument(
        'action',
        choices=['list', 'clean', 'backup'],
        help='–î–µ–π—Å—Ç–≤–∏–µ: list (–ø–æ–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª—ã), clean (—É–¥–∞–ª–∏—Ç—å), backup (—Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è)'
    )
    
    args = parser.parse_args()
    
    if args.action == 'list':
        list_test_files()
    elif args.action == 'clean':
        response = input("‚ö†Ô∏è  –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã? (y/N): ")
        if response.lower() == 'y':
            clean_test_files()
        else:
            print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    elif args.action == 'backup':
        backup_test_files()

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)