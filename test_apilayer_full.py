#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ APILayer
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –æ–±–µ–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫:
1. Exchange Rates Data API
2. Currency Data API
"""

import asyncio
import sys
import os
import aiohttp
import json
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from services.fiat_rates_service import fiat_rates_service
from services.api_service import api_service
from config import config


async def test_exchange_rates_data_api():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Exchange Rates Data API"""
    
    print("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Exchange Rates Data API...")
    
    headers = {
        'apikey': config.API_LAYER_KEY,
        'Content-Type': 'application/json',
        'User-Agent': 'CryptoHelper-Bot/1.0'
    }
    
    try:
        async with aiohttp.ClientSession(headers=headers) as session:
            # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ USD
            print("\n1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ latest rates (USD base)...")
            
            url = f"{config.API_LAYER_URL}/latest"
            params = {
                'base': 'USD',
                'symbols': 'RUB,ZAR,THB,AED,IDR,EUR,GBP,JPY,CAD,AUD,CHF,CNY'
            }
            
            async with session.get(url, params=params) as response:
                print(f"   Status: {response.status}")
                
                if response.status == 200:
                    data = await response.json()
                    print(f"   Success: {data.get('success', False)}")
                    
                    if data.get('success'):
                        rates = data.get('rates', {})
                        print(f"   –ü–æ–ª—É—á–µ–Ω–æ –∫—É—Ä—Å–æ–≤: {len(rates)}")
                        
                        for currency, rate in rates.items():
                            print(f"   ‚úÖ USD/{currency}: {rate:.6f}")
                    else:
                        error = data.get('error', {})
                        print(f"   ‚ùå –û—à–∏–±–∫–∞: {error.get('info', 'Unknown error')}")
                        return False
                else:
                    error_text = await response.text()
                    print(f"   ‚ùå HTTP Error {response.status}: {error_text}")
                    return False
            
            # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ EUR
            print("\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ latest rates (EUR base)...")
            
            params['base'] = 'EUR'
            async with session.get(url, params=params) as response:
                if response.status == 200:
                    data = await response.json()
                    if data.get('success'):
                        rates = data.get('rates', {})
                        print(f"   ‚úÖ EUR base: –ø–æ–ª—É—á–µ–Ω–æ {len(rates)} –∫—É—Ä—Å–æ–≤")
                        if 'RUB' in rates:
                            print(f"   ‚úÖ EUR/RUB: {rates['RUB']:.6f}")
                    else:
                        print(f"   ‚ùå –û—à–∏–±–∫–∞ EUR base: {data.get('error', {}).get('info', 'Unknown')}")
                else:
                    print(f"   ‚ùå HTTP Error EUR base: {response.status}")
            
            # –¢–µ—Å—Ç 3: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç
            print("\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ currency conversion...")
            
            convert_url = f"{config.API_LAYER_URL}/convert"
            params = {
                'from': 'USD',
                'to': 'RUB',
                'amount': 100
            }
            
            async with session.get(convert_url, params=params) as response:
                if response.status == 200:
                    data = await response.json()
                    if data.get('success'):
                        result = data.get('result', 0)
                        info = data.get('info', {})
                        rate = info.get('rate', 0)
                        print(f"   ‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è 100 USD -> RUB: {result:.2f} (–∫—É—Ä—Å: {rate:.6f})")
                    else:
                        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {data.get('error', {}).get('info', 'Unknown')}")
                else:
                    print(f"   ‚ùå HTTP Error –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {response.status}")
            
            print("\n‚úÖ Exchange Rates Data API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            return True
            
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Exchange Rates Data API: {e}")
        import traceback
        traceback.print_exc()
        return False


async def test_currency_data_api():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Currency Data API"""
    
    print("\nüí∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Currency Data API...")
    
    headers = {
        'apikey': config.API_LAYER_KEY,
        'Content-Type': 'application/json',
        'User-Agent': 'CryptoHelper-Bot/1.0'
    }
    
    try:
        async with aiohttp.ClientSession(headers=headers) as session:
            # –¢–µ—Å—Ç 1: –°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –≤–∞–ª—é—Ç
            print("\n1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ supported currencies...")
            
            url = "https://api.apilayer.com/currency_data/list"
            
            async with session.get(url) as response:
                print(f"   Status: {response.status}")
                
                if response.status == 200:
                    data = await response.json()
                    print(f"   Success: {data.get('success', False)}")
                    
                    if data.get('success'):
                        currencies = data.get('currencies', {})
                        print(f"   –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤–∞–ª—é—Ç: {len(currencies)}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—à–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–∞–ª—é—Ç—ã
                        our_currencies = ['USD', 'EUR', 'RUB', 'ZAR', 'THB', 'AED', 'IDR']
                        for curr in our_currencies:
                            if curr in currencies:
                                print(f"   ‚úÖ {curr}: {currencies[curr]}")
                            else:
                                print(f"   ‚ùå {curr}: –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
                    else:
                        error = data.get('error', {})
                        print(f"   ‚ùå –û—à–∏–±–∫–∞: {error.get('info', 'Unknown error')}")
                        return False
                else:
                    error_text = await response.text()
                    print(f"   ‚ùå HTTP Error {response.status}: {error_text}")
                    return False
            
            # –¢–µ—Å—Ç 2: Live rates
            print("\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ live rates...")
            
            url = "https://api.apilayer.com/currency_data/live"
            params = {
                'source': 'USD',
                'currencies': 'RUB,ZAR,THB,AED,IDR,EUR'
            }
            
            async with session.get(url, params=params) as response:
                if response.status == 200:
                    data = await response.json()
                    if data.get('success'):
                        quotes = data.get('quotes', {})
                        print(f"   ‚úÖ Live rates: –ø–æ–ª—É—á–µ–Ω–æ {len(quotes)} –∫—É—Ä—Å–æ–≤")
                        
                        for quote_key, rate in quotes.items():
                            # quote_key format: USDRUB, USDZAR, etc.
                            if quote_key.startswith('USD'):
                                currency = quote_key[3:]  # Remove 'USD'
                                print(f"   ‚úÖ USD/{currency}: {rate:.6f}")
                    else:
                        print(f"   ‚ùå –û—à–∏–±–∫–∞ live rates: {data.get('error', {}).get('info', 'Unknown')}")
                else:
                    print(f"   ‚ùå HTTP Error live rates: {response.status}")
            
            # –¢–µ—Å—Ç 3: Change rates (–∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤)
            print("\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ change rates...")
            
            url = "https://api.apilayer.com/currency_data/change"
            params = {
                'source': 'USD',
                'currencies': 'RUB,EUR',
                'start_date': '2024-01-01',
                'end_date': datetime.now().strftime('%Y-%m-%d')
            }
            
            async with session.get(url, params=params) as response:
                if response.status == 200:
                    data = await response.json()
                    if data.get('success'):
                        print(f"   ‚úÖ Change rates: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã")
                        
                        quotes = data.get('quotes', {})
                        for quote_key, info in quotes.items():
                            if isinstance(info, dict):
                                change = info.get('change', 0)
                                change_pct = info.get('change_pct', 0)
                                print(f"   ‚úÖ {quote_key}: –∏–∑–º–µ–Ω–µ–Ω–∏–µ {change:.6f} ({change_pct:.2f}%)")
                    else:
                        print(f"   ‚ùå –û—à–∏–±–∫–∞ change rates: {data.get('error', {}).get('info', 'Unknown')}")
                else:
                    print(f"   ‚ùå HTTP Error change rates: {response.status}")
            
            print("\n‚úÖ Currency Data API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            return True
            
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Currency Data API: {e}")
        import traceback
        traceback.print_exc()
        return False


async def test_integrated_fiat_service():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ fiat_rates_service"""
    
    print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ fiat_rates_service...")
    
    try:
        async with fiat_rates_service as service:
            
            # 1. Health check
            print("\n1. Health check...")
            health = await service.health_check()
            print(f"   Status: {health['status']}")
            print(f"   Response time: {health.get('response_time_ms', 'N/A')}ms")
            
            if health['status'] != 'healthy':
                print(f"   ‚ùå Service –Ω–µ –∑–¥–æ—Ä–æ–≤: {health.get('message', 'Unknown error')}")
                return False
            
            # 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä
            print("\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä...")
            
            test_pairs = [
                ('USD', 'RUB'),
                ('USD', 'ZAR'),
                ('USD', 'THB'),
                ('USD', 'AED'),
                ('USD', 'IDR'),
                ('EUR', 'RUB'),
                ('RUB', 'ZAR'),  # –ö—Ä–æ—Å—Å-–∫—É—Ä—Å
                ('ZAR', 'RUB'),  # –û–±—Ä–∞—Ç–Ω—ã–π –∫—Ä–æ—Å—Å-–∫—É—Ä—Å
            ]
            
            for from_curr, to_curr in test_pairs:
                rate = await service.get_fiat_rate(from_curr, to_curr)
                if rate is not None:
                    print(f"   ‚úÖ {from_curr}/{to_curr}: {rate:.6f}")
                else:
                    print(f"   ‚ùå {from_curr}/{to_curr}: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å")
            
            # 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ExchangeRate –æ–±—ä–µ–∫—Ç–æ–≤
            print("\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ExchangeRate –æ–±—ä–µ–∫—Ç–æ–≤...")
            
            for pair in ['USD/RUB', 'EUR/ZAR', 'RUB/THB']:
                exchange_rate = await service.get_fiat_exchange_rate(pair)
                if exchange_rate:
                    print(f"   ‚úÖ {pair}: {exchange_rate.rate:.6f} (source: {exchange_rate.source})")
                else:
                    print(f"   ‚ùå {pair}: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å ExchangeRate")
            
            print("\n‚úÖ –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π fiat_rates_service —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            return True
            
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ fiat_rates_service: {e}")
        import traceback
        traceback.print_exc()
        return False


async def test_unified_api_service():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ API —Å–µ—Ä–≤–∏—Å–∞"""
    
    print("\nüöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ API —Å–µ—Ä–≤–∏—Å–∞...")
    
    try:
        async with api_service as service:
            
            # 1. Health check
            print("\n1. –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π health check...")
            health = await service.health_check()
            print(f"   –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: {health['status']}")
            print(f"   Rapira API: {health['rapira_api'].get('status', 'unknown')}")
            print(f"   APILayer: {health['apilayer_api'].get('status', 'unknown')}")
            
            # 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä (—á–µ—Ä–µ–∑ Rapira)
            print("\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä...")
            
            crypto_pairs = ['BTC/USDT', 'ETH/USDT', 'TON/USDT', 'USDT/RUB']
            
            for pair in crypto_pairs:
                try:
                    rate = await service.get_exchange_rate(pair)
                    if rate:
                        print(f"   ‚úÖ {pair}: {rate.rate:.6f} (source: {rate.source})")
                    else:
                        print(f"   ‚ùå {pair}: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å")
                except Exception as e:
                    print(f"   ‚ùå {pair}: –æ—à–∏–±–∫–∞ - {e}")
            
            # 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–∞—Ç–Ω—ã—Ö –ø–∞—Ä (—á–µ—Ä–µ–∑ APILayer)
            print("\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–∞—Ç–Ω—ã—Ö –ø–∞—Ä...")
            
            fiat_pairs = ['USD/RUB', 'EUR/ZAR', 'RUB/THB']
            
            for pair in fiat_pairs:
                try:
                    rate = await service.get_exchange_rate(pair)
                    if rate:
                        print(f"   ‚úÖ {pair}: {rate.rate:.6f} (source: {rate.source})")
                    else:
                        print(f"   ‚ùå {pair}: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å")
                except Exception as e:
                    print(f"   ‚ùå {pair}: –æ—à–∏–±–∫–∞ - {e}")
            
            # 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –ø–∞—Ä
            print("\n4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –ø–∞—Ä...")
            
            from services.api_service import determine_pair_type
            
            test_pairs = [
                ('BTC/USDT', 'crypto'),
                ('USD/RUB', 'fiat'),
                ('USDT/RUB', 'mixed'),
                ('EUR/ZAR', 'fiat'),
                ('ETH/BTC', 'crypto')
            ]
            
            for pair, expected_type in test_pairs:
                actual_type = determine_pair_type(pair)
                if actual_type == expected_type:
                    print(f"   ‚úÖ {pair}: {actual_type}")
                else:
                    print(f"   ‚ùå {pair}: –æ–∂–∏–¥–∞–ª—Å—è {expected_type}, –ø–æ–ª—É—á–µ–Ω {actual_type}")
            
            print("\n‚úÖ –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π API —Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            return True
            
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API —Å–µ—Ä–≤–∏—Å–∞: {e}")
        import traceback
        traceback.print_exc()
        return False


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("üéØ –ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï APILAYER –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
    print("=" * 60)
    print(f"API Key: {config.API_LAYER_KEY[:10]}...")
    print(f"Exchange Rates API URL: {config.API_LAYER_URL}")
    print(f"Currency Data API URL: https://api.apilayer.com/currency_data")
    print("=" * 60)
    
    results = []
    
    # –¢–µ—Å—Ç 1: Exchange Rates Data API
    print("\n" + "=" * 60)
    result1 = await test_exchange_rates_data_api()
    results.append(("Exchange Rates Data API", result1))
    
    # –¢–µ—Å—Ç 2: Currency Data API
    print("\n" + "=" * 60)
    result2 = await test_currency_data_api()
    results.append(("Currency Data API", result2))
    
    # –¢–µ—Å—Ç 3: –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π fiat_rates_service
    print("\n" + "=" * 60)
    result3 = await test_integrated_fiat_service()
    results.append(("Fiat Rates Service", result3))
    
    # –¢–µ—Å—Ç 4: –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π API —Å–µ—Ä–≤–∏—Å
    print("\n" + "=" * 60)
    result4 = await test_unified_api_service()
    results.append(("Unified API Service", result4))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    
    all_passed = True
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name}: {status}")
        all_passed = all_passed and result
    
    print("=" * 60)
    if all_passed:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! APILayer –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print("\nüìã –ß—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:")
        print("‚Ä¢ Exchange Rates Data API - –ø–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç")
        print("‚Ä¢ Currency Data API - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –≤–∞–ª—é—Ç–∞—Ö")
        print("‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É Rapira (–∫—Ä–∏–ø—Ç–æ) –∏ APILayer (—Ñ–∏–∞—Ç)")
        print("‚Ä¢ –†–∞—Å—á–µ—Ç –∫—Ä–æ—Å—Å-–∫—É—Ä—Å–æ–≤")
        print("‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ fallback –º–µ—Ö–∞–Ω–∏–∑–º—ã")
        print("‚Ä¢ Health check –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
    else:
        print("‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞.")
    
    return all_passed


if __name__ == "__main__":
    try:
        success = asyncio.run(main())
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)