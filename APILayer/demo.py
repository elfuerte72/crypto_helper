#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã APILayer –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
"""

import asyncio
import sys
import os
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src'))

from services.api_service import api_service, determine_pair_type
from config import config

def print_header(title):
    """–ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫"""
    print("\n" + "=" * 60)
    print(f"üéØ {title}")
    print("=" * 60)

def print_rate_info(rate):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É—Ä—Å–µ"""
    if rate:
        print(f"   üí∞ –ö—É—Ä—Å: {rate.rate:.8f}")
        print(f"   üìä –ò—Å—Ç–æ—á–Ω–∏–∫: {rate.source}")
        print(f"   üïê –í—Ä–µ–º—è: {rate.timestamp}")
        if rate.bid:
            print(f"   üìà Bid: {rate.bid:.8f}")
        if rate.ask:
            print(f"   üìâ Ask: {rate.ask:.8f}")
        if rate.change_24h:
            change_icon = "üìà" if rate.change_24h > 0 else "üìâ"
            print(f"   {change_icon} –ò–∑–º–µ–Ω–µ–Ω–∏–µ 24—á: {rate.change_24h:.2f}%")
    else:
        print("   ‚ùå –ö—É—Ä—Å –Ω–µ –ø–æ–ª—É—á–µ–Ω")

async def demo_currency_rates():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç"""
    
    print_header("–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –†–ê–ë–û–¢–´ CRYPTO HELPER")
    print(f"üîë API Key: {config.API_LAYER_KEY[:10]}...")
    print(f"üåê Rapira URL: {config.RAPIRA_API_URL}")
    print(f"üåê APILayer URL: {config.API_LAYER_URL}")
    
    async with api_service as service:
        
        # Health Check
        print_header("–ü–†–û–í–ï–†–ö–ê –°–û–°–¢–û–Ø–ù–ò–Ø API")
        health = await service.health_check()
        print(f"üìä –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: {health['status']}")
        print(f"üîó Rapira API: {health['rapira_api'].get('status', 'unknown')}")
        print(f"üîó APILayer: {health['apilayer_api'].get('status', 'unknown')}")
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö –∫—É—Ä—Å–æ–≤
        print_header("–ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢–ù–´–ï –ö–£–†–°–´ (—á–µ—Ä–µ–∑ Rapira API)")
        
        crypto_pairs = ['BTC/USDT', 'ETH/USDT', 'TON/USDT', 'USDT/RUB']
        for pair in crypto_pairs:
            try:
                pair_type = determine_pair_type(pair)
                print(f"\nüî∏ {pair} (—Ç–∏–ø: {pair_type})")
                
                rate = await service.get_exchange_rate(pair)
                print_rate_info(rate)
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ñ–∏–∞—Ç–Ω—ã—Ö –∫—É—Ä—Å–æ–≤
        print_header("–§–ò–ê–¢–ù–´–ï –ö–£–†–°–´ (—á–µ—Ä–µ–∑ APILayer)")
        
        fiat_pairs = ['USD/RUB', 'EUR/RUB', 'USD/ZAR', 'USD/THB', 'USD/AED']
        for pair in fiat_pairs:
            try:
                pair_type = determine_pair_type(pair)
                print(f"\nüî∏ {pair} (—Ç–∏–ø: {pair_type})")
                
                rate = await service.get_exchange_rate(pair)
                print_rate_info(rate)
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫—Ä–æ—Å—Å-–∫—É—Ä—Å–æ–≤
        print_header("–ö–†–û–°–°-–ö–£–†–°–´ (—Ä–∞—Å—á–µ—Ç–Ω—ã–µ)")
        
        cross_pairs = ['RUB/ZAR', 'RUB/THB', 'BTC/RUB', 'ETH/RUB']
        for pair in cross_pairs:
            try:
                pair_type = determine_pair_type(pair)
                print(f"\nüî∏ {pair} (—Ç–∏–ø: {pair_type})")
                
                rate = await service.get_exchange_rate(pair)
                print_rate_info(rate)
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ —Å –Ω–∞—Ü–µ–Ω–∫–æ–π
        print_header("–†–ê–°–ß–ï–¢ –° –ù–ê–¶–ï–ù–ö–û–ô (–∫–∞–∫ –≤ –±–æ—Ç–µ)")
        
        # –ü—Ä–∏–º–µ—Ä —Å—Ü–µ–Ω–∞—Ä–∏—è: –º–µ–Ω–µ–¥–∂–µ—Ä —Ö–æ—á–µ—Ç –ø—Ä–æ–¥–∞—Ç—å USDT –∑–∞ —Ä—É–±–ª–∏ —Å –Ω–∞—Ü–µ–Ω–∫–æ–π 3%
        try:
            pair = 'USDT/RUB'
            margin_percent = 3.0
            
            print(f"\nüíº –°—Ü–µ–Ω–∞—Ä–∏–π: –ü—Ä–æ–¥–∞–∂–∞ USDT –∑–∞ —Ä—É–±–ª–∏")
            print(f"üìà –í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞: {pair}")
            print(f"üí∞ –ù–∞—Ü–µ–Ω–∫–∞: {margin_percent}%")
            
            rate = await service.get_exchange_rate(pair)
            if rate:
                base_rate = rate.rate
                margin_rate = base_rate * (1 + margin_percent / 100)
                
                print(f"\nüìä –ë–∞–∑–æ–≤—ã–π –∫—É—Ä—Å: {base_rate:.2f} RUB –∑–∞ 1 USDT")
                print(f"üìà –ö—É—Ä—Å —Å –Ω–∞—Ü–µ–Ω–∫–æ–π: {margin_rate:.2f} RUB –∑–∞ 1 USDT")
                print(f"üíµ –ü—Ä–∏–±—ã–ª—å —Å 1000 USDT: {(margin_rate - base_rate) * 1000:.2f} RUB")
                
                # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
                client_amount = 1000
                client_currency = 'USDT'
                
                print(f"\nüßÆ –†–∞—Å—á–µ—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞:")
                print(f"üí∞ –ö–ª–∏–µ–Ω—Ç –ø—Ä–æ–¥–∞–µ—Ç: {client_amount} {client_currency}")
                print(f"üí∏ –ö–ª–∏–µ–Ω—Ç –ø–æ–ª—É—á–∞–µ—Ç: {margin_rate * client_amount:.2f} RUB")
                print(f"üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫—É—Ä—Å: {margin_rate:.2f}")
                print(f"üè¶ –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: {rate.source}")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞—Å—á–µ—Ç–µ: {e}")
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è multiple rates
        print_header("–ü–û–õ–£–ß–ï–ù–ò–ï –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–• –ö–£–†–°–û–í")
        
        all_pairs = ['BTC/USDT', 'ETH/USDT', 'USD/RUB', 'EUR/RUB', 'RUB/ZAR']
        print(f"üìä –ü–æ–ª—É—á–∞–µ–º {len(all_pairs)} –∫—É—Ä—Å–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ...")
        
        try:
            start_time = datetime.now()
            rates = await service.get_multiple_rates(all_pairs)
            end_time = datetime.now()
            
            duration = (end_time - start_time).total_seconds()
            print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.2f} —Å–µ–∫—É–Ω–¥")
            
            successful_rates = [pair for pair, rate in rates.items() if rate is not None]
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ: {len(successful_rates)}/{len(all_pairs)} –∫—É—Ä—Å–æ–≤")
            
            for pair, rate in rates.items():
                status = "‚úÖ" if rate else "‚ùå"
                rate_value = f"{rate.rate:.6f}" if rate else "N/A"
                print(f"   {status} {pair}: {rate_value}")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤: {e}")
        
        # –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
        print_header("–ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï")
        print("üéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("\nüìã –ß—Ç–æ –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ:")
        print("‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ —á–µ—Ä–µ–∑ Rapira API")
        print("‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–∞—Ç–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ —á–µ—Ä–µ–∑ APILayer")
        print("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã")
        print("‚úÖ –†–∞—Å—á–µ—Ç –∫—Ä–æ—Å—Å-–∫—É—Ä—Å–æ–≤")
        print("‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Ü–µ–Ω–∫–∏ (–∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ)")
        print("‚úÖ –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤")
        print("‚úÖ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö")
        print("‚úÖ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É")
        
        print("\nüöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ Telegram –±–æ—Ç–µ!")

if __name__ == "__main__":
    try:
        asyncio.run(demo_currency_rates())
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)