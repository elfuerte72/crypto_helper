#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏ —Ä–∞—Å—á–µ—Ç–∞ –º–∞—Ä–∂–∏
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∫—É—Ä—Å–æ–≤
"""

import asyncio
import sys
import os
from decimal import Decimal

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from handlers.calculation_logic import MarginCalculator, calculate_margin_rate
from handlers.currency_pairs import CURRENCY_PAIRS


def test_margin_calculation_logic():
    """–¢–µ—Å—Ç –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏ —Ä–∞—Å—á–µ—Ç–∞ –º–∞—Ä–∂–∏"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏ —Ä–∞—Å—á–µ—Ç–∞ –º–∞—Ä–∂–∏")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    base_rate = Decimal('100.0')
    margin_percent = Decimal('5.0')
    test_amount = Decimal('1000.0')
    
    exchange_rate_data = {
        'rate': '100.0',
        'timestamp': '2024-01-01T12:00:00Z',
        'source': 'test'
    }
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏
    test_cases = [
        # –ü–∞—Ä—ã X/RUB - –¥–æ–ª–∂–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ú–ò–ù–£–° –ø—Ä–æ—Ü–µ–Ω—Ç
        {
            'pair_key': 'usdtrub',
            'expected_type': 'rub_quote',
            'expected_rate': Decimal('95.0'),  # 100 * (1 - 5/100) = 95
            'description': 'USDT/RUB - –º–∏–Ω—É—Å –ø—Ä–æ—Ü–µ–Ω—Ç'
        },
        {
            'pair_key': 'usdrub',
            'expected_type': 'rub_quote',
            'expected_rate': Decimal('95.0'),
            'description': 'USD/RUB - –º–∏–Ω—É—Å –ø—Ä–æ—Ü–µ–Ω—Ç'
        },
        {
            'pair_key': 'eurrub',
            'expected_type': 'rub_quote',
            'expected_rate': Decimal('95.0'),
            'description': 'EUR/RUB - –º–∏–Ω—É—Å –ø—Ä–æ—Ü–µ–Ω—Ç'
        },
        {
            'pair_key': 'aedrub',
            'expected_type': 'rub_quote',
            'expected_rate': Decimal('95.0'),
            'description': 'AED/RUB - –º–∏–Ω—É—Å –ø—Ä–æ—Ü–µ–Ω—Ç'
        },
        {
            'pair_key': 'thbrub',
            'expected_type': 'rub_quote',
            'expected_rate': Decimal('95.0'),
            'description': 'THB/RUB - –º–∏–Ω—É—Å –ø—Ä–æ—Ü–µ–Ω—Ç'
        },
        {
            'pair_key': 'zarrub',
            'expected_type': 'rub_quote',
            'expected_rate': Decimal('95.0'),
            'description': 'ZAR/RUB - –º–∏–Ω—É—Å –ø—Ä–æ—Ü–µ–Ω—Ç'
        },
        {
            'pair_key': 'idrrub',
            'expected_type': 'rub_quote',
            'expected_rate': Decimal('95.0'),
            'description': 'IDR/RUB - –º–∏–Ω—É—Å –ø—Ä–æ—Ü–µ–Ω—Ç'
        },
        
        # –ü–∞—Ä—ã RUB/X - –¥–æ–ª–∂–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ü–õ–Æ–° –ø—Ä–æ—Ü–µ–Ω—Ç
        {
            'pair_key': 'rubusdt',
            'expected_type': 'rub_base',
            'expected_rate': Decimal('105.0'),  # 100 * (1 + 5/100) = 105
            'description': 'RUB/USDT - –ø–ª—é—Å –ø—Ä–æ—Ü–µ–Ω—Ç'
        },
        {
            'pair_key': 'rubusd',
            'expected_type': 'rub_base',
            'expected_rate': Decimal('105.0'),
            'description': 'RUB/USD - –ø–ª—é—Å –ø—Ä–æ—Ü–µ–Ω—Ç'
        },
        {
            'pair_key': 'rubeur',
            'expected_type': 'rub_base',
            'expected_rate': Decimal('105.0'),
            'description': 'RUB/EUR - –ø–ª—é—Å –ø—Ä–æ—Ü–µ–Ω—Ç'
        },
        {
            'pair_key': 'rubaed',
            'expected_type': 'rub_base',
            'expected_rate': Decimal('105.0'),
            'description': 'RUB/AED - –ø–ª—é—Å –ø—Ä–æ—Ü–µ–Ω—Ç'
        },
        {
            'pair_key': 'rubthb',
            'expected_type': 'rub_base',
            'expected_rate': Decimal('105.0'),
            'description': 'RUB/THB - –ø–ª—é—Å –ø—Ä–æ—Ü–µ–Ω—Ç'
        },
        {
            'pair_key': 'rubzar',
            'expected_type': 'rub_base',
            'expected_rate': Decimal('105.0'),
            'description': 'RUB/ZAR - –ø–ª—é—Å –ø—Ä–æ—Ü–µ–Ω—Ç'
        },
        {
            'pair_key': 'rubidr',
            'expected_type': 'rub_base',
            'expected_rate': Decimal('105.0'),
            'description': 'RUB/IDR - –ø–ª—é—Å –ø—Ä–æ—Ü–µ–Ω—Ç'
        },
    ]
    
    print(f"üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {len(test_cases)} –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä")
    print(f"üìà –ë–∞–∑–æ–≤—ã–π –∫—É—Ä—Å: {base_rate}")
    print(f"üìà –ú–∞—Ä–∂–∞: {margin_percent}%")
    print(f"üí∞ –¢–µ—Å—Ç–æ–≤–∞—è —Å—É–º–º–∞: {test_amount}")
    print()
    
    success_count = 0
    total_count = len(test_cases)
    
    for i, test_case in enumerate(test_cases, 1):
        pair_key = test_case['pair_key']
        expected_type = test_case['expected_type']
        expected_rate = test_case['expected_rate']
        description = test_case['description']
        
        print(f"üîç –¢–µ—Å—Ç {i}/{total_count}: {description}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä–µ
        pair_info = CURRENCY_PAIRS.get(pair_key)
        if not pair_info:
            print(f"   ‚ùå –ü–∞—Ä–∞ {pair_key} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            continue
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø–∞—Ä—ã
            pair_type = MarginCalculator.detect_pair_type(pair_info)
            print(f"   üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω —Ç–∏–ø: {pair_type}")
            
            if pair_type != expected_type:
                print(f"   ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–∞—Ä—ã! –û–∂–∏–¥–∞–ª—Å—è: {expected_type}, –ø–æ–ª—É—á–µ–Ω: {pair_type}")
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—á–µ—Ç –∫—É—Ä—Å–∞
            calculated_rate = MarginCalculator.calculate_final_rate(
                base_rate, margin_percent, pair_info
            )
            print(f"   üìä –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π –∫—É—Ä—Å: {calculated_rate}")
            
            if calculated_rate != expected_rate:
                print(f"   ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫—É—Ä—Å! –û–∂–∏–¥–∞–ª—Å—è: {expected_rate}, –ø–æ–ª—É—á–µ–Ω: {calculated_rate}")
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π
            result = calculate_margin_rate(
                pair_info=pair_info,
                amount=test_amount,
                margin=margin_percent,
                exchange_rate_data=exchange_rate_data,
                use_banking_logic=False
            )
            
            print(f"   üí∞ –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {result.amount_final_rate}")
            print(f"   üìà –†–∞–∑–Ω–∏—Ü–∞: {result.amount_difference}")
            print(f"   ‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            
            success_count += 1
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        
        print()
    
    print("=" * 60)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}/{total_count}")
    print(f"‚ùå –ù–µ—É–¥–∞—á–Ω–æ: {total_count - success_count}/{total_count}")
    print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(success_count/total_count)*100:.1f}%")
    
    if success_count == total_count:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return True
    else:
        print("‚ö†Ô∏è  –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å —Ç–µ—Å—Ç–∞–º–∏!")
        return False


def test_specific_examples():
    """–¢–µ—Å—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ –∏–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π"""
    
    print("\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤")
    print("=" * 60)
    
    examples = [
        {
            'pair': 'USDT/RUB',
            'pair_key': 'usdtrub',
            'base_rate': Decimal('95.50'),
            'margin': Decimal('3.0'),
            'expected_operation': '–º–∏–Ω—É—Å',
            'expected_rate': Decimal('92.635'),  # 95.50 * (1 - 3/100) = 95.50 * 0.97 = 92.635
        },
        {
            'pair': 'RUB/USDT',
            'pair_key': 'rubusdt',
            'base_rate': Decimal('0.01047'),
            'margin': Decimal('2.5'),
            'expected_operation': '–ø–ª—é—Å',
            'expected_rate': Decimal('0.01073175'),  # 0.01047 * (1 + 2.5/100) = 0.01047 * 1.025 = 0.01073175
        },
        {
            'pair': 'USD/RUB',
            'pair_key': 'usdrub',
            'base_rate': Decimal('98.25'),
            'margin': Decimal('1.5'),
            'expected_operation': '–º–∏–Ω—É—Å',
            'expected_rate': Decimal('96.77625'),  # 98.25 * (1 - 1.5/100) = 98.25 * 0.985 = 96.77625
        },
        {
            'pair': 'RUB/USD',
            'pair_key': 'rubusd',
            'base_rate': Decimal('0.01018'),
            'margin': Decimal('4.0'),
            'expected_operation': '–ø–ª—é—Å',
            'expected_rate': Decimal('0.01058720'),  # 0.01018 * (1 + 4/100) = 0.01018 * 1.04 = 0.01058720
        },
    ]
    
    for i, example in enumerate(examples, 1):
        print(f"üîç –ü—Ä–∏–º–µ—Ä {i}: {example['pair']}")
        print(f"   üìä –ë–∞–∑–æ–≤—ã–π –∫—É—Ä—Å: {example['base_rate']}")
        print(f"   üìà –ú–∞—Ä–∂–∞: {example['margin']}%")
        print(f"   üîÑ –û–ø–µ—Ä–∞—Ü–∏—è: {example['expected_operation']} –ø—Ä–æ—Ü–µ–Ω—Ç")
        
        pair_info = CURRENCY_PAIRS.get(example['pair_key'])
        if not pair_info:
            print(f"   ‚ùå –ü–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            continue
        
        try:
            calculated_rate = MarginCalculator.calculate_final_rate(
                example['base_rate'], example['margin'], pair_info
            )
            
            print(f"   üéØ –û–∂–∏–¥–∞–µ–º—ã–π –∫—É—Ä—Å: {example['expected_rate']}")
            print(f"   üìä –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π –∫—É—Ä—Å: {calculated_rate}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ 8 –∑–Ω–∞–∫–æ–≤
            if abs(calculated_rate - example['expected_rate']) < Decimal('0.00000001'):
                print(f"   ‚úÖ –†–∞—Å—á–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω!")
            else:
                print(f"   ‚ùå –†–∞—Å—á–µ—Ç –Ω–µ–≤–µ—Ä–µ–Ω!")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        print()


if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏ —Ä–∞—Å—á–µ—Ç–∞ –º–∞—Ä–∂–∏")
    print()
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã
    main_test_passed = test_margin_calculation_logic()
    
    # –¢–µ—Å—Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
    test_specific_examples()
    
    print("\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    
    if main_test_passed:
        print("‚úÖ –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        sys.exit(0)
    else:
        print("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–µ!")
        sys.exit(1)