#!/usr/bin/env python3
"""
Unified Cache Manager for Crypto Helper Bot
–†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É Memory Leak —Å TTL cleanup –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —Ä–∞–∑–º–µ—Ä–∞ –∫—ç—à–∞
"""

import asyncio
import time
from typing import Dict, Optional, Any, Tuple
from dataclasses import dataclass
from collections import OrderedDict
import threading
import logging

logger = logging.getLogger(__name__)


@dataclass
class CacheEntry:
    """–ó–∞–ø–∏—Å—å –≤ –∫—ç—à–µ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏"""
    data: Any
    timestamp: float
    access_count: int = 0
    last_access: float = None
    
    def __post_init__(self):
        if self.last_access is None:
            self.last_access = self.timestamp


class UnifiedCacheManager:
    """
    –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∫—ç—à–∞ —Å:
    - TTL (Time To Live) cleanup
    - LRU (Least Recently Used) eviction
    - –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫—ç—à–∞
    - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
    """
    
    def __init__(
        self,
        max_size: int = 100,
        default_ttl: int = 300,  # 5 –º–∏–Ω—É—Ç
        cleanup_interval: int = 60,  # –û—á–∏—Å—Ç–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        enable_stats: bool = True
    ):
        self.max_size = max_size
        self.default_ttl = default_ttl
        self.cleanup_interval = cleanup_interval
        self.enable_stats = enable_stats
        
        # LRU cache implementation
        self._cache: OrderedDict[str, CacheEntry] = OrderedDict()
        self._lock = threading.RLock()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞
        self._stats = {
            'hits': 0,
            'misses': 0,
            'evictions': 0,
            'ttl_cleanups': 0,
            'total_sets': 0,
            'memory_usage_bytes': 0
        }
        
        # Background cleanup task
        self._cleanup_task: Optional[asyncio.Task] = None
        self._running = False
        
        logger.info(
            f"üóÑÔ∏è Cache Manager initialized\n"
            f"   ‚îú‚îÄ Max size: {self.max_size} entries\n"
            f"   ‚îú‚îÄ Default TTL: {self.default_ttl}s\n"
            f"   ‚îú‚îÄ Cleanup interval: {self.cleanup_interval}s\n"
            f"   ‚îî‚îÄ Stats enabled: {self.enable_stats}"
        )
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ background cleanup task"""
        if not self._running:
            self._running = True
            self._cleanup_task = asyncio.create_task(self._background_cleanup())
            logger.info("‚úÖ Cache Manager background cleanup started")
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ background cleanup task"""
        self._running = False
        if self._cleanup_task:
            self._cleanup_task.cancel()
            try:
                await self._cleanup_task
            except asyncio.CancelledError:
                pass
            self._cleanup_task = None
        logger.info("‚èπÔ∏è Cache Manager stopped")
    
    def get(self, key: str) -> Optional[Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞
        
        Args:
            key: –ö–ª—é—á –∫—ç—à–∞
            
        Returns:
            –ó–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ/—É—Å—Ç–∞—Ä–µ–ª–æ
        """
        with self._lock:
            if key not in self._cache:
                self._stats['misses'] += 1
                return None
            
            entry = self._cache[key]
            current_time = time.time()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º TTL
            if current_time - entry.timestamp > self.default_ttl:
                logger.debug(f"Cache key '{key}' expired (TTL: {self.default_ttl}s)")
                del self._cache[key]
                self._stats['misses'] += 1
                self._stats['ttl_cleanups'] += 1
                return None
            
            # –û–±–Ω–æ–≤–ª—è–µ–º LRU order –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ—Å—Ç—É–ø–∞
            entry.access_count += 1
            entry.last_access = current_time
            self._cache.move_to_end(key)  # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤ –∫–æ–Ω–µ—Ü (most recently used)
            
            self._stats['hits'] += 1
            logger.debug(f"Cache HIT for key '{key}' (access #{entry.access_count})")
            return entry.data
    
    def set(self, key: str, value: Any, ttl: Optional[int] = None) -> None:
        """
        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫—ç—à
        
        Args:
            key: –ö–ª—é—á –∫—ç—à–∞
            value: –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            ttl: TTL –¥–ª—è —ç—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ—Ç default_ttl)
        """
        with self._lock:
            current_time = time.time()
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            entry = CacheEntry(
                data=value,
                timestamp=current_time
            )
            
            # –ï—Å–ª–∏ –∫–ª—é—á —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º
            if key in self._cache:
                old_entry = self._cache[key]
                entry.access_count = old_entry.access_count
                logger.debug(f"Cache UPDATE for key '{key}'")
            else:
                logger.debug(f"Cache SET for key '{key}'")
            
            self._cache[key] = entry
            self._cache.move_to_end(key)  # –ù–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –≤ –∫–æ–Ω–µ—Ü
            self._stats['total_sets'] += 1
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞
            self._enforce_size_limit()
    
    def delete(self, key: str) -> bool:
        """
        –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á –∏–∑ –∫—ç—à–∞
        
        Args:
            key: –ö–ª—é—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            
        Returns:
            True –µ—Å–ª–∏ –∫–ª—é—á –±—ã–ª –Ω–∞–π–¥–µ–Ω –∏ —É–¥–∞–ª–µ–Ω
        """
        with self._lock:
            if key in self._cache:
                del self._cache[key]
                logger.debug(f"Cache DELETE for key '{key}'")
                return True
            return False
    
    def clear(self) -> None:
        """–û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫—ç—à"""
        with self._lock:
            old_size = len(self._cache)
            self._cache.clear()
            logger.info(f"Cache CLEARED: removed {old_size} entries")
    
    def _enforce_size_limit(self) -> None:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫—ç—à–∞ (LRU eviction)"""
        while len(self._cache) > self.max_size:
            # –£–¥–∞–ª—è–µ–º —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π (least recently used) —ç–ª–µ–º–µ–Ω—Ç
            oldest_key = next(iter(self._cache))
            oldest_entry = self._cache[oldest_key]
            
            logger.debug(
                f"LRU EVICTION: removing '{oldest_key}' "
                f"(age: {time.time() - oldest_entry.timestamp:.1f}s, "
                f"accesses: {oldest_entry.access_count})"
            )
            
            del self._cache[oldest_key]
            self._stats['evictions'] += 1
    
    def cleanup_expired(self) -> int:
        """
        –†—É—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π
        
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        """
        with self._lock:
            current_time = time.time()
            expired_keys = []
            
            for key, entry in self._cache.items():
                if current_time - entry.timestamp > self.default_ttl:
                    expired_keys.append(key)
            
            for key in expired_keys:
                del self._cache[key]
                self._stats['ttl_cleanups'] += 1
            
            if expired_keys:
                logger.info(f"TTL CLEANUP: removed {len(expired_keys)} expired entries")
            
            return len(expired_keys)
    
    async def _background_cleanup(self) -> None:
        """Background task –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏"""
        logger.info(f"üîÑ Background cleanup started (interval: {self.cleanup_interval}s)")
        
        while self._running:
            try:
                await asyncio.sleep(self.cleanup_interval)
                
                if not self._running:
                    break
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É
                expired_count = self.cleanup_expired()
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
                if int(time.time()) % 600 == 0:  # –ö–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
                    stats = self.get_stats()
                    logger.info(
                        f"üìä Cache Stats:\n"
                        f"   ‚îú‚îÄ Entries: {stats['current_size']}/{self.max_size}\n"
                        f"   ‚îú‚îÄ Hit ratio: {stats['hit_ratio']:.1%}\n"
                        f"   ‚îú‚îÄ Total cleanups: {stats['ttl_cleanups']}\n"
                        f"   ‚îî‚îÄ Total evictions: {stats['evictions']}"
                    )
                
            except asyncio.CancelledError:
                logger.info("Background cleanup cancelled")
                break
            except Exception as e:
                logger.error(f"Background cleanup error: {e}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
                await asyncio.sleep(5)
    
    def get_stats(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        with self._lock:
            total_requests = self._stats['hits'] + self._stats['misses']
            hit_ratio = self._stats['hits'] / total_requests if total_requests > 0 else 0.0
            
            # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
            memory_usage = self._estimate_memory_usage()
            
            return {
                'current_size': len(self._cache),
                'max_size': self.max_size,
                'hits': self._stats['hits'],
                'misses': self._stats['misses'],
                'hit_ratio': hit_ratio,
                'evictions': self._stats['evictions'],
                'ttl_cleanups': self._stats['ttl_cleanups'],
                'total_sets': self._stats['total_sets'],
                'memory_usage_bytes': memory_usage,
                'memory_usage_mb': memory_usage / (1024 * 1024),
                'utilization': len(self._cache) / self.max_size if self.max_size > 0 else 0.0
            }
    
    def _estimate_memory_usage(self) -> int:
        """
        –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ –∫—ç—à–µ–º
        
        Returns:
            –†–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)
        """
        total_size = 0
        
        for key, entry in self._cache.items():
            # –†–∞–∑–º–µ—Ä –∫–ª—é—á–∞
            total_size += len(key.encode('utf-8'))
            
            # –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞)
            if isinstance(entry.data, str):
                total_size += len(entry.data.encode('utf-8'))
            elif isinstance(entry.data, dict):
                # –î–ª—è —Å–ª–æ–≤–∞—Ä–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É
                total_size += len(str(entry.data).encode('utf-8'))
            elif isinstance(entry.data, (int, float)):
                total_size += 8  # –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä —á–∏—Å–ª–∞
            else:
                total_size += 64  # –î–µ—Ñ–æ–ª—Ç–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤
            
            # –†–∞–∑–º–µ—Ä –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö CacheEntry
            total_size += 64  # timestamp, access_count, last_access
        
        return total_size
    
    def has_key(self, key: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–∞ –≤ –∫—ç—à–µ (–±–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è LRU)"""
        with self._lock:
            if key not in self._cache:
                return False
            
            entry = self._cache[key]
            current_time = time.time()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º TTL –±–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            return (current_time - entry.timestamp) <= self.default_ttl


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –∫—ç—à-–º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö

# –ö—ç—à –¥–ª—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç (–±—ã—Å—Ç—Ä–æ–µ —É—Å—Ç–∞—Ä–µ–≤–∞–Ω–∏–µ)
rates_cache = UnifiedCacheManager(
    max_size=100,
    default_ttl=300,  # 5 –º–∏–Ω—É—Ç
    cleanup_interval=60,
    enable_stats=True
)

# –ö—ç—à –¥–ª—è API –æ—Ç–≤–µ—Ç–æ–≤ (—Å—Ä–µ–¥–Ω–µ–µ —É—Å—Ç–∞—Ä–µ–≤–∞–Ω–∏–µ)
api_cache = UnifiedCacheManager(
    max_size=50,
    default_ttl=600,  # 10 –º–∏–Ω—É—Ç
    cleanup_interval=120,
    enable_stats=True
)

# –ö—ç—à –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö (–º–µ–¥–ª–µ–Ω–Ω–æ–µ —É—Å—Ç–∞—Ä–µ–≤–∞–Ω–∏–µ)
static_cache = UnifiedCacheManager(
    max_size=20,
    default_ttl=3600,  # 1 —á–∞—Å
    cleanup_interval=300,
    enable_stats=True
)


async def start_all_caches():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ –∫—ç—à-–º–µ–Ω–µ–¥–∂–µ—Ä—ã"""
    await rates_cache.start()
    await api_cache.start()
    await static_cache.start()
    logger.info("üöÄ All cache managers started")


async def stop_all_caches():
    """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –∫—ç—à-–º–µ–Ω–µ–¥–∂–µ—Ä—ã"""
    await rates_cache.stop()
    await api_cache.stop()
    await static_cache.stop()
    logger.info("‚èπÔ∏è All cache managers stopped")


def get_all_cache_stats() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ—Ö –∫—ç—à–µ–π"""
    return {
        'rates_cache': rates_cache.get_stats(),
        'api_cache': api_cache.get_stats(),
        'static_cache': static_cache.get_stats(),
        'total_memory_mb': sum([
            rates_cache.get_stats()['memory_usage_mb'],
            api_cache.get_stats()['memory_usage_mb'],
            static_cache.get_stats()['memory_usage_mb']
        ])
    }