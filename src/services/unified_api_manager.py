#!/usr/bin/env python3
"""
Unified API Manager for Crypto Helper Bot
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç Rapira API –∏ APILayer –≤ –µ–¥–∏–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Ä–æ—É—Ç–∏–Ω–≥–æ–º
TASK-PERF-002: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è API Performance
"""

import asyncio
import aiohttp
from typing import Dict, Optional, List, Tuple, Any, Set
from dataclasses import dataclass
from datetime import datetime, timedelta
from decimal import Decimal
import random
import time

try:
    from ..config import config
    from ..utils.logger import get_api_logger
    from .models import ExchangeRate, RapiraAPIError, APILayerError
    from .cache_manager import api_cache
    from .api_service import api_service
    from .fiat_rates_service import fiat_rates_service
except ImportError:
    # Handle direct execution
    import sys
    import os
    sys.path.insert(0, os.path.dirname(os.path.dirname(__file__)))
    from config import config
    from utils.logger import get_api_logger
    from services.models import ExchangeRate, RapiraAPIError, APILayerError
    from services.cache_manager import api_cache
    from services.api_service import api_service
    from services.fiat_rates_service import fiat_rates_service

logger = get_api_logger()


@dataclass
class APIRoute:
    """–ú–∞—Ä—à—Ä—É—Ç –¥–ª—è API –∑–∞–ø—Ä–æ—Å–∞"""
    api_name: str
    service: Any
    currency_types: Set[str]
    priority: int  # –ß–µ–º –º–µ–Ω—å—à–µ, —Ç–µ–º –≤—ã—à–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    

@dataclass
class BatchRequest:
    """Batch –∑–∞–ø—Ä–æ—Å –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä"""
    pairs: List[str]
    timestamp: datetime
    timeout: float = 10.0


@dataclass
class CircuitBreakerState:
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ Circuit Breaker –¥–ª—è API"""
    failures: int = 0
    last_failure: Optional[datetime] = None
    is_open: bool = False
    next_attempt: Optional[datetime] = None


class APIRouter:
    """–†–æ—É—Ç–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–±–æ—Ä–∞ API –ø–æ —Ç–∏–ø—É –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã"""
    
    def __init__(self):
        self.crypto_currencies = {
            'BTC', 'ETH', 'TON', 'USDT', 'USDC', 'LTC', 'TRX', 
            'BNB', 'DAI', 'DOGE', 'ETC', 'OP', 'XMR', 'SOL', 'NOT'
        }
        self.fiat_currencies = {
            'USD', 'EUR', 'RUB', 'ZAR', 'THB', 'AED', 'IDR', 
            'GBP', 'JPY', 'CAD', 'AUD', 'CHF', 'CNY'
        }
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ API
        self.routes = [
            APIRoute(
                api_name='rapira',
                service=api_service,
                currency_types={'crypto'},
                priority=1  # –í—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
            ),
            APIRoute(
                api_name='apilayer',
                service=fiat_rates_service,
                currency_types={'fiat'},
                priority=1  # –í—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —Ñ–∏–∞—Ç–Ω—ã—Ö –≤–∞–ª—é—Ç
            )
        ]
        
        logger.info(
            f"üîÄ API Router initialized\n"
            f"   ‚îú‚îÄ Crypto currencies: {len(self.crypto_currencies)}\n"
            f"   ‚îú‚îÄ Fiat currencies: {len(self.fiat_currencies)}\n"
            f"   ‚îî‚îÄ Routes configured: {len(self.routes)}"
        )
    
    def determine_pair_type(self, pair: str) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã
        
        Args:
            pair: –í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'BTC/USDT', 'USD/RUB')
            
        Returns:
            str: 'crypto', 'fiat', 'mixed', 'unknown'
        """
        try:
            base_currency, quote_currency = pair.split('/')
            
            base_is_crypto = base_currency in self.crypto_currencies
            quote_is_crypto = quote_currency in self.crypto_currencies
            base_is_fiat = base_currency in self.fiat_currencies
            quote_is_fiat = quote_currency in self.fiat_currencies
            
            if base_is_crypto and quote_is_crypto:
                return 'crypto'
            elif base_is_fiat and quote_is_fiat:
                return 'fiat'
            elif (base_is_crypto or quote_is_crypto) and (base_is_fiat or quote_is_fiat):
                return 'mixed'
            else:
                return 'unknown'
                
        except ValueError:
            return 'invalid'
    
    def get_best_route(self, pair: str) -> Optional[APIRoute]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –ª—É—á—à–∏–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã
        
        Args:
            pair: –í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞
            
        Returns:
            Optional[APIRoute]: –õ—É—á—à–∏–π –º–∞—Ä—à—Ä—É—Ç –∏–ª–∏ None
        """
        pair_type = self.determine_pair_type(pair)
        
        if pair_type == 'invalid':
            logger.error(f"Invalid pair format: {pair}")
            return None
        
        # –î–ª—è mixed –ø–∞—Ä (–∫—Ä–∏–ø—Ç–æ+—Ñ–∏–∞—Ç) –∏—Å–ø–æ–ª—å–∑—É–µ–º Rapira API
        if pair_type == 'mixed':
            pair_type = 'crypto'
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã
        suitable_routes = [
            route for route in self.routes
            if pair_type in route.currency_types
        ]
        
        if not suitable_routes:
            logger.warning(f"No suitable route found for pair: {pair} (type: {pair_type})")
            return None
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        best_route = min(suitable_routes, key=lambda r: r.priority)
        
        logger.debug(f"Selected {best_route.api_name} for {pair} (type: {pair_type})")
        return best_route


class CircuitBreaker:
    """Circuit Breaker –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –∫–∞—Å–∫–∞–¥–Ω—ã—Ö –æ—à–∏–±–æ–∫ API"""
    
    def __init__(self, failure_threshold: int = 5, reset_timeout: int = 60):
        self.failure_threshold = failure_threshold
        self.reset_timeout = reset_timeout
        self.states: Dict[str, CircuitBreakerState] = {}
        
        logger.info(
            f"‚ö° Circuit Breaker initialized\n"
            f"   ‚îú‚îÄ Failure threshold: {failure_threshold}\n"
            f"   ‚îî‚îÄ Reset timeout: {reset_timeout}s"
        )
    
    def get_state(self, api_name: str) -> CircuitBreakerState:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ Circuit Breaker –¥–ª—è API"""
        if api_name not in self.states:
            self.states[api_name] = CircuitBreakerState()
        return self.states[api_name]
    
    def is_open(self, api_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –æ—Ç–∫—Ä—ã—Ç –ª–∏ Circuit Breaker"""
        state = self.get_state(api_name)
        
        if not state.is_open:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
        if state.next_attempt and datetime.now() >= state.next_attempt:
            logger.info(f"üîÑ Circuit Breaker for {api_name}: attempting reset")
            state.is_open = False
            state.next_attempt = None
            return False
        
        return True
    
    def record_success(self, api_name: str):
        """–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —É—Å–ø–µ—à–Ω—ã–π –≤—ã–∑–æ–≤"""
        state = self.get_state(api_name)
        if state.failures > 0:
            logger.info(f"‚úÖ Circuit Breaker for {api_name}: success recorded, resetting failures")
        
        state.failures = 0
        state.is_open = False
        state.next_attempt = None
    
    def record_failure(self, api_name: str):
        """–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–µ—É–¥–∞—á–Ω—ã–π –≤—ã–∑–æ–≤"""
        state = self.get_state(api_name)
        state.failures += 1
        state.last_failure = datetime.now()
        
        if state.failures >= self.failure_threshold and not state.is_open:
            state.is_open = True
            state.next_attempt = datetime.now() + timedelta(seconds=self.reset_timeout)
            
            logger.warning(
                f"üö® Circuit Breaker for {api_name}: OPENED\n"
                f"   ‚îú‚îÄ Failures: {state.failures}/{self.failure_threshold}\n"
                f"   ‚îî‚îÄ Reset attempt at: {state.next_attempt}"
            )
        else:
            logger.warning(f"‚ö†Ô∏è Circuit Breaker for {api_name}: failure {state.failures}/{self.failure_threshold}")


class RatePreloader:
    """–ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑—á–∏–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç"""
    
    def __init__(self, preload_interval: int = 120):  # 2 –º–∏–Ω—É—Ç—ã
        self.preload_interval = preload_interval
        self.popular_pairs = [
            'USDT/RUB',  # –°–∞–º–∞—è –ø–æ–ø—É–ª—è—Ä–Ω–∞—è –∫—Ä–∏–ø—Ç–æ –ø–∞—Ä–∞
            'USD/RUB',   # –ü–æ–ø—É–ª—è—Ä–Ω–∞—è —Ñ–∏–∞—Ç–Ω–∞—è –ø–∞—Ä–∞
            'EUR/RUB',   # –ü–æ–ø—É–ª—è—Ä–Ω–∞—è —Ñ–∏–∞—Ç–Ω–∞—è –ø–∞—Ä–∞
            'BTC/USDT',  # –ü–æ–ø—É–ª—è—Ä–Ω–∞—è –∫—Ä–∏–ø—Ç–æ –ø–∞—Ä–∞
            'ETH/USDT',  # –ü–æ–ø—É–ª—è—Ä–Ω–∞—è –∫—Ä–∏–ø—Ç–æ –ø–∞—Ä–∞
        ]
        self.preload_task: Optional[asyncio.Task] = None
        self.running = False
        
        logger.info(
            f"üì¶ Rate Preloader initialized\n"
            f"   ‚îú‚îÄ Preload interval: {preload_interval}s\n"
            f"   ‚îî‚îÄ Popular pairs: {len(self.popular_pairs)}"
        )
    
    async def start_preloading(self, unified_manager):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É –∫—É—Ä—Å–æ–≤"""
        if self.running:
            logger.warning("Rate preloader already running")
            return
        
        self.running = True
        self.preload_task = asyncio.create_task(
            self._preload_loop(unified_manager)
        )
        logger.info("‚úÖ Rate preloader started")
    
    async def stop_preloading(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É –∫—É—Ä—Å–æ–≤"""
        self.running = False
        if self.preload_task:
            self.preload_task.cancel()
            try:
                await self.preload_task
            except asyncio.CancelledError:
                pass
            self.preload_task = None
        logger.info("‚èπÔ∏è Rate preloader stopped")
    
    async def _preload_loop(self, unified_manager):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏"""
        logger.info(f"üîÑ Starting preload loop for {len(self.popular_pairs)} pairs")
        
        while self.running:
            try:
                await self._preload_popular_rates(unified_manager)
                await asyncio.sleep(self.preload_interval)
            except asyncio.CancelledError:
                logger.info("Preload loop cancelled")
                break
            except Exception as e:
                logger.error(f"Error in preload loop: {e}")
                await asyncio.sleep(10)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    async def _preload_popular_rates(self, unified_manager):
        """–ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫—É—Ä—Å—ã"""
        start_time = time.time()
        successful_preloads = 0
        
        logger.debug(f"üì¶ Preloading {len(self.popular_pairs)} popular pairs")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        tasks = []
        for pair in self.popular_pairs:
            task = asyncio.create_task(
                self._preload_single_pair(unified_manager, pair)
            )
            tasks.append((pair, task))
        
        # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
        for pair, task in tasks:
            try:
                rate = await task
                if rate:
                    successful_preloads += 1
                    logger.debug(f"‚úÖ Preloaded {pair}: {rate.rate}")
                else:
                    logger.debug(f"‚ùå Failed to preload {pair}")
            except Exception as e:
                logger.warning(f"Error preloading {pair}: {e}")
        
        duration = time.time() - start_time
        logger.info(
            f"üì¶ Preload completed\n"
            f"   ‚îú‚îÄ Successful: {successful_preloads}/{len(self.popular_pairs)}\n"
            f"   ‚îú‚îÄ Duration: {duration:.2f}s\n"
            f"   ‚îî‚îÄ Cache utilization: {api_cache.get_stats()['utilization']:.1%}"
        )
    
    async def _preload_single_pair(self, unified_manager, pair: str) -> Optional[ExchangeRate]:
        """–ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫—É—Ä—Å –¥–ª—è –æ–¥–Ω–æ–π –ø–∞—Ä—ã"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏
            rate = await asyncio.wait_for(
                unified_manager.get_exchange_rate(pair, use_cache=False),
                timeout=5.0
            )
            return rate
        except asyncio.TimeoutError:
            logger.debug(f"Preload timeout for {pair}")
            return None
        except Exception as e:
            logger.debug(f"Preload error for {pair}: {e}")
            return None


class UnifiedAPIManager:
    """–ï–¥–∏–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä API —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Ä–æ—É—Ç–∏–Ω–≥–æ–º –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    
    def __init__(self):
        self.router = APIRouter()
        self.circuit_breaker = CircuitBreaker()
        self.preloader = RatePreloader()
        
        # –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é HTTP —Å–µ—Å—Å–∏—é
        self.session: Optional[aiohttp.ClientSession] = None
        self._session_lock = asyncio.Lock()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.stats = {
            'total_requests': 0,
            'cache_hits': 0,
            'cache_misses': 0,
            'circuit_breaker_blocks': 0,
            'batch_requests': 0,
            'preload_hits': 0
        }
        
        logger.info("üöÄ Unified API Manager initialized")
    
    async def start(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä API"""
        await self._ensure_session()
        await self.preloader.start_preloading(self)
        logger.info("‚úÖ Unified API Manager started")
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä API"""
        await self.preloader.stop_preloading()
        await self._close_session()
        logger.info("‚èπÔ∏è Unified API Manager stopped")
    
    async def _ensure_session(self):
        """–£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ HTTP —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞"""
        async with self._session_lock:
            if not self.session or self.session.closed:
                # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ connection pool
                connector = aiohttp.TCPConnector(
                    limit=200,              # –£–í–ï–õ–ò–ß–ï–ù–û: –æ–±—â–∏–π –ª–∏–º–∏—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
                    limit_per_host=50,      # –£–í–ï–õ–ò–ß–ï–ù–û: –ª–∏–º–∏—Ç –Ω–∞ —Ö–æ—Å—Ç
                    ttl_dns_cache=300,      # DNS –∫—ç—à –Ω–∞ 5 –º–∏–Ω—É—Ç
                    use_dns_cache=True,
                    keepalive_timeout=60,   # –£–í–ï–õ–ò–ß–ï–ù–û: keep-alive
                    enable_cleanup_closed=True,
                    timeout_ceil_threshold=5
                )
                
                # –°–û–ö–†–ê–©–ï–ù–ù–´–ï —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è production
                timeout = aiohttp.ClientTimeout(
                    total=10,               # –°–û–ö–†–ê–©–ï–ù–û: —Å 30s –¥–æ 10s
                    connect=5,              # –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                    sock_connect=3,         # –¢–∞–π–º–∞—É—Ç —Å–æ–∫–µ—Ç–∞
                    sock_read=5             # –¢–∞–π–º–∞—É—Ç —á—Ç–µ–Ω–∏—è
                )
                
                headers = {
                    'User-Agent': 'CryptoHelper-UnifiedAPI/2.0',
                    'Accept': 'application/json',
                    'Accept-Encoding': 'gzip, deflate',
                    'Connection': 'keep-alive'
                }
                
                self.session = aiohttp.ClientSession(
                    connector=connector,
                    timeout=timeout,
                    headers=headers,
                    raise_for_status=False
                )
                
                logger.info(
                    f"üîó Optimized HTTP session created\n"
                    f"   ‚îú‚îÄ Connection limit: 200 (50 per host)\n"
                    f"   ‚îú‚îÄ Keep-alive timeout: 60s\n"
                    f"   ‚îú‚îÄ Total timeout: 10s\n"
                    f"   ‚îî‚îÄ DNS cache TTL: 300s"
                )
    
    async def _close_session(self):
        """–ó–∞–∫—Ä—ã—Ç—å HTTP —Å–µ—Å—Å–∏—é"""
        async with self._session_lock:
            if self.session and not self.session.closed:
                await self.session.close()
                self.session = None
                logger.info("üîí HTTP session closed")
    
    async def get_exchange_rate(
        self, 
        pair: str, 
        use_cache: bool = True,
        timeout: Optional[float] = None
    ) -> Optional[ExchangeRate]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –æ–±–º–µ–Ω–∞ –¥–ª—è –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã
        
        Args:
            pair: –í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'BTC/USDT')
            use_cache: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à
            timeout: –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞
            
        Returns:
            Optional[ExchangeRate]: –ö—É—Ä—Å –æ–±–º–µ–Ω–∞ –∏–ª–∏ None
        """
        self.stats['total_requests'] += 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if use_cache:
            cached_rate = self._get_from_cache(pair)
            if cached_rate:
                self.stats['cache_hits'] += 1
                logger.debug(f"üíæ Cache HIT for {pair}")
                return cached_rate
            else:
                self.stats['cache_misses'] += 1
        
        # –ù–∞—Ö–æ–¥–∏–º –º–∞—Ä—à—Ä—É—Ç
        route = self.router.get_best_route(pair)
        if not route:
            logger.error(f"No route found for pair: {pair}")
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Circuit Breaker
        if self.circuit_breaker.is_open(route.api_name):
            self.stats['circuit_breaker_blocks'] += 1
            logger.warning(f"üö® Circuit Breaker OPEN for {route.api_name}, blocking request for {pair}")
            return None
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        try:
            rate = await self._execute_api_request(route, pair, timeout)
            
            if rate:
                self.circuit_breaker.record_success(route.api_name)
                if use_cache:
                    self._store_in_cache(pair, rate)
                logger.debug(f"‚úÖ Successfully fetched {pair} via {route.api_name}")
                return rate
            else:
                self.circuit_breaker.record_failure(route.api_name)
                logger.warning(f"‚ùå Failed to fetch {pair} via {route.api_name}")
                return None
                
        except Exception as e:
            self.circuit_breaker.record_failure(route.api_name)
            logger.error(f"‚ùå Error fetching {pair} via {route.api_name}: {e}")
            return None
    
    async def get_multiple_rates(
        self, 
        pairs: List[str], 
        use_cache: bool = True,
        timeout: Optional[float] = None
    ) -> Dict[str, Optional[ExchangeRate]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ (batch request)
        
        Args:
            pairs: –°–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä
            use_cache: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à
            timeout: –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞
            
        Returns:
            Dict[str, Optional[ExchangeRate]]: –°–ª–æ–≤–∞—Ä—å –∫—É—Ä—Å–æ–≤
        """
        self.stats['batch_requests'] += 1
        logger.info(f"üì¶ Batch request for {len(pairs)} pairs")
        
        start_time = time.time()
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        tasks = []
        for pair in pairs:
            task = asyncio.create_task(
                self.get_exchange_rate(pair, use_cache, timeout)
            )
            tasks.append((pair, task))
        
        # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
        results = {}
        successful_count = 0
        
        for pair, task in tasks:
            try:
                rate = await task
                results[pair] = rate
                if rate:
                    successful_count += 1
            except Exception as e:
                logger.error(f"Error in batch request for {pair}: {e}")
                results[pair] = None
        
        duration = time.time() - start_time
        logger.info(
            f"üì¶ Batch request completed\n"
            f"   ‚îú‚îÄ Successful: {successful_count}/{len(pairs)}\n"
            f"   ‚îú‚îÄ Duration: {duration:.2f}s\n"
            f"   ‚îî‚îÄ Avg per pair: {duration/len(pairs):.3f}s"
        )
        
        return results
    
    async def _execute_api_request(
        self, 
        route: APIRoute, 
        pair: str, 
        timeout: Optional[float]
    ) -> Optional[ExchangeRate]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å API –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç"""
        try:
            if route.api_name == 'rapira':
                # –î–ª—è Rapira API –∏—Å–ø–æ–ª—å–∑—É–µ–º api_service
                rate = await api_service.get_exchange_rate(pair)
                return rate
                
            elif route.api_name == 'apilayer':
                # –î–ª—è APILayer –∏—Å–ø–æ–ª—å–∑—É–µ–º fiat_rates_service
                rate = await fiat_rates_service.get_fiat_exchange_rate(pair)
                return rate
                
            else:
                logger.error(f"Unknown API route: {route.api_name}")
                return None
                
        except (RapiraAPIError, APILayerError) as e:
            logger.error(f"API error for {pair} via {route.api_name}: {e}")
            raise
        except Exception as e:
            logger.error(f"Unexpected error for {pair} via {route.api_name}: {e}")
            raise
    
    def _get_from_cache(self, pair: str) -> Optional[ExchangeRate]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –∏–∑ –∫—ç—à–∞"""
        cache_key = f"unified_rate_{pair}"
        return api_cache.get(cache_key)
    
    def _store_in_cache(self, pair: str, rate: ExchangeRate):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫—É—Ä—Å –≤ –∫—ç—à"""
        cache_key = f"unified_rate_{pair}"
        api_cache.set(cache_key, rate, ttl=config.API_CACHE_TTL)
    
    async def health_check(self) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ—Ö API —Å–µ—Ä–≤–∏—Å–æ–≤
        
        Returns:
            Dict[str, Any]: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏
        """
        logger.info("üè• Performing unified health check")
        
        health_data = {
            'timestamp': datetime.now().isoformat(),
            'service': 'unified_api_manager',
            'status': 'unknown',
            'apis': {},
            'circuit_breakers': {},
            'performance_stats': self.stats.copy(),
            'cache_stats': api_cache.get_stats()
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ Circuit Breakers
        for api_name in ['rapira', 'apilayer']:
            state = self.circuit_breaker.get_state(api_name)
            health_data['circuit_breakers'][api_name] = {
                'is_open': state.is_open,
                'failures': state.failures,
                'last_failure': state.last_failure.isoformat() if state.last_failure else None
            }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π API
        api_checks = []
        
        # Rapira API
        rapira_task = asyncio.create_task(api_service.health_check())
        api_checks.append(('rapira', rapira_task))
        
        # APILayer
        apilayer_task = asyncio.create_task(fiat_rates_service.health_check())
        api_checks.append(('apilayer', apilayer_task))
        
        # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        healthy_apis = 0
        total_apis = len(api_checks)
        
        for api_name, task in api_checks:
            try:
                api_health = await task
                health_data['apis'][api_name] = api_health
                if api_health.get('status') == 'healthy':
                    healthy_apis += 1
            except Exception as e:
                health_data['apis'][api_name] = {
                    'status': 'unhealthy',
                    'error': str(e)
                }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        if healthy_apis == total_apis:
            health_data['status'] = 'healthy'
            health_data['message'] = 'All APIs operational'
        elif healthy_apis > 0:
            health_data['status'] = 'degraded'
            health_data['message'] = f'{healthy_apis}/{total_apis} APIs operational'
        else:
            health_data['status'] = 'unhealthy'
            health_data['message'] = 'No APIs operational'
        
        logger.info(f"üè• Health check completed: {health_data['status']} ({healthy_apis}/{total_apis} APIs)")
        return health_data
    
    def get_performance_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        cache_stats = api_cache.get_stats()
        
        return {
            'timestamp': datetime.now().isoformat(),
            'api_requests': self.stats.copy(),
            'cache_performance': {
                'hit_ratio': cache_stats['hit_ratio'],
                'size': cache_stats['current_size'],
                'utilization': cache_stats['utilization']
            },
            'circuit_breaker_states': {
                api_name: {
                    'failures': state.failures,
                    'is_open': state.is_open
                }
                for api_name, state in self.circuit_breaker.states.items()
            },
            'popular_pairs_cached': len([
                pair for pair in self.preloader.popular_pairs
                if self._get_from_cache(pair) is not None
            ])
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Unified API Manager
unified_api_manager = UnifiedAPIManager()