#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç –¥–ª—è Crypto Helper Bot
–°–æ–¥–µ—Ä–∂–∏—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç —Å —Ä—É–±–ª–µ–º
"""

from typing import Dict, Any, Optional

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ APILayer –∏ Rapira API)
CURRENCY_PAIRS = {
    # –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã
    'usdtrub': {
        'name': 'USDT/RUB',
        'base': 'USDT',
        'quote': 'RUB',
        'emoji': 'üü¢',
        'description': 'Tether –∫ —Ä—É–±–ª—é'
    },
    'rubusdt': {
        'name': 'RUB/USDT',
        'base': 'RUB',
        'quote': 'USDT',
        'emoji': 'üá∑üá∫',
        'description': '–†—É–±–ª—å –∫ Tether'
    },
    
    # –§–∏–∞—Ç–Ω—ã–µ –ø–∞—Ä—ã
    'eurrub': {
        'name': 'EUR/RUB',
        'base': 'EUR',
        'quote': 'RUB',
        'emoji': 'üí∂',
        'description': '–ï–≤—Ä–æ –∫ —Ä—É–±–ª—é'
    },
    'rubzar': {
        'name': 'RUB/ZAR',
        'base': 'RUB',
        'quote': 'ZAR',
        'emoji': 'üáøüá¶',
        'description': '–†—É–±–ª—å –∫ —é–∂–Ω–æ–∞—Ñ—Ä–∏–∫–∞–Ω—Å–∫–æ–º—É —Ä—ç–Ω–¥—É'
    },
    'zarrub': {
        'name': 'ZAR/RUB',
        'base': 'ZAR',
        'quote': 'RUB',
        'emoji': 'üáøüá¶',
        'description': '–Æ–∂–Ω–æ–∞—Ñ—Ä–∏–∫–∞–Ω—Å–∫–∏–π —Ä—ç–Ω–¥ –∫ —Ä—É–±–ª—é'
    },
    'rubthb': {
        'name': 'RUB/THB',
        'base': 'RUB',
        'quote': 'THB',
        'emoji': 'üáπüá≠',
        'description': '–†—É–±–ª—å –∫ —Ç–∞–π—Å–∫–æ–º—É –±–∞—Ç—É'
    },
    'thbrub': {
        'name': 'THB/RUB',
        'base': 'THB',
        'quote': 'RUB',
        'emoji': 'üáπüá≠',
        'description': '–¢–∞–π—Å–∫–∏–π –±–∞—Ç –∫ —Ä—É–±–ª—é'
    },
    'rubaed': {
        'name': 'RUB/AED',
        'base': 'RUB',
        'quote': 'AED',
        'emoji': 'üá¶üá™',
        'description': '–†—É–±–ª—å –∫ –¥–∏—Ä—Ö–∞–º—É –û–ê–≠'
    },
    'aedrub': {
        'name': 'AED/RUB',
        'base': 'AED',
        'quote': 'RUB',
        'emoji': 'üá¶üá™',
        'description': '–î–∏—Ä—Ö–∞–º –û–ê–≠ –∫ —Ä—É–±–ª—é'
    },
    'rubidr': {
        'name': 'RUB/IDR',
        'base': 'RUB',
        'quote': 'IDR',
        'emoji': 'üáÆüá©',
        'description': '–†—É–±–ª—å –∫ –∏–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–æ–π —Ä—É–ø–∏–∏'
    },
    'idrrub': {
        'name': 'IDR/RUB',
        'base': 'IDR',
        'quote': 'RUB',
        'emoji': 'üáÆüá©',
        'description': '–ò–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–∞—è —Ä—É–ø–∏—è –∫ —Ä—É–±–ª—é'
    }
}


def get_currency_pair_info(pair_callback: str) -> Optional[Dict[str, Any]]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä–µ –ø–æ callback –¥–∞–Ω–Ω—ã–º
    
    Args:
        pair_callback: Callback –¥–∞–Ω–Ω—ã–µ –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'rub_btc')
        
    Returns:
        Dict[str, Any]: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä–µ –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
    """
    return CURRENCY_PAIRS.get(pair_callback)


def is_valid_currency_pair(pair_callback: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã
    
    Args:
        pair_callback: Callback –¥–∞–Ω–Ω—ã–µ –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã
        
    Returns:
        bool: True –µ—Å–ª–∏ –ø–∞—Ä–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
    """
    return pair_callback in CURRENCY_PAIRS


def get_all_currency_pairs() -> Dict[str, Dict[str, Any]]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä
    
    Returns:
        Dict[str, Dict[str, Any]]: –°–ª–æ–≤–∞—Ä—å –≤—Å–µ—Ö –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä
    """
    return CURRENCY_PAIRS.copy()


def get_currency_pairs_by_base(
    base_currency: str
) -> Dict[str, Dict[str, Any]]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä –ø–æ –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç–µ
    
    Args:
        base_currency: –ë–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'RUB' –∏–ª–∏ 'BTC')
        
    Returns:
        Dict[str, Dict[str, Any]]: –°–ª–æ–≤–∞—Ä—å –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä —Å –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç–æ–π
    """
    return {
        key: value for key, value in CURRENCY_PAIRS.items()
        if value['base'] == base_currency
    }


def get_currency_pairs_by_quote(
    quote_currency: str
) -> Dict[str, Dict[str, Any]]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä –ø–æ –∫–æ—Ç–∏—Ä—É–µ–º–æ–π –≤–∞–ª—é—Ç–µ
    
    Args:
        quote_currency: –ö–æ—Ç–∏—Ä—É–µ–º–∞—è –≤–∞–ª—é—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'RUB' –∏–ª–∏ 'BTC')
        
    Returns:
        Dict[str, Dict[str, Any]]: –°–ª–æ–≤–∞—Ä—å –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä —Å –∫–æ—Ç–∏—Ä—É–µ–º–æ–π –≤–∞–ª—é—Ç–æ–π
    """
    return {
        key: value for key, value in CURRENCY_PAIRS.items()
        if value['quote'] == quote_currency
    }


def get_crypto_to_rub_pairs() -> Dict[str, Dict[str, Any]]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∫ —Ä—É–±–ª—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTC/RUB)
    
    Returns:
        Dict[str, Dict[str, Any]]: –°–ª–æ–≤–∞—Ä—å –ø–∞—Ä –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∫ —Ä—É–±–ª—é
    """
    return get_currency_pairs_by_quote('RUB')


def get_rub_to_crypto_pairs() -> Dict[str, Dict[str, Any]]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä —Ä—É–±–ª—è –∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, RUB/BTC)
    
    Returns:
        Dict[str, Dict[str, Any]]: –°–ª–æ–≤–∞—Ä—å –ø–∞—Ä —Ä—É–±–ª—è –∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º
    """
    return get_currency_pairs_by_base('RUB')


def format_currency_symbol(currency: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞ –≤–∞–ª—é—Ç—ã —Å —ç–º–æ–¥–∑–∏
    
    Args:
        currency: –ö–æ–¥ –≤–∞–ª—é—Ç—ã (BTC, ETH, TON, USDT, RUB, USD, EUR, ZAR,
                  THB, AED, IDR)
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª –≤–∞–ª—é—Ç—ã
    """
    emoji_map = {
        'BTC': '‚Çø BTC',
        'ETH': 'üî∑ ETH', 
        'TON': 'üíé TON',
        'USDT': 'üü¢ USDT',
        'RUB': 'üá∑üá∫ RUB',
        'USD': 'üíµ USD',
        'EUR': 'üí∂ EUR',
        'ZAR': 'üáøüá¶ ZAR',
        'THB': 'üáπüá≠ THB',
        'AED': 'üá¶üá™ AED',
        'IDR': 'üáÆüá© IDR'
    }
    return emoji_map.get(currency, currency)


def get_pair_display_name(pair_callback: str) -> str:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏ –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã
    
    Args:
        pair_callback: Callback –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'rub_btc')
        
    Returns:
        str: –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –ø–∞—Ä—ã —Å —ç–º–æ–¥–∑–∏
    """
    pair_info = get_currency_pair_info(pair_callback)
    if not pair_info:
        return pair_callback.upper()
    
    base_formatted = format_currency_symbol(pair_info['base'])
    quote_formatted = format_currency_symbol(pair_info['quote'])
    
    return f"{base_formatted} ‚Üí {quote_formatted}"