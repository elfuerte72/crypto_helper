#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞—Å—á–µ—Ç–∞ –∫—É—Ä—Å–∞ –≤ –∫–∞–Ω–∞–ª
Crypto Helper Bot - Channel Publisher
"""

import logging
from typing import Optional, Dict, Any
from decimal import Decimal
from datetime import datetime

from aiogram import Bot
from aiogram.types import Message
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError

try:
    from ..config import config
    from ..utils.logger import get_bot_logger
except ImportError:
    # Handle direct execution
    import sys
    import os
    sys.path.insert(0, os.path.dirname(os.path.dirname(__file__)))
    from config import config
    from utils.logger import get_bot_logger

# Initialize logger
logger = get_bot_logger()


class ChannelPublisherError(Exception):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª"""
    pass


class ChannelPublisher:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞—Å—á–µ—Ç–∞ –∫—É—Ä—Å–∞ –≤ –∫–∞–Ω–∞–ª"""
    
    @staticmethod
    def format_channel_message(
        pair_info: Dict[str, Any],
        base_rate: Decimal,
        margin: Decimal,
        final_rate: Decimal,
        rate_change: Decimal,
        exchange_rate_data: Dict[str, Any],
        manager_name: str = "–ú–µ–Ω–µ–¥–∂–µ—Ä"
    ) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª
        
        Args:
            pair_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä–µ
            base_rate: –ë–∞–∑–æ–≤—ã–π –∫—É—Ä—Å
            margin: –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è –Ω–∞—Ü–µ–Ω–∫–∞
            final_rate: –ò—Ç–æ–≥–æ–≤—ã–π –∫—É—Ä—Å
            rate_change: –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–∞
            exchange_rate_data: –î–∞–Ω–Ω—ã–µ –æ –∫—É—Ä—Å–µ
            manager_name: –ò–º—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–Ω–∞–ª–∞
        """
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∞–ª—é—Ç—ã
        base_currency = pair_info['base']
        quote_currency = pair_info['quote']
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        base_rate_str = ChannelPublisher._format_currency_value(base_rate, quote_currency)
        final_rate_str = ChannelPublisher._format_currency_value(final_rate, quote_currency)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–Ω–∞–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ —ç–º–æ–¥–∑–∏
        change_sign = "+" if rate_change >= 0 else "-"
        change_emoji = "üìà" if rate_change >= 0 else "üìâ"
        margin_emoji = "üìà" if margin >= 0 else "üìâ"
        margin_sign = "+" if margin >= 0 else ""
        
        # –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞
        now = datetime.now()
        timestamp = now.strftime("%d.%m.%Y %H:%M")
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–Ω–∞–ª–∞
        channel_message = (
            f"üí± <b>{pair_info['name']}</b>\n\n"
            f"{change_emoji} <b>–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å:</b> <code>{final_rate_str}</code> {quote_currency}\n"
            f"{margin_emoji} <b>–ù–∞—Ü–µ–Ω–∫–∞:</b> <code>{margin_sign}{margin}%</code>\n\n"
            f"üìä <b>–î–µ—Ç–∞–ª–∏:</b>\n"
            f"‚Ä¢ –ë–∞–∑–æ–≤—ã–π –∫—É—Ä—Å: {base_rate_str} {quote_currency}\n"
            f"‚Ä¢ –ò—Ç–æ–≥–æ–≤—ã–π –∫—É—Ä—Å: {final_rate_str} {quote_currency}\n\n"
            f"üïê <b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> {timestamp}\n"
            f"üë§ <b>–ú–µ–Ω–µ–¥–∂–µ—Ä:</b> {manager_name}\n\n"
            f"üì° <i>–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —á–µ—Ä–µ–∑ Rapira API</i>\n"
            f"ü§ñ <i>Crypto Helper Bot</i>"
        )
        
        return channel_message
    
    @staticmethod
    def format_private_message(
        pair_info: Dict[str, Any],
        base_rate: Decimal,
        margin: Decimal,
        final_rate: Decimal,
        rate_change: Decimal,
        exchange_rate_data: Dict[str, Any],
        manager_name: str = "–ú–µ–Ω–µ–¥–∂–µ—Ä"
    ) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –õ–° (—Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
        
        Args:
            pair_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä–µ
            base_rate: –ë–∞–∑–æ–≤—ã–π –∫—É—Ä—Å
            margin: –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è –Ω–∞—Ü–µ–Ω–∫–∞
            final_rate: –ò—Ç–æ–≥–æ–≤—ã–π –∫—É—Ä—Å
            rate_change: –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–∞
            exchange_rate_data: –î–∞–Ω–Ω—ã–µ –æ –∫—É—Ä—Å–µ
            manager_name: –ò–º—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –õ–°
        """
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∞–ª—é—Ç—ã
        base_currency = pair_info['base']
        quote_currency = pair_info['quote']
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
        base_rate_str = ChannelPublisher._format_currency_value(base_rate, quote_currency)
        final_rate_str = ChannelPublisher._format_currency_value(final_rate, quote_currency)
        rate_change_str = ChannelPublisher._format_currency_value(abs(rate_change), quote_currency)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–Ω–∞–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ —ç–º–æ–¥–∑–∏
        change_sign = "+" if rate_change >= 0 else "-"
        change_emoji = "üìà" if rate_change >= 0 else "üìâ"
        margin_emoji = "üìà" if margin >= 0 else "üìâ"
        margin_sign = "+" if margin >= 0 else ""
        
        # –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞
        now = datetime.now()
        timestamp = now.strftime("%d.%m.%Y %H:%M:%S")
        source_timestamp = exchange_rate_data.get('timestamp', '')[:19].replace('T', ' ')
        
        # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –õ–°
        private_message = (
            f"üß™ <b>–†–ï–ñ–ò–ú –†–ê–ó–†–ê–ë–û–¢–ö–ò - –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏</b>\n\n"
            f"üí± <b>{pair_info['name']}</b>\n"
            f"üìù <i>{pair_info['description']}</i>\n\n"
            f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞:</b>\n"
            f"‚Ä¢ –ë–∞–∑–æ–≤—ã–π –∫—É—Ä—Å: <code>{base_rate_str}</code> {quote_currency}\n"
            f"{margin_emoji} –ù–∞—Ü–µ–Ω–∫–∞: <code>{margin_sign}{margin}%</code>\n"
            f"‚Ä¢ –ò—Ç–æ–≥–æ–≤—ã–π –∫—É—Ä—Å: <code>{final_rate_str}</code> {quote_currency}\n"
            f"{change_emoji} –ò–∑–º–µ–Ω–µ–Ω–∏–µ: <code>{change_sign}{rate_change_str}</code> {quote_currency}\n\n"
            f"üë§ <b>–ú–µ–Ω–µ–¥–∂–µ—Ä:</b> {manager_name}\n"
            f"üïê <b>–í—Ä–µ–º—è —Ä–∞—Å—á–µ—Ç–∞:</b> {timestamp}\n"
            f"üì° <b>–í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞:</b> {source_timestamp}\n"
            f"üîó <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> {exchange_rate_data.get('source', 'N/A')}\n\n"
            f"üìã <b>–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–Ω–∞–ª–∞:</b>\n"
            f"<code>{ChannelPublisher.format_channel_message(pair_info, base_rate, margin, final_rate, rate_change, exchange_rate_data, manager_name)}</code>\n\n"
            f"üí° <i>–í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª</i>"
        )
        
        return private_message
    
    @staticmethod
    def _format_currency_value(value: Decimal, currency: str) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤–∞–ª—é—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
        Args:
            value: –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            currency: –ö–æ–¥ –≤–∞–ª—é—Ç—ã
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        """
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞–ª—é—Ç—ã
        if currency in ['BTC', 'ETH']:
            # –î–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç - –±–æ–ª—å—à–µ –∑–Ω–∞–∫–æ–≤
            return f"{value:.8f}"
        elif currency in ['USDT', 'USDC', 'DAI']:
            # –î–ª—è —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω–æ–≤ - –º–µ–Ω—å—à–µ –∑–Ω–∞–∫–æ–≤
            return f"{value:.4f}"
        elif currency in ['RUB', 'USD', 'EUR', 'ZAR', 'THB', 'AED', 'IDR']:
            # –î–ª—è —Ñ–∏–∞—Ç–Ω—ã—Ö –≤–∞–ª—é—Ç - 2 –∑–Ω–∞–∫–∞
            return f"{value:.2f}"
        else:
            # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
            if value >= 1:
                return f"{value:.4f}"
            else:
                return f"{value:.8f}"
    
    @staticmethod
    async def publish_to_channel(
        bot: Bot,
        channel_id: str,
        message_text: str
    ) -> Optional[Message]:
        """
        –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª
        
        Args:
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
            channel_id: ID –∫–∞–Ω–∞–ª–∞
            message_text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            
        Returns:
            Message: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
            
        Raises:
            ChannelPublisherError: –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        """
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
            sent_message = await bot.send_message(
                chat_id=channel_id,
                text=message_text,
                parse_mode='HTML',
                disable_web_page_preview=True
            )
            
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª {channel_id}")
            return sent_message
            
        except TelegramForbiddenError as e:
            error_msg = f"–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª {channel_id}: {e}"
            logger.error(error_msg)
            raise ChannelPublisherError(error_msg)
            
        except TelegramBadRequest as e:
            error_msg = f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª {channel_id}: {e}"
            logger.error(error_msg)
            raise ChannelPublisherError(error_msg)
            
        except Exception as e:
            error_msg = f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª {channel_id}: {e}"
            logger.error(error_msg)
            raise ChannelPublisherError(error_msg)
    
    @staticmethod
    async def send_to_private_chat(
        bot: Bot,
        user_id: int,
        message_text: str
    ) -> Optional[Message]:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –õ–° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
        
        Args:
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            message_text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            
        Returns:
            Message: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
            
        Raises:
            ChannelPublisherError: –ü—Ä–∏ –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –õ–°
            sent_message = await bot.send_message(
                chat_id=user_id,
                text=message_text,
                parse_mode='HTML',
                disable_web_page_preview=True
            )
            
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –õ–° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return sent_message
            
        except TelegramForbiddenError as e:
            error_msg = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞: {e}"
            logger.error(error_msg)
            raise ChannelPublisherError(error_msg)
            
        except TelegramBadRequest as e:
            error_msg = f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –õ–° {user_id}: {e}"
            logger.error(error_msg)
            raise ChannelPublisherError(error_msg)
            
        except Exception as e:
            error_msg = f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –õ–° {user_id}: {e}"
            logger.error(error_msg)
            raise ChannelPublisherError(error_msg)
    
    @staticmethod
    async def publish_result(
        bot: Bot,
        pair_info: Dict[str, Any],
        base_rate: Decimal,
        margin: Decimal,
        final_rate: Decimal,
        rate_change: Decimal,
        exchange_rate_data: Dict[str, Any],
        manager_name: str,
        user_id: int,
        channel_id: Optional[str] = None,
        development_mode: bool = True
    ) -> Dict[str, Any]:
        """
        –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        
        Args:
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
            pair_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä–µ
            base_rate: –ë–∞–∑–æ–≤—ã–π –∫—É—Ä—Å
            margin: –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è –Ω–∞—Ü–µ–Ω–∫–∞
            final_rate: –ò—Ç–æ–≥–æ–≤—ã–π –∫—É—Ä—Å
            rate_change: –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–∞
            exchange_rate_data: –î–∞–Ω–Ω—ã–µ –æ –∫—É—Ä—Å–µ
            manager_name: –ò–º—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            channel_id: ID –∫–∞–Ω–∞–ª–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            development_mode: –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
            
        Returns:
            Dict[str, Any]: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        """
        result = {
            'success': False,
            'message': '',
            'sent_message': None,
            'target': 'unknown'
        }
        
        try:
            if development_mode or not channel_id:
                # –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –õ–° —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É
                message_text = ChannelPublisher.format_private_message(
                    pair_info=pair_info,
                    base_rate=base_rate,
                    margin=margin,
                    final_rate=final_rate,
                    rate_change=rate_change,
                    exchange_rate_data=exchange_rate_data,
                    manager_name=manager_name
                )
                
                sent_message = await ChannelPublisher.send_to_private_chat(
                    bot=bot,
                    user_id=user_id,
                    message_text=message_text
                )
                
                result.update({
                    'success': True,
                    'message': '–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –õ–° (—Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)',
                    'sent_message': sent_message,
                    'target': 'private_chat'
                })
                
            else:
                # –ü—Ä–æ–¥–∞–∫—à–µ–Ω —Ä–µ–∂–∏–º - –ø—É–±–ª–∏–∫—É–µ–º –≤ –∫–∞–Ω–∞–ª
                message_text = ChannelPublisher.format_channel_message(
                    pair_info=pair_info,
                    base_rate=base_rate,
                    margin=margin,
                    final_rate=final_rate,
                    rate_change=rate_change,
                    exchange_rate_data=exchange_rate_data,
                    manager_name=manager_name
                )
                
                sent_message = await ChannelPublisher.publish_to_channel(
                    bot=bot,
                    channel_id=channel_id,
                    message_text=message_text
                )
                
                result.update({
                    'success': True,
                    'message': '–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª',
                    'sent_message': sent_message,
                    'target': 'channel'
                })
            
            logger.info(
                f"–ü—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ: "
                f"user_id={user_id}, pair={pair_info['name']}, "
                f"target={result['target']}, margin={margin}%"
            )
            
        except ChannelPublisherError as e:
            result.update({
                'success': False,
                'message': str(e),
                'target': 'error'
            })
            logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
            
        except Exception as e:
            result.update({
                'success': False,
                'message': f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}",
                'target': 'error'
            })
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
        
        return result