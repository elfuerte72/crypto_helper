#!/usr/bin/env python3
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è Crypto Helper Bot
–í–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–∏
"""

import logging
from typing import Optional

from aiogram import Router, Bot
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from aiogram.enums import ChatMemberStatus
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError
from aiogram.fsm.context import FSMContext

try:
    from ..config import config
    from ..utils.logger import get_bot_logger
except ImportError:
    # Handle direct execution
    import sys
    import os
    sys.path.insert(0, os.path.dirname(os.path.dirname(__file__)))
    from config import config
    from utils.logger import get_bot_logger

# Initialize logger
logger = get_bot_logger()

# Create router for admin handlers
admin_router = Router()


class AdminPermissionError(Exception):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    pass


async def check_admin_permissions(bot: Bot, chat_id: int, user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞–Ω–∞–ª–µ
    
    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        chat_id: ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        
    Returns:
        bool: True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        
    Raises:
        AdminPermissionError: –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –∫–∞–Ω–∞–ª–µ
        chat_member = await bot.get_chat_member(chat_id=chat_id, user_id=user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        admin_statuses = {
            ChatMemberStatus.CREATOR,
            ChatMemberStatus.ADMINISTRATOR
        }
        
        is_admin = chat_member.status in admin_statuses
        
        logger.info(
            f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: "
            f"user_id={user_id}, chat_id={chat_id}, "
            f"status={chat_member.status}, is_admin={is_admin}"
        )
        
        return is_admin
        
    except TelegramBadRequest as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤: {e}")
        raise AdminPermissionError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞: {e}")
    
    except TelegramForbiddenError as e:
        logger.error(f"–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤: {e}")
        raise AdminPermissionError("–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ")
    
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤: {e}")
        raise AdminPermissionError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤: {e}")


def create_currency_pairs_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä
    
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤–∞–ª—é—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–∏
    """
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≤–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã –ø–æ –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç–µ
    rub_pairs = [
        ('RUB/ZAR', 'rub_zar'),
        ('RUB/THB', 'rub_thb'), 
        ('RUB/AED', 'rub_aed'),
        ('RUB/IDR', 'rub_idr')
    ]
    
    usdt_pairs = [
        ('USDT/ZAR', 'usdt_zar'),
        ('USDT/THB', 'usdt_thb'),
        ('USDT/AED', 'usdt_aed'), 
        ('USDT/IDR', 'usdt_idr')
    ]
    
    # –û–±—Ä–∞—Ç–Ω—ã–µ –ø–∞—Ä—ã
    reverse_rub_pairs = [
        ('ZAR/RUB', 'zar_rub'),
        ('THB/RUB', 'thb_rub'),
        ('AED/RUB', 'aed_rub'),
        ('IDR/RUB', 'idr_rub')
    ]
    
    reverse_usdt_pairs = [
        ('ZAR/USDT', 'zar_usdt'),
        ('THB/USDT', 'thb_usdt'),
        ('AED/USDT', 'aed_usdt'),
        ('IDR/USDT', 'idr_usdt')
    ]
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è RUB –ø–∞—Ä
    keyboard.append([
        InlineKeyboardButton(text="üá∑üá∫ RUB ‚Üí –î—Ä—É–≥–∏–µ –≤–∞–ª—é—Ç—ã", callback_data="header_rub")
    ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º RUB –ø–∞—Ä—ã –ø–æ 2 –≤ —Ä—è–¥
    for i in range(0, len(rub_pairs), 2):
        row = []
        for j in range(2):
            if i + j < len(rub_pairs):
                pair_name, callback_data = rub_pairs[i + j]
                row.append(InlineKeyboardButton(text=pair_name, callback_data=callback_data))
        keyboard.append(row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è USDT –ø–∞—Ä
    keyboard.append([
        InlineKeyboardButton(text="üí∞ USDT ‚Üí –î—Ä—É–≥–∏–µ –≤–∞–ª—é—Ç—ã", callback_data="header_usdt")
    ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º USDT –ø–∞—Ä—ã –ø–æ 2 –≤ —Ä—è–¥
    for i in range(0, len(usdt_pairs), 2):
        row = []
        for j in range(2):
            if i + j < len(usdt_pairs):
                pair_name, callback_data = usdt_pairs[i + j]
                row.append(InlineKeyboardButton(text=pair_name, callback_data=callback_data))
        keyboard.append(row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –æ–±—Ä–∞—Ç–Ω—ã—Ö RUB –ø–∞—Ä
    keyboard.append([
        InlineKeyboardButton(text="üîÑ –î—Ä—É–≥–∏–µ –≤–∞–ª—é—Ç—ã ‚Üí RUB", callback_data="header_reverse_rub")
    ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω—ã–µ RUB –ø–∞—Ä—ã –ø–æ 2 –≤ —Ä—è–¥
    for i in range(0, len(reverse_rub_pairs), 2):
        row = []
        for j in range(2):
            if i + j < len(reverse_rub_pairs):
                pair_name, callback_data = reverse_rub_pairs[i + j]
                row.append(InlineKeyboardButton(text=pair_name, callback_data=callback_data))
        keyboard.append(row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –æ–±—Ä–∞—Ç–Ω—ã—Ö USDT –ø–∞—Ä
    keyboard.append([
        InlineKeyboardButton(text="üîÑ –î—Ä—É–≥–∏–µ –≤–∞–ª—é—Ç—ã ‚Üí USDT", callback_data="header_reverse_usdt")
    ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω—ã–µ USDT –ø–∞—Ä—ã –ø–æ 2 –≤ —Ä—è–¥
    for i in range(0, len(reverse_usdt_pairs), 2):
        row = []
        for j in range(2):
            if i + j < len(reverse_usdt_pairs):
                pair_name, callback_data = reverse_usdt_pairs[i + j]
                row.append(InlineKeyboardButton(text=pair_name, callback_data=callback_data))
        keyboard.append(row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    keyboard.append([
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_selection")
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


@admin_router.message(Command('admin_bot'))
async def admin_bot_command(message: Message, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin_bot
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    """
    user_id = message.from_user.id
    username = message.from_user.username or "N/A"
    
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /admin_bot –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (@{username})")
    
    # –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if config.DEBUG_MODE:
        logger.info(f"–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∞–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º —Å—Ä–∞–∑—É –∫ –ø–æ–∫–∞–∑—É –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω –ª–∏ –∫–∞–Ω–∞–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤
        if not config.ADMIN_CHANNEL_ID:
            await message.reply(
                "‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏</b>\n\n"
                "–ö–∞–Ω–∞–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.",
                parse_mode='HTML'
            )
            return
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            is_admin = await check_admin_permissions(
                bot=bot,
                chat_id=config.ADMIN_CHANNEL_ID,
                user_id=user_id
            )
            
            if not is_admin:
                await message.reply(
                    "üö´ <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</b>\n\n"
                    "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∫–∞–Ω–∞–ª–∞.\n"
                    "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
                    parse_mode='HTML'
                )
                return
                
        except AdminPermissionError as e:
            await message.reply(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤</b>\n\n"
                f"{str(e)}\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode='HTML'
            )
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return
        
        except Exception as e:
            await message.reply(
                "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode='HTML'
            )
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ admin_bot_command: {e}")
            return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä
    keyboard = create_currency_pairs_keyboard()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞–Ω–µ–ª—å—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    if config.DEBUG_MODE:
        admin_message = (
            "üîß <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å (–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)</b>\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Crypto Helper Bot!\n\n"
            "üß™ <i>–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∞–∫—Ç–∏–≤–µ–Ω - –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞</i>\n\n"
            "üìä <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞:</b>\n\n"
            "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ\n"
            "‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—É—é –Ω–∞—Ü–µ–Ω–∫—É\n"
            "‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å —Å –Ω–∞—Ü–µ–Ω–∫–æ–π\n\n"
            "üí° <i>–ö—É—Ä—Å—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ —á–µ—Ä–µ–∑ Rapira API</i>"
        )
    else:
        admin_message = (
            "üîß <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å</b>\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Crypto Helper Bot!\n\n"
            "üìä <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞:</b>\n\n"
            "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ\n"
            "‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—É—é –Ω–∞—Ü–µ–Ω–∫—É\n"
            "‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å —Å –Ω–∞—Ü–µ–Ω–∫–æ–π\n\n"
            "üí° <i>–ö—É—Ä—Å—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ —á–µ—Ä–µ–∑ Rapira API</i>"
        )
    
    await message.reply(
        admin_message,
        reply_markup=keyboard,
        parse_mode='HTML'
    )
    
    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")


@admin_router.callback_query(lambda c: c.data and c.data.startswith('header_'))
async def handle_header_callbacks(callback_query: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫-–∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (–Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π, —Ç–æ–ª—å–∫–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ)
    """
    await callback_query.answer("–≠—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É –Ω–∏–∂–µ.", show_alert=False)


@admin_router.callback_query(lambda c: c.data == 'cancel_selection')
async def handle_cancel_selection(callback_query: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã
    """
    await callback_query.message.edit_text(
        "‚ùå <b>–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n"
        "–í—ã–±–æ—Ä –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã –æ—Ç–º–µ–Ω–µ–Ω.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin_bot –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –ø–∞–Ω–µ–ª–∏.",
        parse_mode='HTML'
    )
    
    await callback_query.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", show_alert=False)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –æ—Ç–º–µ–Ω–∏–ª –≤—ã–±–æ—Ä –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã")


# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä
CURRENCY_PAIRS = {
    # RUB –ø–∞—Ä—ã
    'rub_zar': {
        'name': 'RUB/ZAR',
        'base': 'RUB',
        'quote': 'ZAR',
        'description': '–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å ‚Üí –Æ–∂–Ω–æ–∞—Ñ—Ä–∏–∫–∞–Ω—Å–∫–∏–π —Ä—ç–Ω–¥',
        'emoji': 'üá∑üá∫‚û°Ô∏èüáøüá¶'
    },
    'rub_thb': {
        'name': 'RUB/THB',
        'base': 'RUB',
        'quote': 'THB',
        'description': '–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å ‚Üí –¢–∞–π—Å–∫–∏–π –±–∞—Ç',
        'emoji': 'üá∑üá∫‚û°Ô∏èüáπüá≠'
    },
    'rub_aed': {
        'name': 'RUB/AED',
        'base': 'RUB',
        'quote': 'AED',
        'description': '–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å ‚Üí –î–∏—Ä—Ö–∞–º –û–ê–≠',
        'emoji': 'üá∑üá∫‚û°Ô∏èüá¶üá™'
    },
    'rub_idr': {
        'name': 'RUB/IDR',
        'base': 'RUB',
        'quote': 'IDR',
        'description': '–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å ‚Üí –ò–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–∞—è —Ä—É–ø–∏—è',
        'emoji': 'üá∑üá∫‚û°Ô∏èüáÆüá©'
    },
    # USDT –ø–∞—Ä—ã
    'usdt_zar': {
        'name': 'USDT/ZAR',
        'base': 'USDT',
        'quote': 'ZAR',
        'description': 'Tether USD ‚Üí –Æ–∂–Ω–æ–∞—Ñ—Ä–∏–∫–∞–Ω—Å–∫–∏–π —Ä—ç–Ω–¥',
        'emoji': 'üí∞‚û°Ô∏èüáøüá¶'
    },
    'usdt_thb': {
        'name': 'USDT/THB',
        'base': 'USDT',
        'quote': 'THB',
        'description': 'Tether USD ‚Üí –¢–∞–π—Å–∫–∏–π –±–∞—Ç',
        'emoji': 'üí∞‚û°Ô∏èüáπüá≠'
    },
    'usdt_aed': {
        'name': 'USDT/AED',
        'base': 'USDT',
        'quote': 'AED',
        'description': 'Tether USD ‚Üí –î–∏—Ä—Ö–∞–º –û–ê–≠',
        'emoji': 'üí∞‚û°Ô∏èüá¶üá™'
    },
    'usdt_idr': {
        'name': 'USDT/IDR',
        'base': 'USDT',
        'quote': 'IDR',
        'description': 'Tether USD ‚Üí –ò–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–∞—è —Ä—É–ø–∏—è',
        'emoji': 'üí∞‚û°Ô∏èüáÆüá©'
    },
    # –û–±—Ä–∞—Ç–Ω—ã–µ RUB –ø–∞—Ä—ã
    'zar_rub': {
        'name': 'ZAR/RUB',
        'base': 'ZAR',
        'quote': 'RUB',
        'description': '–Æ–∂–Ω–æ–∞—Ñ—Ä–∏–∫–∞–Ω—Å–∫–∏–π —Ä—ç–Ω–¥ ‚Üí –†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å',
        'emoji': 'üáøüá¶‚û°Ô∏èüá∑üá∫'
    },
    'thb_rub': {
        'name': 'THB/RUB',
        'base': 'THB',
        'quote': 'RUB',
        'description': '–¢–∞–π—Å–∫–∏–π –±–∞—Ç ‚Üí –†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å',
        'emoji': 'üáπüá≠‚û°Ô∏èüá∑üá∫'
    },
    'aed_rub': {
        'name': 'AED/RUB',
        'base': 'AED',
        'quote': 'RUB',
        'description': '–î–∏—Ä—Ö–∞–º –û–ê–≠ ‚Üí –†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å',
        'emoji': 'üá¶üá™‚û°Ô∏èüá∑üá∫'
    },
    'idr_rub': {
        'name': 'IDR/RUB',
        'base': 'IDR',
        'quote': 'RUB',
        'description': '–ò–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–∞—è —Ä—É–ø–∏—è ‚Üí –†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å',
        'emoji': 'üáÆüá©‚û°Ô∏èüá∑üá∫'
    },
    # –û–±—Ä–∞—Ç–Ω—ã–µ USDT –ø–∞—Ä—ã
    'zar_usdt': {
        'name': 'ZAR/USDT',
        'base': 'ZAR',
        'quote': 'USDT',
        'description': '–Æ–∂–Ω–æ–∞—Ñ—Ä–∏–∫–∞–Ω—Å–∫–∏–π —Ä—ç–Ω–¥ ‚Üí Tether USD',
        'emoji': 'üáøüá¶‚û°Ô∏èüí∞'
    },
    'thb_usdt': {
        'name': 'THB/USDT',
        'base': 'THB',
        'quote': 'USDT',
        'description': '–¢–∞–π—Å–∫–∏–π –±–∞—Ç ‚Üí Tether USD',
        'emoji': 'üáπüá≠‚û°Ô∏èüí∞'
    },
    'aed_usdt': {
        'name': 'AED/USDT',
        'base': 'AED',
        'quote': 'USDT',
        'description': '–î–∏—Ä—Ö–∞–º –û–ê–≠ ‚Üí Tether USD',
        'emoji': 'üá¶üá™‚û°Ô∏èüí∞'
    },
    'idr_usdt': {
        'name': 'IDR/USDT',
        'base': 'IDR',
        'quote': 'USDT',
        'description': '–ò–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–∞—è —Ä—É–ø–∏—è ‚Üí Tether USD',
        'emoji': 'üáÆüá©‚û°Ô∏èüí∞'
    }
}


def get_currency_pair_info(pair_callback: str) -> Optional[dict]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä–µ –ø–æ callback –¥–∞–Ω–Ω—ã–º
    
    Args:
        pair_callback: Callback –¥–∞–Ω–Ω—ã–µ –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã
        
    Returns:
        dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä–µ –∏–ª–∏ None –µ—Å–ª–∏ –ø–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
    """
    return CURRENCY_PAIRS.get(pair_callback)


def is_valid_currency_pair(pair_callback: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã
    
    Args:
        pair_callback: Callback –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        
    Returns:
        bool: True –µ—Å–ª–∏ –ø–∞—Ä–∞ –≤–∞–ª–∏–¥–Ω–∞
    """
    return pair_callback in CURRENCY_PAIRS


@admin_router.callback_query(lambda c: c.data and '_' in c.data and not c.data.startswith('header_'))
async def handle_currency_pair_selection(callback_query: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ä–∞—Å—á–µ—Ç –Ω–∞—Ü–µ–Ω–∫–∏
    """
    from .margin_calculation import start_margin_calculation
    
    pair_callback = callback_query.data
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username or "N/A"
    
    logger.info(
        f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã: "
        f"user_id={user_id}, username=@{username}, pair={pair_callback}"
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã
    if not is_valid_currency_pair(pair_callback):
        logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞: {pair_callback}")
        await callback_query.answer(
            "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞",
            show_alert=True
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä–µ
    pair_info = get_currency_pair_info(pair_callback)
    
    if not pair_info:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä–µ: {pair_callback}")
        await callback_query.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä–µ",
            show_alert=True
        )
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞—Ü–µ–Ω–∫–∏
    await start_margin_calculation(callback_query, pair_callback, state)
    
    logger.info(
        f"–ó–∞–ø—É—â–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞—Ü–µ–Ω–∫–∏ –¥–ª—è –ø–∞—Ä—ã: "
        f"user_id={user_id}, pair={pair_info['name']}"
    )