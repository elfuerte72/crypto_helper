#!/usr/bin/env python3
"""
Formatters –¥–ª—è Crypto Helper Bot (–ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞)
–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ —Ñ–ª–æ—É –æ–±–º–µ–Ω–∞ –≤–∞–ª—é—Ç
+ –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π (TASK-CRYPTO-002)
"""

import asyncio
import hashlib
from decimal import Decimal
from typing import Optional, Union
from aiogram.types import Message, CallbackQuery
from aiogram.exceptions import TelegramBadRequest
from .fsm_states import Currency

try:
    from ..config import config
    from ..utils.logger import get_bot_logger
except ImportError:
    import sys
    import os
    sys.path.insert(0, os.path.dirname(os.path.dirname(__file__)))
    from config import config
    from utils.logger import get_bot_logger

logger = get_bot_logger()


class MessageFormatter:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞"""
    
    @staticmethod
    def format_welcome_message() -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ /admin_bot"""
        return (
            "üîÑ <b>–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –æ–±–º–µ–Ω–∞ –≤–∞–ª—é—Ç</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é <b>–æ—Ç–¥–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç</b>:"
        )
    
    @staticmethod
    def format_source_selected_message(currency: Currency) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∏—Å—Ö–æ–¥–Ω–æ–π –≤–∞–ª—é—Ç—ã"""
        currency_names = {
            Currency.RUB: "—Ä—É–±–ª–∏",
            Currency.USDT: "USDT"
        }
        
        currency_name = currency_names.get(currency, currency.value)
        
        return (
            f"‚úÖ –ö–ª–∏–µ–Ω—Ç –æ—Ç–¥–∞–µ—Ç: <b>{currency_name}</b>\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é –∫–ª–∏–µ–Ω—Ç <b>–ø–æ–ª—É—á–∞–µ—Ç</b>:"
        )
    
    @staticmethod
    def format_target_selected_message(
        source: Currency, 
        target: Currency,
        base_rate: Decimal
    ) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–µ–≤–æ–π –≤–∞–ª—é—Ç—ã"""
        pair_text = MessageFormatter._get_pair_text(source, target)
        rate_text = MessageFormatter._format_rate_for_pair(source, target, base_rate)
        
        return (
            f"‚úÖ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: <b>{pair_text}</b>\n"
            f"üìä –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: {rate_text}\n\n"
            f"üí∞ –í–≤–µ–¥–∏—Ç–µ –Ω–∞—Ü–µ–Ω–∫—É –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö ( 1% –∏–ª–∏ 6.8%):"
        )
    
    @staticmethod
    def format_margin_selected_message(
        source: Currency,
        target: Currency, 
        base_rate: Decimal,
        margin_percent: Decimal,
        final_rate: Decimal
    ) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –Ω–∞—Ü–µ–Ω–∫–∏"""
        pair_text = MessageFormatter._get_pair_text(source, target)
        base_rate_text = MessageFormatter._format_rate_for_pair(source, target, base_rate)
        final_rate_text = MessageFormatter._format_rate_for_pair(source, target, final_rate)
        
        return (
            f"‚úÖ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: <b>{pair_text}</b>\n"
            f"üìä –ë–∞–∑–æ–≤—ã–π –∫—É—Ä—Å: {base_rate_text}\n"
            f"üí∞ –ù–∞—Ü–µ–Ω–∫–∞: <b>{margin_percent}%</b>\n"
            f"üéØ –ò—Ç–æ–≥–æ–≤—ã–π –∫—É—Ä—Å: <b>{final_rate_text}</b>\n\n"
            f"üíµ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ {source.value}:"
        )
    
    @staticmethod
    def format_final_result(
        source: Currency,
        target: Currency,
        amount: Decimal,
        margin_percent: Decimal,
        final_rate: Decimal,
        result: Decimal
    ) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–¥–µ–ª–∫–∏"""
        pair_text = MessageFormatter._get_pair_text(source, target)
        rate_text = MessageFormatter._format_rate_for_pair(source, target, final_rate)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—ã
        amount_text = f"{amount:,.0f}".replace(",", " ")
        result_text = f"{result:,.2f}".replace(",", " ")
        
        return (
            f"‚úÖ <b>–°–¥–µ–ª–∫–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞</b>\n\n"
            f"üîÑ <b>{pair_text}</b>\n"
            f"‚Ä¢ –°—É–º–º–∞: <b>{amount_text} {source.value}</b>\n"
            f"‚Ä¢ –ò—Ç–æ–≥–æ–≤—ã–π –∫—É—Ä—Å: {rate_text}\n"
            f"‚Ä¢ –ò—Ç–æ–≥–æ: <b>{result_text} {target.value}</b>\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
    
    @staticmethod
    def format_cancel_message(operation: str = "–û–ø–µ—Ä–∞—Ü–∏—è") -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã"""
        return f"‚ùå <b>{operation} –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n–í–≤–µ–¥–∏—Ç–µ /admin_bot –¥–ª—è –Ω–∞—á–∞–ª–∞."
    
    @staticmethod
    def format_error_message(error: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        return f"‚ùå <b>–û—à–∏–±–∫–∞:</b> {error}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    
    @staticmethod
    def format_margin_validation_error() -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–∞—Ü–µ–Ω–∫–∏"""
        return (
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω–∞—è –Ω–∞—Ü–µ–Ω–∫–∞</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0.1 –¥–æ 10 (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2.5):"
        )
    
    @staticmethod
    def format_amount_validation_error() -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—É–º–º—ã"""
        return (
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1000):"
        )
    
    @staticmethod
    def _get_pair_text(source: Currency, target: Currency) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã"""
        return f"{source.value} ‚Üí {target.value}"
    
    @staticmethod
    def _format_rate_for_pair(source: Currency, target: Currency, rate: Decimal) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∫—É—Ä—Å —Å —É—á–µ—Ç–æ–º –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã"""
        formatted_rate = f"{rate:.2f}".replace(".", ",")
        
        # –î–ª—è RUB ‚Üí –ª—é–±–∞—è –≤–∞–ª—é—Ç–∞: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∫–æ —Ä—É–±–ª–µ–π –∑–∞ 1 –µ–¥–∏–Ω–∏—Ü—É —Ü–µ–ª–µ–≤–æ–π –≤–∞–ª—é—Ç—ã
        if source == Currency.RUB:
            return f"<b>1 {target.value} = {formatted_rate} RUB</b>"
        # –î–ª—è USDT ‚Üí RUB: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∫–æ —Ä—É–±–ª–µ–π –∑–∞ 1 USDT  
        elif source == Currency.USDT and target == Currency.RUB:
            return f"<b>1 USDT = {formatted_rate} RUB</b>"
        # –î–ª—è USDT ‚Üí –¥—Ä—É–≥–∏–µ –≤–∞–ª—é—Ç—ã: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∫–æ —Ü–µ–ª–µ–≤–æ–π –≤–∞–ª—é—Ç—ã –∑–∞ 1 USDT
        elif source == Currency.USDT:
            return f"<b>1 USDT = {formatted_rate} {target.value}</b>"
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏ (–Ω–∞ –±—É–¥—É—â–µ–µ)
        else:
            return f"<b>1 {source.value} = {formatted_rate} {target.value}</b>"
    
    @staticmethod
    def _format_unified_rate(rate: Decimal) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∫—É—Ä—Å –≤ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ (DEPRECATED)"""
        formatted_rate = f"{rate:.2f}".replace(".", ",")
        return f"<b>1 USDT = {formatted_rate} RUB</b>"


class SafeMessageEditor:
    """
    –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π Telegram
    –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ—à–∏–±–∫–∏ "message is not modified" –∏ callback timeout
    """
    
    @staticmethod
    def _get_message_hash(text: str, markup_data: str = "") -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ö—ç—à —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        content = f"{text}|{markup_data}"
        return hashlib.md5(content.encode()).hexdigest()[:16]
    
    @staticmethod
    async def safe_edit_message(
        message: Message,
        new_text: str,
        reply_markup=None,
        parse_mode: str = 'HTML',
        max_attempts: int = None
    ) -> bool:
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∏–∑–º–µ–Ω–µ–Ω–∏–π
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            new_text: –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç
            reply_markup: –ù–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
            parse_mode: –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞
            max_attempts: –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫
            
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ
        """
        max_attempts = max_attempts or config.MAX_MESSAGE_EDIT_ATTEMPTS
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç
        current_text = message.text or message.caption or ""
        markup_data = str(reply_markup) if reply_markup else ""
        
        current_hash = SafeMessageEditor._get_message_hash(current_text, str(message.reply_markup))
        new_hash = SafeMessageEditor._get_message_hash(new_text, markup_data)
        
        if current_hash == new_hash:
            logger.debug("Message content unchanged, skipping edit")
            return True
        
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        for attempt in range(max_attempts):
            try:
                await message.edit_text(
                    text=new_text,
                    reply_markup=reply_markup,
                    parse_mode=parse_mode
                )
                logger.debug(f"Message edited successfully on attempt {attempt + 1}")
                return True
                
            except TelegramBadRequest as e:
                error_msg = str(e).lower()
                
                if "message is not modified" in error_msg:
                    logger.debug("Message is not modified (content identical)")
                    return True
                    
                elif "message to edit not found" in error_msg:
                    logger.warning("Message to edit not found")
                    return False
                    
                elif "bad request" in error_msg and attempt < max_attempts - 1:
                    logger.warning(f"Bad request on attempt {attempt + 1}, retrying...")
                    await asyncio.sleep(0.5)
                    continue
                    
                else:
                    logger.error(f"TelegramBadRequest: {e}")
                    return False
                    
            except Exception as e:
                logger.error(f"Unexpected error editing message: {e}")
                if attempt < max_attempts - 1:
                    await asyncio.sleep(0.5)
                    continue
                return False
        
        logger.error(f"Failed to edit message after {max_attempts} attempts")
        return False
    
    @staticmethod
    async def safe_answer_callback(
        callback_query: CallbackQuery,
        text: str = "",
        show_alert: bool = False,
        timeout: float = None
    ) -> bool:
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback query —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        
        Args:
            callback_query: Callback query
            text: –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
            show_alert: –ü–æ–∫–∞–∑–∞—Ç—å –∞–ª–µ—Ä—Ç
            timeout: –¢–∞–π–º–∞—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤–µ—á–µ–Ω–æ
        """
        timeout = timeout or config.CALLBACK_ANSWER_TIMEOUT
        
        try:
            await asyncio.wait_for(
                callback_query.answer(text=text, show_alert=show_alert),
                timeout=timeout
            )
            logger.debug("Callback query answered successfully")
            return True
            
        except asyncio.TimeoutError:
            logger.warning(f"Callback answer timeout after {timeout}s")
            return False
            
        except TelegramBadRequest as e:
            error_msg = str(e).lower()
            if "query is too old" in error_msg:
                logger.warning("Callback query is too old")
            else:
                logger.error(f"TelegramBadRequest answering callback: {e}")
            return False
            
        except Exception as e:
            logger.error(f"Unexpected error answering callback: {e}")
            return False


class LoadingMessageFormatter:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–≥—Ä—É–∑–∫–∏
    –†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É callback timeout –ø–æ–∫–∞–∑–æ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    """
    
    @staticmethod
    def format_loading_message(operation: str = "–ó–∞–≥—Ä—É–∑–∫–∞", step: int = 1, total: int = 3) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
        
        Args:
            operation: –û–ø–∏—Å–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            step: –¢–µ–∫—É—â–∏–π —à–∞–≥
            total: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤
            
        Returns:
            str: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        progress_bar = LoadingMessageFormatter._create_progress_bar(step, total)
        
        return (
            f"‚è≥ <b>{operation}...</b>\n\n"
            f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_bar} {step}/{total}\n\n"
            f"<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...</i>"
        )
    
    @staticmethod
    def format_api_loading_message(api_name: str = "API") -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ API –∑–∞–ø—Ä–æ—Å–∞
        
        Args:
            api_name: –ù–∞–∑–≤–∞–Ω–∏–µ API
            
        Returns:
            str: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        return (
            f"üîÑ <b>–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –æ—Ç {api_name}</b>\n\n"
            f"‚è≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É...\n\n"
            f"<i>–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥</i>"
        )
    
    @staticmethod
    def format_calculation_loading_message() -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ –∫—É—Ä—Å–∞
        
        Returns:
            str: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        return (
            "üßÆ <b>–†–∞—Å—á–µ—Ç –∫—É—Ä—Å–∞</b>\n\n"
            "‚è≥ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Ü–µ–Ω–∫–∏ –∏ —Ä–∞—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...\n\n"
            "<i>–°–µ–∫—É–Ω–¥–æ—á–∫—É...</i>"
        )
    
    @staticmethod
    def _create_progress_bar(current: int, total: int, length: int = 10) -> str:
        """
        –°–æ–∑–¥–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        
        Args:
            current: –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            total: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            length: –î–ª–∏–Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
            
        Returns:
            str: –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        """
        filled = int((current / total) * length)
        bar = "‚ñà" * filled + "‚ñë" * (length - filled)
        return f"[{bar}]"
    
    @staticmethod
    def format_error_with_retry(error_msg: str, attempt: int, max_attempts: int) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–∫–∞—Ö
        
        Args:
            error_msg: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            attempt: –ù–æ–º–µ—Ä –ø–æ–ø—ã—Ç–∫–∏
            max_attempts: –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫
            
        Returns:
            str: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        return (
            f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt}/{max_attempts})</b>\n\n"
            f"‚ùå {error_msg}\n\n"
            f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥..."
        )


# –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–≤—Ä–µ–º–µ–Ω–Ω–æ)
def format_welcome_message() -> str:
    """DEPRECATED: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ MessageFormatter.format_welcome_message()"""
    return MessageFormatter.format_welcome_message()


def format_cancel_message(operation: str = "–û–ø–µ—Ä–∞—Ü–∏—è") -> str:
    """DEPRECATED: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ MessageFormatter.format_cancel_message()"""
    return MessageFormatter.format_cancel_message(operation) 