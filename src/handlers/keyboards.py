#!/usr/bin/env python3
"""
Keyboards –¥–ª—è Crypto Helper Bot (–ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞)
–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ —Ñ–ª–æ—É –æ–±–º–µ–Ω–∞ –≤–∞–ª—é—Ç
"""

from aiogram.types import InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from .fsm_states import Currency, SUPPORTED_SOURCES, get_available_targets


def create_source_currency_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏—Å—Ö–æ–¥–Ω–æ–π –≤–∞–ª—é—Ç—ã"""
    builder = InlineKeyboardBuilder()
    
    for currency in SUPPORTED_SOURCES:
        text = ("üü¢ RUB (–†—É–±–ª–∏)" if currency == Currency.RUB 
                else "üî∂ USDT (Tether)")
        builder.button(
            text=text,
            callback_data=f"source_{currency.value}"
        )
    
    builder.button(
        text="‚ùå –û—Ç–º–µ–Ω–∞",
        callback_data="cancel_exchange"
    )
    
    # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç–æ–ª–±–µ—Ü
    builder.adjust(1)
    return builder.as_markup()


def create_target_currency_keyboard(
    source_currency: Currency
) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–µ–≤–æ–π –≤–∞–ª—é—Ç—ã"""
    builder = InlineKeyboardBuilder()
    
    available_targets = get_available_targets(source_currency)
    
    for currency in available_targets:
        if currency == Currency.RUB:
            text = "üü¢ RUB (–†—É–±–ª–∏)"
        elif currency == Currency.USDT:
            text = "üî∂ USDT (Tether)"
        elif currency == Currency.USD:
            text = "üíµ USD (–î–æ–ª–ª–∞—Ä—ã)"
        elif currency == Currency.EUR:
            text = "üí∂ EUR (–ï–≤—Ä–æ)"
        else:
            text = currency.value
            
        builder.button(
            text=text,
            callback_data=f"target_{currency.value}"
        )
    
    builder.button(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data="back_to_source"
    )
    builder.button(
        text="‚ùå –û—Ç–º–µ–Ω–∞",
        callback_data="cancel_exchange"
    )
    
    # –†–∞–∑–º–µ—â–∞–µ–º —Ü–µ–ª–µ–≤—ã–µ –≤–∞–ª—é—Ç—ã –≤ —Å—Ç–æ–ª–±–µ—Ü, —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    builder.adjust(1, 2)
    return builder.as_markup()


def create_margin_input_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∞—Ü–µ–Ω–∫–∏ —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏"""
    builder = InlineKeyboardBuilder()
    
    # –ë—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ —Å –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –Ω–∞—Ü–µ–Ω–∫–∏
    preset_margins = ["0.5", "1.0", "1.5", "2.0", "2.5", "3.0"]
    
    for margin in preset_margins:
        builder.button(
            text=f"{margin}%",
            callback_data=f"margin_{margin}"
        )
    
    builder.button(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data="back_to_target"
    )
    builder.button(
        text="‚ùå –û—Ç–º–µ–Ω–∞",
        callback_data="cancel_exchange"
    )
    
    # –†–∞–∑–º–µ—â–∞–µ–º –ø–æ 3 –∫–Ω–æ–ø–∫–∏ –Ω–∞—Ü–µ–Ω–∫–∏ –≤ —Ä—è–¥
    builder.adjust(3, 3, 2)
    return builder.as_markup()


def create_amount_input_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏"""
    builder = InlineKeyboardBuilder()
    
    # –ë—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ —Å –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ —Å—É–º–º–∞–º–∏
    preset_amounts = ["1000", "5000", "10000", "50000", "100000", "500000"]
    
    for amount in preset_amounts:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        formatted_amount = f"{int(amount):,}".replace(",", " ")
        builder.button(
            text=formatted_amount,
            callback_data=f"amount_{amount}"
        )
    
    builder.button(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data="back_to_margin"
    )
    builder.button(
        text="‚ùå –û—Ç–º–µ–Ω–∞",
        callback_data="cancel_exchange"
    )
    
    # –†–∞–∑–º–µ—â–∞–µ–º –ø–æ 3 –∫–Ω–æ–ø–∫–∏ —Å—É–º–º –≤ —Ä—è–¥
    builder.adjust(3, 3, 2)
    return builder.as_markup()


def create_result_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞"""
    builder = InlineKeyboardBuilder()
    
    builder.button(
        text="üîÑ –ù–æ–≤–∞—è —Å–¥–µ–ª–∫–∞",
        callback_data="new_exchange"
    )
    builder.button(
        text="üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        callback_data="main_menu"
    )
    
    builder.adjust(2)
    return builder.as_markup()


# –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–≤—Ä–µ–º–µ–Ω–Ω–æ)
def create_currency_pairs_keyboard() -> InlineKeyboardMarkup:
    """DEPRECATED: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ create_source_currency_keyboard()"""
    return create_source_currency_keyboard()


def create_amount_selection_keyboard() -> InlineKeyboardMarkup:
    """DEPRECATED: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ create_amount_input_keyboard()"""
    return create_amount_input_keyboard()


def create_margin_selection_keyboard() -> InlineKeyboardMarkup:
    """DEPRECATED: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ create_margin_input_keyboard()"""
    return create_margin_input_keyboard()


class KeyboardBuilder:
    """DEPRECATED: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä –Ω–∞–ø—Ä—è–º—É—é"""
    
    @staticmethod
    def source_currency():
        return create_source_currency_keyboard()
    
    @staticmethod
    def target_currency(source: Currency):
        return create_target_currency_keyboard(source) 