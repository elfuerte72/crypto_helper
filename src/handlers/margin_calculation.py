#!/usr/bin/env python3
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–∞—Å—á–µ—Ç–∞ –∫—É—Ä—Å–∞ —Å –Ω–∞—Ü–µ–Ω–∫–æ–π –¥–ª—è Crypto Helper Bot
–í–∫–ª—é—á–∞–µ—Ç FSM –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–º —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
"""

import logging
from typing import Optional, Dict, Any
from decimal import Decimal, InvalidOperation, ROUND_HALF_UP

from aiogram import Router, Bot, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import TelegramBadRequest

try:
    from ..config import config
    from ..utils.logger import get_bot_logger
    from ..services.api_service import api_service, ExchangeRate, RapiraAPIError
    from .admin_handlers import CURRENCY_PAIRS, get_currency_pair_info
except ImportError:
    # Handle direct execution
    import sys
    import os
    sys.path.insert(0, os.path.dirname(os.path.dirname(__file__)))
    from config import config
    from utils.logger import get_bot_logger
    from services.api_service import api_service, ExchangeRate, RapiraAPIError
    from handlers.admin_handlers import CURRENCY_PAIRS, get_currency_pair_info

# Initialize logger
logger = get_bot_logger()

# Create router for margin calculation handlers
margin_router = Router()


class MarginCalculationForm(StatesGroup):
    """FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫—É—Ä—Å–∞ —Å –Ω–∞—Ü–µ–Ω–∫–æ–π"""
    waiting_for_margin = State()
    showing_result = State()


class MarginCalculationError(Exception):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞—Ü–µ–Ω–∫–∏"""
    pass


class MarginCalculator:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫—É—Ä—Å–∞ —Å –Ω–∞—Ü–µ–Ω–∫–æ–π"""
    
    @staticmethod
    def validate_margin(margin_text: str) -> Decimal:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π –Ω–∞—Ü–µ–Ω–∫–∏
        
        Args:
            margin_text: –¢–µ–∫—Å—Ç —Å –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π –Ω–∞—Ü–µ–Ω–∫–æ–π
            
        Returns:
            Decimal: –í–∞–ª–∏–¥–Ω–∞—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è –Ω–∞—Ü–µ–Ω–∫–∞
            
        Raises:
            MarginCalculationError: –ü—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –Ω–∞—Ü–µ–Ω–∫–µ
        """
        try:
            # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ –ø—Ä–æ–±–µ–ª—ã
            clean_text = margin_text.strip().replace('%', '').replace(',', '.')
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ Decimal –¥–ª—è —Ç–æ—á–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
            margin = Decimal(clean_text)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω (–æ—Ç -100% –¥–æ +1000%)
            if margin < -100:
                raise MarginCalculationError(
                    "–ù–∞—Ü–µ–Ω–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ -100% (—ç—Ç–æ –æ–∑–Ω–∞—á–∞–ª–æ –±—ã –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é —Ü–µ–Ω—É)"
                )
            
            if margin > 1000:
                raise MarginCalculationError(
                    "–ù–∞—Ü–µ–Ω–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 1000% (—Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞—è –Ω–∞—Ü–µ–Ω–∫–∞)"
                )
            
            return margin
            
        except (InvalidOperation, ValueError) as e:
            raise MarginCalculationError(
                f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–∞—Ü–µ–Ω–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 5, 2.5, -1.2"
            )
    
    @staticmethod
    def calculate_final_rate(base_rate: Decimal, margin_percent: Decimal) -> Decimal:
        """
        –†–∞—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–≥–æ –∫—É—Ä—Å–∞ —Å –Ω–∞—Ü–µ–Ω–∫–æ–π
        
        Args:
            base_rate: –ë–∞–∑–æ–≤—ã–π –∫—É—Ä—Å
            margin_percent: –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è –Ω–∞—Ü–µ–Ω–∫–∞
            
        Returns:
            Decimal: –ò—Ç–æ–≥–æ–≤—ã–π –∫—É—Ä—Å —Å –Ω–∞—Ü–µ–Ω–∫–æ–π
        """
        # –§–æ—Ä–º—É–ª–∞: –∏—Ç–æ–≥–æ–≤—ã–π_–∫—É—Ä—Å = –±–∞–∑–æ–≤—ã–π_–∫—É—Ä—Å * (1 + –Ω–∞—Ü–µ–Ω–∫–∞/100)
        margin_multiplier = Decimal('1') + (margin_percent / Decimal('100'))
        final_rate = base_rate * margin_multiplier
        
        # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 8 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π (—Å—Ç–∞–Ω–¥–∞—Ä—Ç –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç)
        return final_rate.quantize(Decimal('0.00000001'), rounding=ROUND_HALF_UP)
    
    @staticmethod
    def format_currency_value(value: Decimal, currency: str) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤–∞–ª—é—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
        Args:
            value: –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            currency: –ö–æ–¥ –≤–∞–ª—é—Ç—ã
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        """
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞–ª—é—Ç—ã
        if currency in ['BTC', 'ETH']:
            # –î–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç - –±–æ–ª—å—à–µ –∑–Ω–∞–∫–æ–≤
            return f"{value:.8f}"
        elif currency in ['USDT', 'USDC', 'DAI']:
            # –î–ª—è —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω–æ–≤ - –º–µ–Ω—å—à–µ –∑–Ω–∞–∫–æ–≤
            return f"{value:.4f}"
        elif currency in ['RUB', 'USD', 'EUR']:
            # –î–ª—è —Ñ–∏–∞—Ç–Ω—ã—Ö –≤–∞–ª—é—Ç - 2 –∑–Ω–∞–∫–∞
            return f"{value:.2f}"
        else:
            # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
            if value >= 1:
                return f"{value:.4f}"
            else:
                return f"{value:.8f}"


async def start_margin_calculation(
    callback_query: CallbackQuery,
    pair_callback: str,
    state: FSMContext
) -> None:
    """
    –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–∞—Å—á–µ—Ç–∞ –∫—É—Ä—Å–∞ —Å –Ω–∞—Ü–µ–Ω–∫–æ–π
    
    Args:
        callback_query: Callback query –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        pair_callback: Callback –¥–∞–Ω–Ω—ã–µ –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username or "N/A"
    
    logger.info(
        f"–ù–∞—á–∞–ª–æ —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞—Ü–µ–Ω–∫–∏: "
        f"user_id={user_id}, username=@{username}, pair={pair_callback}"
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä–µ
    pair_info = get_currency_pair_info(pair_callback)
    if not pair_info:
        await callback_query.answer(
            "‚ùå –û—à–∏–±–∫–∞: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
            show_alert=True
        )
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –¥–ª—è –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã
        async with api_service:
            exchange_rate = await api_service.get_exchange_rate(pair_info['name'])
            
        if not exchange_rate:
            raise RapiraAPIError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ FSM
        await state.update_data(
            pair_callback=pair_callback,
            pair_info=pair_info,
            exchange_rate=exchange_rate.to_dict(),
            base_rate=float(exchange_rate.rate)
        )
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞—Ü–µ–Ω–∫–∏
        await state.set_state(MarginCalculationForm.waiting_for_margin)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –Ω–∞—Ü–µ–Ω–∫–∞–º–∏
        keyboard = create_margin_selection_keyboard()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞—Ü–µ–Ω–∫–∏
        message_text = (
            f"üí± <b>–†–∞—Å—á–µ—Ç –∫—É—Ä—Å–∞ —Å –Ω–∞—Ü–µ–Ω–∫–æ–π</b>\n\n"
            f"{pair_info['emoji']} <b>{pair_info['name']}</b>\n"
            f"üìù <i>{pair_info['description']}</i>\n\n"
            f"üí∞ <b>–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å:</b> <code>{exchange_rate.rate:.8f}</code>\n"
            f"üïê <b>–í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è:</b> {exchange_rate.timestamp[:19].replace('T', ' ')}\n"
            f"üìä <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> {exchange_rate.source}\n\n"
            f"üìà <b>–£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—É—é –Ω–∞—Ü–µ–Ω–∫—É:</b>\n\n"
            f"‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µ\n"
            f"‚Ä¢ –ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5, 2.5, -1.2)\n"
            f"‚Ä¢ –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç –∫—É—Ä—Å\n"
            f"‚Ä¢ –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —É–º–µ–Ω—å—à–∞—é—Ç –∫—É—Ä—Å\n\n"
            f"üí° <i>–î–∏–∞–ø–∞–∑–æ–Ω: –æ—Ç -100% –¥–æ +1000%</i>"
        )
        
        await callback_query.message.edit_text(
            message_text,
            parse_mode='HTML',
            reply_markup=keyboard
        )
        
        await callback_query.answer("–ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å, —É–∫–∞–∂–∏—Ç–µ –Ω–∞—Ü–µ–Ω–∫—É")
        
        logger.info(
            f"–ó–∞–ø—Ä–æ—Å –Ω–∞—Ü–µ–Ω–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: "
            f"user_id={user_id}, pair={pair_info['name']}, rate={exchange_rate.rate}"
        )
        
    except RapiraAPIError as e:
        await callback_query.message.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞</b>\n\n"
            f"{pair_info['emoji']} <b>{pair_info['name']}</b>\n\n"
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã:\n"
            f"<code>{str(e)}</code>\n\n"
            f"üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n\n"
            f"üè† –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin_bot –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é.",
            parse_mode='HTML'
        )
        
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞", show_alert=True)
        await state.clear()
        
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –¥–ª—è {pair_info['name']}: {e}")
    
    except Exception as e:
        await callback_query.message.edit_text(
            f"‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n"
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å —Ä–∞—Å—á–µ—Ç –Ω–∞—Ü–µ–Ω–∫–∏.\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n\n"
            f"üè† –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin_bot –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é.",
            parse_mode='HTML'
        )
        
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        await state.clear()
        
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞—Ü–µ–Ω–∫–∏: {e}")


def create_margin_selection_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π –Ω–∞—Ü–µ–Ω–∫–∏
    
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –Ω–∞—Ü–µ–Ω–∫–∏
    """
    # –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞—Ü–µ–Ω–∫–∏
    margin_options = [
        ('0%', '0'),
        ('1%', '1'),
        ('2%', '2'),
        ('3%', '3'),
        ('5%', '5'),
        ('10%', '10'),
        ('-1%', '-1'),
        ('-2%', '-2'),
        ('-5%', '-5')
    ]
    
    keyboard = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    keyboard.append([
        InlineKeyboardButton(text="üìà –ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä –Ω–∞—Ü–µ–Ω–∫–∏", callback_data="header_margin")
    ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞—Ü–µ–Ω–∫–∏ –ø–æ 3 –≤ —Ä—è–¥
    for i in range(0, len(margin_options), 3):
        row = []
        for j in range(3):
            if i + j < len(margin_options):
                text, value = margin_options[i + j]
                row.append(InlineKeyboardButton(
                    text=text, 
                    callback_data=f"margin_{value}"
                ))
        keyboard.append(row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard.append([
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_margin"),
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


@margin_router.callback_query(lambda c: c.data and c.data.startswith('margin_'))
async def handle_margin_selection(callback_query: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –Ω–∞—Ü–µ–Ω–∫–∏
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    current_state = await state.get_state()
    if current_state != MarginCalculationForm.waiting_for_margin:
        await callback_query.answer("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ", show_alert=True)
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Ü–µ–Ω–∫–∏
    margin_value = callback_query.data.replace('margin_', '')
    
    try:
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –Ω–∞—Ü–µ–Ω–∫—É
        margin = MarginCalculator.validate_margin(margin_value)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞—Ü–µ–Ω–∫—É
        await process_margin_input(callback_query.message, margin, state, from_callback=True)
        await callback_query.answer(f"–í—ã–±—Ä–∞–Ω–∞ –Ω–∞—Ü–µ–Ω–∫–∞: {margin}%")
        
    except MarginCalculationError as e:
        await callback_query.answer(f"‚ùå {str(e)}", show_alert=True)
    except Exception as e:
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –Ω–∞—Ü–µ–Ω–∫–∏: {e}")


@margin_router.callback_query(lambda c: c.data == 'cancel_margin')
async def handle_cancel_margin(callback_query: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞—Ü–µ–Ω–∫–∏
    """
    await state.clear()
    
    await callback_query.message.edit_text(
        "‚ùå <b>–†–∞—Å—á–µ—Ç –Ω–∞—Ü–µ–Ω–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω</b>\n\n"
        "–û–ø–µ—Ä–∞—Ü–∏—è –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.\n\n"
        "üè† –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin_bot –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é.",
        parse_mode='HTML'
    )
    
    await callback_query.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –æ—Ç–º–µ–Ω–∏–ª —Ä–∞—Å—á–µ—Ç –Ω–∞—Ü–µ–Ω–∫–∏")


@margin_router.callback_query(lambda c: c.data == 'back_to_main')
async def handle_back_to_main(callback_query: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
    """
    await state.clear()
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–∑ admin_handlers
    from .admin_handlers import create_currency_pairs_keyboard
    
    keyboard = create_currency_pairs_keyboard()
    
    admin_message = (
        "üîß <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å</b>\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Crypto Helper Bot!\n\n"
        "üìä <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞:</b>\n\n"
        "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ\n"
        "‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—É—é –Ω–∞—Ü–µ–Ω–∫—É\n"
        "‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å —Å –Ω–∞—Ü–µ–Ω–∫–æ–π\n\n"
        "üí° <i>–ö—É—Ä—Å—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ —á–µ—Ä–µ–∑ Rapira API</i>"
    )
    
    await callback_query.message.edit_text(
        admin_message,
        reply_markup=keyboard,
        parse_mode='HTML'
    )
    
    await callback_query.answer("–í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é")


@margin_router.callback_query(lambda c: c.data and c.data.startswith('header_'))
async def handle_header_callbacks_margin(callback_query: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫-–∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (–Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π, —Ç–æ–ª—å–∫–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ)
    """
    await callback_query.answer("–≠—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Ü–µ–Ω–∫—É –Ω–∏–∂–µ.", show_alert=False)


@margin_router.message(MarginCalculationForm.waiting_for_margin, F.text)
async def handle_margin_text_input(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π –Ω–∞—Ü–µ–Ω–∫–∏
    """
    try:
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω—É—é –Ω–∞—Ü–µ–Ω–∫—É
        margin = MarginCalculator.validate_margin(message.text)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞—Ü–µ–Ω–∫—É
        await process_margin_input(message, margin, state)
        
    except MarginCalculationError as e:
        await message.reply(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞—Ü–µ–Ω–∫–∏</b>\n\n"
            f"{str(e)}\n\n"
            f"üí° <b>–ü—Ä–∏–º–µ—Ä—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞:</b>\n"
            f"‚Ä¢ <code>5</code> (5% –Ω–∞—Ü–µ–Ω–∫–∞)\n"
            f"‚Ä¢ <code>2.5</code> (2.5% –Ω–∞—Ü–µ–Ω–∫–∞)\n"
            f"‚Ä¢ <code>-1.2</code> (-1.2% —Å–∫–∏–¥–∫–∞)\n"
            f"‚Ä¢ <code>0</code> (–±–µ–∑ –Ω–∞—Ü–µ–Ω–∫–∏)\n\n"
            f"üî¢ <b>–î–∏–∞–ø–∞–∑–æ–Ω:</b> –æ—Ç -100% –¥–æ +1000%",
            parse_mode='HTML'
        )
    except Exception as e:
        await message.reply(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—É—é –Ω–∞—Ü–µ–Ω–∫—É.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            parse_mode='HTML'
        )
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–∞—Ü–µ–Ω–∫–∏: {e}")


async def process_margin_input(
    message: Message,
    margin: Decimal,
    state: FSMContext,
    from_callback: bool = False
) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π –Ω–∞—Ü–µ–Ω–∫–∏ –∏ —Ä–∞—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–≥–æ –∫—É—Ä—Å–∞
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        margin: –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –Ω–∞—Ü–µ–Ω–∫–∞
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
        from_callback: –§–ª–∞–≥, —á—Ç–æ –≤—ã–∑–æ–≤ –∏–∑ callback
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        data = await state.get_data()
        pair_info = data.get('pair_info')
        base_rate = Decimal(str(data.get('base_rate')))
        exchange_rate_data = data.get('exchange_rate')
        
        if not all([pair_info, base_rate, exchange_rate_data]):
            raise MarginCalculationError("–î–∞–Ω–Ω—ã–µ –∫—É—Ä—Å–∞ –ø–æ—Ç–µ—Ä—è–Ω—ã, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ")
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –∫—É—Ä—Å
        final_rate = MarginCalculator.calculate_final_rate(base_rate, margin)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
        rate_change = final_rate - base_rate
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞
        await state.update_data(
            margin_percent=float(margin),
            final_rate=float(final_rate),
            rate_change=float(rate_change)
        )
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        await state.set_state(MarginCalculationForm.showing_result)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result_message = format_calculation_result(
            pair_info=pair_info,
            base_rate=base_rate,
            margin=margin,
            final_rate=final_rate,
            rate_change=rate_change,
            exchange_rate_data=exchange_rate_data
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        result_keyboard = create_result_keyboard()
        
        if from_callback:
            # –ï—Å–ª–∏ –≤—ã–∑–æ–≤ –∏–∑ callback, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message.edit_text(
                result_message,
                parse_mode='HTML',
                reply_markup=result_keyboard
            )
        else:
            # –ï—Å–ª–∏ –≤—ã–∑–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await message.answer(
                result_message,
                parse_mode='HTML',
                reply_markup=result_keyboard
            )
        
        logger.info(
            f"–†–∞—Å—á–µ—Ç –Ω–∞—Ü–µ–Ω–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω: "
            f"user_id={message.from_user.id}, "
            f"pair={pair_info['name']}, "
            f"margin={margin}%, "
            f"base_rate={base_rate}, "
            f"final_rate={final_rate}"
        )
        
    except Exception as e:
        error_message = (
            "‚ùå <b>–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫—É—Ä—Å —Å –Ω–∞—Ü–µ–Ω–∫–æ–π.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.\n\n"
            "üè† –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin_bot –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é."
        )
        
        if from_callback:
            await message.edit_text(error_message, parse_mode='HTML')
        else:
            await message.answer(error_message, parse_mode='HTML')
        
        await state.clear()
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞—Ü–µ–Ω–∫–∏: {e}")


def format_calculation_result(
    pair_info: Dict[str, Any],
    base_rate: Decimal,
    margin: Decimal,
    final_rate: Decimal,
    rate_change: Decimal,
    exchange_rate_data: Dict[str, Any]
) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    
    Args:
        pair_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä–µ
        base_rate: –ë–∞–∑–æ–≤—ã–π –∫—É—Ä—Å
        margin: –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è –Ω–∞—Ü–µ–Ω–∫–∞
        final_rate: –ò—Ç–æ–≥–æ–≤—ã–π –∫—É—Ä—Å
        rate_change: –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–∞
        exchange_rate_data: –î–∞–Ω–Ω—ã–µ –æ –∫—É—Ä—Å–µ
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∞–ª—é—Ç—ã
    base_currency = pair_info['base']
    quote_currency = pair_info['quote']
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
    base_rate_str = MarginCalculator.format_currency_value(base_rate, quote_currency)
    final_rate_str = MarginCalculator.format_currency_value(final_rate, quote_currency)
    rate_change_str = MarginCalculator.format_currency_value(abs(rate_change), quote_currency)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–Ω–∞–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    change_sign = "+" if rate_change >= 0 else "-"
    change_emoji = "üìà" if rate_change >= 0 else "üìâ"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –¥–ª—è –Ω–∞—Ü–µ–Ω–∫–∏
    margin_emoji = "üìà" if margin >= 0 else "üìâ"
    margin_sign = "+" if margin >= 0 else ""
    
    # –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞
    timestamp = exchange_rate_data.get('timestamp', '')[:19].replace('T', ' ')
    
    result_message = (
        f"‚úÖ <b>–†–∞—Å—á–µ—Ç –∫—É—Ä—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω</b>\n\n"
        f"{pair_info['emoji']} <b>{pair_info['name']}</b>\n"
        f"üìù <i>{pair_info['description']}</i>\n\n"
        f"üí∞ <b>–ò—Å—Ö–æ–¥–Ω—ã–π –∫—É—Ä—Å:</b> <code>{base_rate_str}</code> {quote_currency}\n"
        f"{margin_emoji} <b>–ù–∞—Ü–µ–Ω–∫–∞:</b> <code>{margin_sign}{margin}%</code>\n"
        f"üíé <b>–ò—Ç–æ–≥–æ–≤—ã–π –∫—É—Ä—Å:</b> <code>{final_rate_str}</code> {quote_currency}\n\n"
        f"{change_emoji} <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ:</b> <code>{change_sign}{rate_change_str}</code> {quote_currency}\n\n"
        f"üìä <b>–î–µ—Ç–∞–ª–∏ —Ä–∞—Å—á–µ—Ç–∞:</b>\n"
        f"‚Ä¢ –ë–∞–∑–æ–≤—ã–π –∫—É—Ä—Å: {base_rate_str} {quote_currency}\n"
        f"‚Ä¢ –ù–∞—Ü–µ–Ω–∫–∞: {margin_sign}{margin}%\n"
        f"‚Ä¢ –ú–Ω–æ–∂–∏—Ç–µ–ª—å: {1 + margin/100:.6f}\n"
        f"‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç: {base_rate_str} √ó {1 + margin/100:.6f} = {final_rate_str}\n\n"
        f"üïê <b>–í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞:</b> {timestamp}\n"
        f"üì° <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> {exchange_rate_data.get('source', 'N/A')}\n\n"
        f"üí° <i>–î–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ</i>"
    )
    
    return result_message


def create_result_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞
    
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    """
    keyboard = [
        [
            InlineKeyboardButton(text="üì§ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ –∫–∞–Ω–∞–ª", callback_data="publish_result"),
            InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å", callback_data="recalculate_margin")
        ],
        [
            InlineKeyboardButton(text="üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç", callback_data="copy_result"),
            InlineKeyboardButton(text="üìä –ù–æ–≤–∞—è –ø–∞—Ä–∞", callback_data="back_to_main")
        ],
        [
            InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
        ]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


@margin_router.callback_query(lambda c: c.data == 'publish_result', MarginCalculationForm.showing_result)
async def handle_publish_result(callback_query: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –∫–∞–Ω–∞–ª
    """
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username or "N/A"
    full_name = callback_query.from_user.full_name or "–ú–µ–Ω–µ–¥–∂–µ—Ä"
    
    logger.info(f"–ó–∞–ø—Ä–æ—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (@{username})")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—á–µ—Ç–∞
        data = await state.get_data()
        pair_info = data.get('pair_info')
        base_rate = Decimal(str(data.get('base_rate')))
        margin = Decimal(str(data.get('margin_percent')))
        final_rate = Decimal(str(data.get('final_rate')))
        rate_change = Decimal(str(data.get('rate_change')))
        exchange_rate_data = data.get('exchange_rate')
        
        if not all([pair_info, base_rate, margin, final_rate, exchange_rate_data]):
            raise MarginCalculationError("–î–∞–Ω–Ω—ã–µ —Ä–∞—Å—á–µ—Ç–∞ –ø–æ—Ç–µ—Ä—è–Ω—ã")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        from .channel_publisher import ChannelPublisher
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –∏ ID –∫–∞–Ω–∞–ª–∞
        development_mode = config.DEBUG_MODE or not config.ADMIN_CHANNEL_ID
        channel_id = config.ADMIN_CHANNEL_ID if not development_mode else None
        
        # –ü–æ–ª—É—á–∞–µ–º –±–æ—Ç–∞ –∏–∑ callback_query
        bot = callback_query.bot
        
        # –ü—É–±–ª–∏–∫—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        publish_result = await ChannelPublisher.publish_result(
            bot=bot,
            pair_info=pair_info,
            base_rate=base_rate,
            margin=margin,
            final_rate=final_rate,
            rate_change=rate_change,
            exchange_rate_data=exchange_rate_data,
            manager_name=full_name,
            user_id=user_id,
            channel_id=channel_id,
            development_mode=development_mode
        )
        
        if publish_result['success']:
            # –£—Å–ø–µ—à–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è
            success_message = (
                f"‚úÖ <b>–ü—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n\n"
                f"{publish_result['message']}\n\n"
                f"üìä <b>–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>\n"
                f"‚Ä¢ –í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞: {pair_info['name']}\n"
                f"‚Ä¢ –ò—Ç–æ–≥–æ–≤—ã–π –∫—É—Ä—Å: {final_rate:.8f} {pair_info['quote']}\n"
                f"‚Ä¢ –ù–∞—Ü–µ–Ω–∫–∞: {margin:+.2f}%\n"
                f"‚Ä¢ –ú–µ–Ω–µ–¥–∂–µ—Ä: {full_name}\n\n"
                f"üéØ <b>–¶–µ–ª—å:</b> {publish_result['target']}\n\n"
                f"üí° <i>–î–ª—è –Ω–æ–≤–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin_bot</i>"
            )
            
            await callback_query.message.edit_text(
                success_message,
                parse_mode='HTML'
            )
            
            await callback_query.answer("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω")
            
        else:
            # –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            error_message = (
                f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏</b>\n\n"
                f"{publish_result['message']}\n\n"
                f"üîß <b>–í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:</b>\n"
                f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ\n"
                f"‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª\n"
                f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å ID –∫–∞–Ω–∞–ª–∞\n\n"
                f"üè† –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin_bot –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é"
            )
            
            await callback_query.message.edit_text(
                error_message,
                parse_mode='HTML'
            )
            
            await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", show_alert=True)
        
        logger.info(
            f"–ü—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: user_id={user_id}, "
            f"success={publish_result['success']}, target={publish_result['target']}"
        )
        
    except MarginCalculationError as e:
        await callback_query.message.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
            f"{str(e)}\n\n"
            f"–ù–∞—á–Ω–∏—Ç–µ —Ä–∞—Å—á–µ—Ç –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /admin_bot",
            parse_mode='HTML'
        )
        
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        await state.clear()
        
        logger.error(f"–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
    
    except Exception as e:
        await callback_query.message.edit_text(
            f"‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n"
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç.\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n\n"
            f"üè† –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin_bot –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é.",
            parse_mode='HTML'
        )
        
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")


@margin_router.callback_query(lambda c: c.data == 'recalculate_margin', MarginCalculationForm.showing_result)
async def handle_recalculate_margin(callback_query: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Å –Ω–æ–≤–æ–π –Ω–∞—Ü–µ–Ω–∫–æ–π
    """
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –≤–≤–æ–¥–∞ –Ω–∞—Ü–µ–Ω–∫–∏
    await state.set_state(MarginCalculationForm.waiting_for_margin)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    pair_info = data.get('pair_info')
    base_rate = data.get('base_rate')
    exchange_rate_data = data.get('exchange_rate')
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞—Ü–µ–Ω–∫–∏
    keyboard = create_margin_selection_keyboard()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_text = (
        f"üîÑ <b>–ü–µ—Ä–µ—Å—á–µ—Ç –∫—É—Ä—Å–∞ —Å –Ω–∞—Ü–µ–Ω–∫–æ–π</b>\n\n"
        f"{pair_info['emoji']} <b>{pair_info['name']}</b>\n"
        f"üìù <i>{pair_info['description']}</i>\n\n"
        f"üí∞ <b>–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å:</b> <code>{base_rate:.8f}</code>\n"
        f"üïê <b>–í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è:</b> {exchange_rate_data.get('timestamp', '')[:19].replace('T', ' ')}\n\n"
        f"üìà <b>–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—É—é –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—É—é –Ω–∞—Ü–µ–Ω–∫—É:</b>\n\n"
        f"‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µ\n"
        f"‚Ä¢ –ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5, 2.5, -1.2)\n\n"
        f"üí° <i>–î–∏–∞–ø–∞–∑–æ–Ω: –æ—Ç -100% –¥–æ +1000%</i>"
    )
    
    await callback_query.message.edit_text(
        message_text,
        parse_mode='HTML',
        reply_markup=keyboard
    )
    
    await callback_query.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –Ω–∞—Ü–µ–Ω–∫—É")


@margin_router.callback_query(lambda c: c.data == 'copy_result', MarginCalculationForm.showing_result)
async def handle_copy_result(callback_query: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—á–µ—Ç–∞
        data = await state.get_data()
        pair_info = data.get('pair_info')
        base_rate = Decimal(str(data.get('base_rate')))
        margin = Decimal(str(data.get('margin_percent')))
        final_rate = Decimal(str(data.get('final_rate')))
        exchange_rate_data = data.get('exchange_rate')
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è (–ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç)
        base_currency = pair_info['base']
        quote_currency = pair_info['quote']
        
        copy_text = (
            f"üí± {pair_info['name']}\n"
            f"üìä –ë–∞–∑–æ–≤—ã–π –∫—É—Ä—Å: {base_rate:.8f} {quote_currency}\n"
            f"üìà –ù–∞—Ü–µ–Ω–∫–∞: {margin:+.2f}%\n"
            f"üíé –ò—Ç–æ–≥–æ–≤—ã–π –∫—É—Ä—Å: {final_rate:.8f} {quote_currency}\n"
            f"üïê {exchange_rate_data.get('timestamp', '')[:19].replace('T', ' ')}\n"
            f"üì° –ò—Å—Ç–æ—á–Ω–∏–∫: {exchange_rate_data.get('source', 'N/A')}"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        await callback_query.message.reply(
            f"üìã <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:</b>\n\n"
            f"<code>{copy_text}</code>\n\n"
            f"üí° <i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ç–µ–∫—Å—Ç –≤—ã—à–µ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è</i>",
            parse_mode='HTML'
        )
        
        await callback_query.answer("–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
        
    except Exception as e:
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞", show_alert=True)
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö FSM
@margin_router.message(MarginCalculationForm.waiting_for_margin, ~F.text)
async def handle_unexpected_content_waiting_margin(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞—Ü–µ–Ω–∫–∏
    """
    await message.reply(
        "‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—É—é –Ω–∞—Ü–µ–Ω–∫—É –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞.\n\n"
        "üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
        "‚Ä¢ <code>5</code> (5% –Ω–∞—Ü–µ–Ω–∫–∞)\n"
        "‚Ä¢ <code>-2.5</code> (2.5% —Å–∫–∏–¥–∫–∞)\n"
        "‚Ä¢ <code>0</code> (–±–µ–∑ –Ω–∞—Ü–µ–Ω–∫–∏)\n\n"
        "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞.",
        parse_mode='HTML'
    )


@margin_router.message(MarginCalculationForm.showing_result)
async def handle_unexpected_message_showing_result(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    """
    await message.reply(
        "üí° <b>–†–µ–∑—É–ª—å—Ç–∞—Ç —É–∂–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω</b>\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ –¥–ª—è:\n"
        "‚Ä¢ –ü—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –∫–∞–Ω–∞–ª\n"
        "‚Ä¢ –ü–µ—Ä–µ—Å—á–µ—Ç–∞ —Å –Ω–æ–≤–æ–π –Ω–∞—Ü–µ–Ω–∫–æ–π\n"
        "‚Ä¢ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞\n"
        "‚Ä¢ –í–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é",
        parse_mode='HTML'
    )