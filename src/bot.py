#!/usr/bin/env python3
"""
Crypto Helper Telegram Bot - Main Bot Module
Production-ready bot implementation with proper structure
"""

import asyncio
from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.filters import Command

try:
    from .config import config
    from .utils.logger import get_bot_logger
    from .handlers.admin_handlers import admin_router
    from .handlers.bot_handlers import margin_router  # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç
except ImportError:
    # Handle direct execution
    import sys
    import os
    sys.path.insert(0, os.path.dirname(__file__))
    from config import config
    from utils.logger import get_bot_logger
    from handlers.admin_handlers import admin_router
    from handlers.bot_handlers import margin_router  # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç

# Initialize logger
logger = get_bot_logger()


class CryptoHelperBot:
    """Main bot class with proper initialization and error handling"""
    
    def __init__(self):
        """Initialize bot instance"""
        self.bot = Bot(token=config.BOT_TOKEN)
        self.dp = Dispatcher()
        self._setup_handlers()
    
    def _setup_handlers(self):
        """Setup message handlers"""
        # Include admin router
        self.dp.include_router(admin_router)
        
        # Include margin calculation router
        self.dp.include_router(margin_router)
        
        # Basic command handlers
        self.dp.message(Command('start'))(self.start_handler)
        self.dp.message(Command('test'))(self.test_handler)
        self.dp.message(Command('help'))(self.help_handler)
    
    async def start_handler(self, message: Message):
        """Handle /start command"""
        logger.info(f"Start command from user {message.from_user.id}")
        
        welcome_text = (
            "üöÄ <b>Crypto Helper Bot</b>\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∫—É—Ä—Å–æ–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç!\n\n"
            "üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "/start - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
            "/help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n"
            "/test - –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞\n"
            "/admin_bot - –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
            "üîß <b>–°—Ç–∞—Ç—É—Å:</b> MVP –≤–µ—Ä—Å–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
        )
        
        await message.reply(welcome_text, parse_mode='HTML')
    
    async def test_handler(self, message: Message):
        """Handle /test command"""
        logger.info(f"Test command from user {message.from_user.id}")
        
        test_info = (
            "‚úÖ <b>–¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω!</b>\n\n"
            f"üÜî Chat ID: <code>{message.chat.id}</code>\n"
            f"üë§ User ID: <code>{message.from_user.id}</code>\n"
            f"üìù Username: @{message.from_user.username or 'N/A'}\n"
            f"üåê Chat Type: {message.chat.type}\n"
            f"‚öôÔ∏è Debug Mode: {'–í–∫–ª—é—á–µ–Ω' if config.DEBUG_MODE else '–í—ã–∫–ª—é—á–µ–Ω'}"
        )
        
        await message.reply(test_info, parse_mode='HTML')
    
    async def help_handler(self, message: Message):
        """Handle /help command"""
        logger.info(f"Help command from user {message.from_user.id}")
        
        help_text = (
            "üìö <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ Crypto Helper Bot</b>\n\n"
            "üéØ <b>–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:</b>\n"
            "–ë–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç "
            "–∏ —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞—Ü–µ–Ω–∫–∏ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤.\n\n"
            "üí± <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–∞—Ä—ã:</b>\n"
            "‚Ä¢ USDT/ZAR, ZAR/USDT\n"
            "‚Ä¢ USDT/THB, THB/USDT\n"
            "‚Ä¢ USDT/AED, AED/USDT\n"
            "‚Ä¢ USDT/IDR, IDR/USDT\n"
            "‚Ä¢ USDT/RUB, RUB/USDT\n\n"
            "‚ö° <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
            "/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n"
            "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
            "/test - –¢–µ—Å—Ç–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n"
            "/admin_bot - –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å\n\n"
            "üîß <b>–°—Ç–∞—Ç—É—Å:</b> MVP –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
        )
        
        await message.reply(help_text, parse_mode='HTML')
    
    async def start(self):
        """Start the bot"""
        logger.info("üöÄ Starting Crypto Helper Bot...")
        logger.info(f"Debug mode: {config.DEBUG_MODE}")
        logger.info(f"Supported pairs: {len(config.SUPPORTED_PAIRS)}")
        
        try:
            # Get bot info
            bot_info = await self.bot.get_me()
            logger.info(f"Bot info: @{bot_info.username} ({bot_info.first_name})")
            
            # Start polling
            logger.info("Starting polling...")
            await self.dp.start_polling(self.bot)
            
        except Exception as e:
            logger.error(f"Error starting bot: {e}")
            raise
        finally:
            await self.cleanup()
    
    async def cleanup(self):
        """Cleanup resources"""
        logger.info("Cleaning up bot resources...")
        await self.bot.session.close()


async def main():
    """Main function to run the bot"""
    try:
        # Validate configuration
        config.validate()
        
        # Create and start bot
        bot = CryptoHelperBot()
        await bot.start()
        
    except ValueError as e:
        logger.error(f"Configuration error: {e}")
        return 1
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
        return 0
    except Exception as e:
        logger.error(f"Unexpected error: {e}")
        return 1


if __name__ == '__main__':
    print("ü§ñ Crypto Helper Bot - Production Version")
    print("=" * 50)
    
    try:
        exit_code = asyncio.run(main())
        exit(exit_code)
    except KeyboardInterrupt:
        print("\nüëã Bot stopped by user")
        exit(0)